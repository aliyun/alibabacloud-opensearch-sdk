/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.app;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class Quota implements org.apache.thrift.TBase<Quota, Quota._Fields>, java.io.Serializable, Cloneable, Comparable<Quota> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Quota");

  private static final org.apache.thrift.protocol.TField DOC_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("doc_size", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPUTE_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("compute_resource", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuotaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuotaTupleSchemeFactory());
  }

  private int doc_size; // optional
  private int compute_resource; // optional
  private String spec; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOC_SIZE((short)1, "doc_size"),
    COMPUTE_RESOURCE((short)2, "compute_resource"),
    SPEC((short)3, "spec");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * @param fieldId fieldId
     * @return Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOC_SIZE
          return DOC_SIZE;
        case 2: // COMPUTE_RESOURCE
          return COMPUTE_RESOURCE;
        case 3: // SPEC
          return SPEC;
        default:
          return null;
      }
    }

    /**
     * @param fieldId fieldId
     * @return Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * @param name name
     * @return Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DOC_SIZE_ISSET_ID = 0;
  private static final int __COMPUTE_RESOURCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOC_SIZE,_Fields.COMPUTE_RESOURCE,_Fields.SPEC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOC_SIZE, new org.apache.thrift.meta_data.FieldMetaData("doc_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPUTE_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("compute_resource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Quota.class, metaDataMap);
  }

  public Quota() {
  }

  public Quota(Quota other) {
    __isset_bitfield = other.__isset_bitfield;
    this.doc_size = other.doc_size;
    this.compute_resource = other.compute_resource;
    if (other.isSetSpec()) {
      this.spec = other.spec;
    }
  }

  public Quota deepCopy() {
    return new Quota(this);
  }

  @Override
  public void clear() {
    setDoc_sizeIsSet(false);
    this.doc_size = 0;
    setCompute_resourceIsSet(false);
    this.compute_resource = 0;
    this.spec = null;
  }

  public int getDoc_size() {
    return this.doc_size;
  }

  public Quota setDoc_size(int doc_size) {
    this.doc_size = doc_size;
    setDoc_sizeIsSet(true);
    return this;
  }

  public void unsetDoc_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOC_SIZE_ISSET_ID);
  }

  /**
   * @return Returns true if field doc_size is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetDoc_size() {
    return EncodingUtils.testBit(__isset_bitfield, __DOC_SIZE_ISSET_ID);
  }

  public void setDoc_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOC_SIZE_ISSET_ID, value);
  }

  public int getCompute_resource() {
    return this.compute_resource;
  }

  public Quota setCompute_resource(int compute_resource) {
    this.compute_resource = compute_resource;
    setCompute_resourceIsSet(true);
    return this;
  }

  public void unsetCompute_resource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPUTE_RESOURCE_ISSET_ID);
  }

  /**
   * @return Returns true if field compute_resource is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetCompute_resource() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPUTE_RESOURCE_ISSET_ID);
  }

  public void setCompute_resourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPUTE_RESOURCE_ISSET_ID, value);
  }

  public String getSpec() {
    return this.spec;
  }

  public Quota setSpec(String spec) {
    this.spec = spec;
    return this;
  }

  public void unsetSpec() {
    this.spec = null;
  }

  /**
   * @return Returns true if field spec is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetSpec() {
    return this.spec != null;
  }

  public void setSpecIsSet(boolean value) {
    if (!value) {
      this.spec = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DOC_SIZE:
      if (value == null) {
        unsetDoc_size();
      } else {
        setDoc_size((Integer)value);
      }
      break;

    case COMPUTE_RESOURCE:
      if (value == null) {
        unsetCompute_resource();
      } else {
        setCompute_resource((Integer)value);
      }
      break;

    case SPEC:
      if (value == null) {
        unsetSpec();
      } else {
        setSpec((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOC_SIZE:
      return getDoc_size();

    case COMPUTE_RESOURCE:
      return getCompute_resource();

    case SPEC:
      return getSpec();

    }
    throw new IllegalStateException();
  }

  /**
   * @param field field
   * @return Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
   **/
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOC_SIZE:
      return isSetDoc_size();
    case COMPUTE_RESOURCE:
      return isSetCompute_resource();
    case SPEC:
      return isSetSpec();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Quota)
      return this.equals((Quota)that);
    return false;
  }

  public boolean equals(Quota that) {
    if (that == null)
      return false;

    boolean this_present_doc_size = true && this.isSetDoc_size();
    boolean that_present_doc_size = true && that.isSetDoc_size();
    if (this_present_doc_size || that_present_doc_size) {
      if (!(this_present_doc_size && that_present_doc_size))
        return false;
      if (this.doc_size != that.doc_size)
        return false;
    }

    boolean this_present_compute_resource = true && this.isSetCompute_resource();
    boolean that_present_compute_resource = true && that.isSetCompute_resource();
    if (this_present_compute_resource || that_present_compute_resource) {
      if (!(this_present_compute_resource && that_present_compute_resource))
        return false;
      if (this.compute_resource != that.compute_resource)
        return false;
    }

    boolean this_present_spec = true && this.isSetSpec();
    boolean that_present_spec = true && that.isSetSpec();
    if (this_present_spec || that_present_spec) {
      if (!(this_present_spec && that_present_spec))
        return false;
      if (!this.spec.equals(that.spec))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_doc_size = true && (isSetDoc_size());
    list.add(present_doc_size);
    if (present_doc_size)
      list.add(doc_size);

    boolean present_compute_resource = true && (isSetCompute_resource());
    list.add(present_compute_resource);
    if (present_compute_resource)
      list.add(compute_resource);

    boolean present_spec = true && (isSetSpec());
    list.add(present_spec);
    if (present_spec)
      list.add(spec);

    return list.hashCode();
  }

  @Override
  public int compareTo(Quota other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDoc_size()).compareTo(other.isSetDoc_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoc_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doc_size, other.doc_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompute_resource()).compareTo(other.isSetCompute_resource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompute_resource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compute_resource, other.compute_resource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Quota(");
    boolean first = true;

    if (isSetDoc_size()) {
      sb.append("doc_size:");
      sb.append(this.doc_size);
      first = false;
    }
    if (isSetCompute_resource()) {
      if (!first) sb.append(", ");
      sb.append("compute_resource:");
      sb.append(this.compute_resource);
      first = false;
    }
    if (isSetSpec()) {
      if (!first) sb.append(", ");
      sb.append("spec:");
      if (this.spec == null) {
        sb.append("null");
      } else {
        sb.append(this.spec);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuotaStandardSchemeFactory implements SchemeFactory {
    public QuotaStandardScheme getScheme() {
      return new QuotaStandardScheme();
    }
  }

  private static class QuotaStandardScheme extends StandardScheme<Quota> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Quota struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOC_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.doc_size = iprot.readI32();
              struct.setDoc_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPUTE_RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compute_resource = iprot.readI32();
              struct.setCompute_resourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.spec = iprot.readString();
              struct.setSpecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Quota struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDoc_size()) {
        oprot.writeFieldBegin(DOC_SIZE_FIELD_DESC);
        oprot.writeI32(struct.doc_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompute_resource()) {
        oprot.writeFieldBegin(COMPUTE_RESOURCE_FIELD_DESC);
        oprot.writeI32(struct.compute_resource);
        oprot.writeFieldEnd();
      }
      if (struct.spec != null) {
        if (struct.isSetSpec()) {
          oprot.writeFieldBegin(SPEC_FIELD_DESC);
          oprot.writeString(struct.spec);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuotaTupleSchemeFactory implements SchemeFactory {
    public QuotaTupleScheme getScheme() {
      return new QuotaTupleScheme();
    }
  }

  private static class QuotaTupleScheme extends TupleScheme<Quota> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Quota struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDoc_size()) {
        optionals.set(0);
      }
      if (struct.isSetCompute_resource()) {
        optionals.set(1);
      }
      if (struct.isSetSpec()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDoc_size()) {
        oprot.writeI32(struct.doc_size);
      }
      if (struct.isSetCompute_resource()) {
        oprot.writeI32(struct.compute_resource);
      }
      if (struct.isSetSpec()) {
        oprot.writeString(struct.spec);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Quota struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.doc_size = iprot.readI32();
        struct.setDoc_sizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.compute_resource = iprot.readI32();
        struct.setCompute_resourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spec = iprot.readString();
        struct.setSpecIsSet(true);
      }
    }
  }

}

