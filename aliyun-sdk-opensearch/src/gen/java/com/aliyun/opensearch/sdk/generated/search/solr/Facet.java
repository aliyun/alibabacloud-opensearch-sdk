/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search.solr;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class Facet implements org.apache.thrift.TBase<Facet, Facet._Fields>, java.io.Serializable, Cloneable, Comparable<Facet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Facet");

  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField FACET_MIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("facetMinCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FACET_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("facetLimit", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FACET_MISSING_FIELD_DESC = new org.apache.thrift.protocol.TField("facetMissing", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField FACET_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("facetField", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FacetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FacetTupleSchemeFactory());
  }

  private boolean enabled; // required
  private int facetMinCount; // required
  private int facetLimit; // required
  private boolean facetMissing; // required
  private List<String> facetField; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENABLED((short)1, "enabled"),
    FACET_MIN_COUNT((short)2, "facetMinCount"),
    FACET_LIMIT((short)3, "facetLimit"),
    FACET_MISSING((short)4, "facetMissing"),
    FACET_FIELD((short)5, "facetField");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENABLED
          return ENABLED;
        case 2: // FACET_MIN_COUNT
          return FACET_MIN_COUNT;
        case 3: // FACET_LIMIT
          return FACET_LIMIT;
        case 4: // FACET_MISSING
          return FACET_MISSING;
        case 5: // FACET_FIELD
          return FACET_FIELD;
        default:
          return null;
      }
    }

    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLED_ISSET_ID = 0;
  private static final int __FACETMINCOUNT_ISSET_ID = 1;
  private static final int __FACETLIMIT_ISSET_ID = 2;
  private static final int __FACETMISSING_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.FACET_MIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("facetMinCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FACET_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("facetLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FACET_MISSING, new org.apache.thrift.meta_data.FieldMetaData("facetMissing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.FACET_FIELD, new org.apache.thrift.meta_data.FieldMetaData("facetField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Facet.class, metaDataMap);
  }

  public Facet() {
  }

  public Facet(
    boolean enabled,
    int facetMinCount,
    int facetLimit,
    boolean facetMissing,
    List<String> facetField)
  {
    this();
    this.enabled = enabled;
    setEnabledIsSet(true);
    this.facetMinCount = facetMinCount;
    setFacetMinCountIsSet(true);
    this.facetLimit = facetLimit;
    setFacetLimitIsSet(true);
    this.facetMissing = facetMissing;
    setFacetMissingIsSet(true);
    this.facetField = facetField;
  }

  public Facet(Facet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.enabled = other.enabled;
    this.facetMinCount = other.facetMinCount;
    this.facetLimit = other.facetLimit;
    this.facetMissing = other.facetMissing;
    if (other.isSetFacetField()) {
      List<String> __this__facetField = new ArrayList<String>(other.facetField);
      this.facetField = __this__facetField;
    }
  }

  public Facet deepCopy() {
    return new Facet(this);
  }

  @Override
  public void clear() {
    setEnabledIsSet(false);
    this.enabled = false;
    setFacetMinCountIsSet(false);
    this.facetMinCount = 0;
    setFacetLimitIsSet(false);
    this.facetLimit = 0;
    setFacetMissingIsSet(false);
    this.facetMissing = false;
    this.facetField = null;
  }

  public boolean isEnabled() {
    return this.enabled;
  }

  public Facet setEnabled(boolean enabled) {
    this.enabled = enabled;
    setEnabledIsSet(true);
    return this;
  }

  public void unsetEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  public boolean isSetEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  public void setEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLED_ISSET_ID, value);
  }

  public int getFacetMinCount() {
    return this.facetMinCount;
  }

  public Facet setFacetMinCount(int facetMinCount) {
    this.facetMinCount = facetMinCount;
    setFacetMinCountIsSet(true);
    return this;
  }

  public void unsetFacetMinCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACETMINCOUNT_ISSET_ID);
  }

  public boolean isSetFacetMinCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FACETMINCOUNT_ISSET_ID);
  }

  public void setFacetMinCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACETMINCOUNT_ISSET_ID, value);
  }

  public int getFacetLimit() {
    return this.facetLimit;
  }

  public Facet setFacetLimit(int facetLimit) {
    this.facetLimit = facetLimit;
    setFacetLimitIsSet(true);
    return this;
  }

  public void unsetFacetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACETLIMIT_ISSET_ID);
  }

  public boolean isSetFacetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __FACETLIMIT_ISSET_ID);
  }

  public void setFacetLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACETLIMIT_ISSET_ID, value);
  }

  public boolean isFacetMissing() {
    return this.facetMissing;
  }

  public Facet setFacetMissing(boolean facetMissing) {
    this.facetMissing = facetMissing;
    setFacetMissingIsSet(true);
    return this;
  }

  public void unsetFacetMissing() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACETMISSING_ISSET_ID);
  }

  public boolean isSetFacetMissing() {
    return EncodingUtils.testBit(__isset_bitfield, __FACETMISSING_ISSET_ID);
  }

  public void setFacetMissingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACETMISSING_ISSET_ID, value);
  }

  public int getFacetFieldSize() {
    return (this.facetField == null) ? 0 : this.facetField.size();
  }

  public java.util.Iterator<String> getFacetFieldIterator() {
    return (this.facetField == null) ? null : this.facetField.iterator();
  }

  public void addToFacetField(String elem) {
    if (this.facetField == null) {
      this.facetField = new ArrayList<String>();
    }
    this.facetField.add(elem);
  }

  public List<String> getFacetField() {
    return this.facetField;
  }

  public Facet setFacetField(List<String> facetField) {
    this.facetField = facetField;
    return this;
  }

  public void unsetFacetField() {
    this.facetField = null;
  }

  public boolean isSetFacetField() {
    return this.facetField != null;
  }

  public void setFacetFieldIsSet(boolean value) {
    if (!value) {
      this.facetField = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((Boolean)value);
      }
      break;

    case FACET_MIN_COUNT:
      if (value == null) {
        unsetFacetMinCount();
      } else {
        setFacetMinCount((Integer)value);
      }
      break;

    case FACET_LIMIT:
      if (value == null) {
        unsetFacetLimit();
      } else {
        setFacetLimit((Integer)value);
      }
      break;

    case FACET_MISSING:
      if (value == null) {
        unsetFacetMissing();
      } else {
        setFacetMissing((Boolean)value);
      }
      break;

    case FACET_FIELD:
      if (value == null) {
        unsetFacetField();
      } else {
        setFacetField((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENABLED:
      return isEnabled();

    case FACET_MIN_COUNT:
      return getFacetMinCount();

    case FACET_LIMIT:
      return getFacetLimit();

    case FACET_MISSING:
      return isFacetMissing();

    case FACET_FIELD:
      return getFacetField();

    }
    throw new IllegalStateException();
  }

  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENABLED:
      return isSetEnabled();
    case FACET_MIN_COUNT:
      return isSetFacetMinCount();
    case FACET_LIMIT:
      return isSetFacetLimit();
    case FACET_MISSING:
      return isSetFacetMissing();
    case FACET_FIELD:
      return isSetFacetField();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Facet)
      return this.equals((Facet)that);
    return false;
  }

  public boolean equals(Facet that) {
    if (that == null)
      return false;

    boolean this_present_enabled = true;
    boolean that_present_enabled = true;
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (this.enabled != that.enabled)
        return false;
    }

    boolean this_present_facetMinCount = true;
    boolean that_present_facetMinCount = true;
    if (this_present_facetMinCount || that_present_facetMinCount) {
      if (!(this_present_facetMinCount && that_present_facetMinCount))
        return false;
      if (this.facetMinCount != that.facetMinCount)
        return false;
    }

    boolean this_present_facetLimit = true;
    boolean that_present_facetLimit = true;
    if (this_present_facetLimit || that_present_facetLimit) {
      if (!(this_present_facetLimit && that_present_facetLimit))
        return false;
      if (this.facetLimit != that.facetLimit)
        return false;
    }

    boolean this_present_facetMissing = true;
    boolean that_present_facetMissing = true;
    if (this_present_facetMissing || that_present_facetMissing) {
      if (!(this_present_facetMissing && that_present_facetMissing))
        return false;
      if (this.facetMissing != that.facetMissing)
        return false;
    }

    boolean this_present_facetField = true && this.isSetFacetField();
    boolean that_present_facetField = true && that.isSetFacetField();
    if (this_present_facetField || that_present_facetField) {
      if (!(this_present_facetField && that_present_facetField))
        return false;
      if (!this.facetField.equals(that.facetField))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_enabled = true;
    list.add(present_enabled);
    if (present_enabled)
      list.add(enabled);

    boolean present_facetMinCount = true;
    list.add(present_facetMinCount);
    if (present_facetMinCount)
      list.add(facetMinCount);

    boolean present_facetLimit = true;
    list.add(present_facetLimit);
    if (present_facetLimit)
      list.add(facetLimit);

    boolean present_facetMissing = true;
    list.add(present_facetMissing);
    if (present_facetMissing)
      list.add(facetMissing);

    boolean present_facetField = true && (isSetFacetField());
    list.add(present_facetField);
    if (present_facetField)
      list.add(facetField);

    return list.hashCode();
  }

  @Override
  public int compareTo(Facet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEnabled()).compareTo(other.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, other.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetMinCount()).compareTo(other.isSetFacetMinCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetMinCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetMinCount, other.facetMinCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetLimit()).compareTo(other.isSetFacetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetLimit, other.facetLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetMissing()).compareTo(other.isSetFacetMissing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetMissing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetMissing, other.facetMissing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacetField()).compareTo(other.isSetFacetField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacetField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facetField, other.facetField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Facet(");
    boolean first = true;

    sb.append("enabled:");
    sb.append(this.enabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("facetMinCount:");
    sb.append(this.facetMinCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("facetLimit:");
    sb.append(this.facetLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("facetMissing:");
    sb.append(this.facetMissing);
    first = false;
    if (!first) sb.append(", ");
    sb.append("facetField:");
    if (this.facetField == null) {
      sb.append("null");
    } else {
      sb.append(this.facetField);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FacetStandardSchemeFactory implements SchemeFactory {
    public FacetStandardScheme getScheme() {
      return new FacetStandardScheme();
    }
  }

  private static class FacetStandardScheme extends StandardScheme<Facet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Facet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enabled = iprot.readBool();
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FACET_MIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.facetMinCount = iprot.readI32();
              struct.setFacetMinCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FACET_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.facetLimit = iprot.readI32();
              struct.setFacetLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FACET_MISSING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.facetMissing = iprot.readBool();
              struct.setFacetMissingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FACET_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.facetField = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.facetField.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFacetFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Facet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ENABLED_FIELD_DESC);
      oprot.writeBool(struct.enabled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACET_MIN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.facetMinCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACET_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.facetLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACET_MISSING_FIELD_DESC);
      oprot.writeBool(struct.facetMissing);
      oprot.writeFieldEnd();
      if (struct.facetField != null) {
        oprot.writeFieldBegin(FACET_FIELD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.facetField.size()));
          for (String _iter3 : struct.facetField)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FacetTupleSchemeFactory implements SchemeFactory {
    public FacetTupleScheme getScheme() {
      return new FacetTupleScheme();
    }
  }

  private static class FacetTupleScheme extends TupleScheme<Facet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Facet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEnabled()) {
        optionals.set(0);
      }
      if (struct.isSetFacetMinCount()) {
        optionals.set(1);
      }
      if (struct.isSetFacetLimit()) {
        optionals.set(2);
      }
      if (struct.isSetFacetMissing()) {
        optionals.set(3);
      }
      if (struct.isSetFacetField()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetEnabled()) {
        oprot.writeBool(struct.enabled);
      }
      if (struct.isSetFacetMinCount()) {
        oprot.writeI32(struct.facetMinCount);
      }
      if (struct.isSetFacetLimit()) {
        oprot.writeI32(struct.facetLimit);
      }
      if (struct.isSetFacetMissing()) {
        oprot.writeBool(struct.facetMissing);
      }
      if (struct.isSetFacetField()) {
        {
          oprot.writeI32(struct.facetField.size());
          for (String _iter4 : struct.facetField)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Facet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.enabled = iprot.readBool();
        struct.setEnabledIsSet(true);
      }
      if (incoming.get(1)) {
        struct.facetMinCount = iprot.readI32();
        struct.setFacetMinCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.facetLimit = iprot.readI32();
        struct.setFacetLimitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.facetMissing = iprot.readBool();
        struct.setFacetMissingIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.facetField = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.facetField.add(_elem6);
          }
        }
        struct.setFacetFieldIsSet(true);
      }
    }
  }

}

