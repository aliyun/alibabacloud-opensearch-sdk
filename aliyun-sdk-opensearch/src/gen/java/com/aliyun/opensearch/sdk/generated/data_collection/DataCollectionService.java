/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.data_collection;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-07-30")
public class DataCollectionService {

  public interface Iface {

    public com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult push(String docJson, String searchAppName, String dataCollectionName, String dataCollectionType) throws com.aliyun.opensearch.sdk.generated.commons.OpenSearchException, com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void push(String docJson, String searchAppName, String dataCollectionName, String dataCollectionType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult push(String docJson, String searchAppName, String dataCollectionName, String dataCollectionType) throws com.aliyun.opensearch.sdk.generated.commons.OpenSearchException, com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException, org.apache.thrift.TException
    {
      send_push(docJson, searchAppName, dataCollectionName, dataCollectionType);
      return recv_push();
    }

    public void send_push(String docJson, String searchAppName, String dataCollectionName, String dataCollectionType) throws org.apache.thrift.TException
    {
      push_args args = new push_args();
      args.setDocJson(docJson);
      args.setSearchAppName(searchAppName);
      args.setDataCollectionName(dataCollectionName);
      args.setDataCollectionType(dataCollectionType);
      sendBase("push", args);
    }

    public com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult recv_push() throws com.aliyun.opensearch.sdk.generated.commons.OpenSearchException, com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException, org.apache.thrift.TException
    {
      push_result result = new push_result();
      receiveBase(result, "push");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "push failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void push(String docJson, String searchAppName, String dataCollectionName, String dataCollectionType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      push_call method_call = new push_call(docJson, searchAppName, dataCollectionName, dataCollectionType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class push_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String docJson;
      private String searchAppName;
      private String dataCollectionName;
      private String dataCollectionType;
      public push_call(String docJson, String searchAppName, String dataCollectionName, String dataCollectionType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.docJson = docJson;
        this.searchAppName = searchAppName;
        this.dataCollectionName = dataCollectionName;
        this.dataCollectionType = dataCollectionType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("push", org.apache.thrift.protocol.TMessageType.CALL, 0));
        push_args args = new push_args();
        args.setDocJson(docJson);
        args.setSearchAppName(searchAppName);
        args.setDataCollectionName(dataCollectionName);
        args.setDataCollectionType(dataCollectionType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult getResult() throws com.aliyun.opensearch.sdk.generated.commons.OpenSearchException, com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_push();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("push", new push());
      return processMap;
    }

    public static class push<I extends Iface> extends org.apache.thrift.ProcessFunction<I, push_args> {
      public push() {
        super("push");
      }

      public push_args getEmptyArgsInstance() {
        return new push_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public push_result getResult(I iface, push_args args) throws org.apache.thrift.TException {
        push_result result = new push_result();
        try {
          result.success = iface.push(args.docJson, args.searchAppName, args.dataCollectionName, args.dataCollectionType);
        } catch (com.aliyun.opensearch.sdk.generated.commons.OpenSearchException error) {
          result.error = error;
        } catch (com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("push", new push());
      return processMap;
    }

    public static class push<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, push_args, com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult> {
      public push() {
        super("push");
      }

      public push_args getEmptyArgsInstance() {
        return new push_args();
      }

      public AsyncMethodCallback<com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult>() { 
          public void onComplete(com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult o) {
            push_result result = new push_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            push_result result = new push_result();
            if (e instanceof com.aliyun.opensearch.sdk.generated.commons.OpenSearchException) {
                        result.error = (com.aliyun.opensearch.sdk.generated.commons.OpenSearchException) e;
                        result.setErrorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException) {
                        result.e = (com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, push_args args, org.apache.thrift.async.AsyncMethodCallback<com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult> resultHandler) throws TException {
        iface.push(args.docJson, args.searchAppName, args.dataCollectionName, args.dataCollectionType,resultHandler);
      }
    }

  }

  public static class push_args implements org.apache.thrift.TBase<push_args, push_args._Fields>, java.io.Serializable, Cloneable, Comparable<push_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("push_args");

    private static final org.apache.thrift.protocol.TField DOC_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("docJson", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("searchAppName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_COLLECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dataCollectionName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATA_COLLECTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataCollectionType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new push_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new push_argsTupleSchemeFactory());
    }

    public String docJson; // required
    public String searchAppName; // required
    public String dataCollectionName; // required
    public String dataCollectionType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOC_JSON((short)1, "docJson"),
      SEARCH_APP_NAME((short)2, "searchAppName"),
      DATA_COLLECTION_NAME((short)3, "dataCollectionName"),
      DATA_COLLECTION_TYPE((short)4, "dataCollectionType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOC_JSON
            return DOC_JSON;
          case 2: // SEARCH_APP_NAME
            return SEARCH_APP_NAME;
          case 3: // DATA_COLLECTION_NAME
            return DATA_COLLECTION_NAME;
          case 4: // DATA_COLLECTION_TYPE
            return DATA_COLLECTION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOC_JSON, new org.apache.thrift.meta_data.FieldMetaData("docJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEARCH_APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("searchAppName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_COLLECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("dataCollectionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_COLLECTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataCollectionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(push_args.class, metaDataMap);
    }

    public push_args() {
    }

    public push_args(
      String docJson,
      String searchAppName,
      String dataCollectionName,
      String dataCollectionType)
    {
      this();
      this.docJson = docJson;
      this.searchAppName = searchAppName;
      this.dataCollectionName = dataCollectionName;
      this.dataCollectionType = dataCollectionType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public push_args(push_args other) {
      if (other.isSetDocJson()) {
        this.docJson = other.docJson;
      }
      if (other.isSetSearchAppName()) {
        this.searchAppName = other.searchAppName;
      }
      if (other.isSetDataCollectionName()) {
        this.dataCollectionName = other.dataCollectionName;
      }
      if (other.isSetDataCollectionType()) {
        this.dataCollectionType = other.dataCollectionType;
      }
    }

    public push_args deepCopy() {
      return new push_args(this);
    }

    @Override
    public void clear() {
      this.docJson = null;
      this.searchAppName = null;
      this.dataCollectionName = null;
      this.dataCollectionType = null;
    }

    public String getDocJson() {
      return this.docJson;
    }

    public push_args setDocJson(String docJson) {
      this.docJson = docJson;
      return this;
    }

    public void unsetDocJson() {
      this.docJson = null;
    }

    /** Returns true if field docJson is set (has been assigned a value) and false otherwise */
    public boolean isSetDocJson() {
      return this.docJson != null;
    }

    public void setDocJsonIsSet(boolean value) {
      if (!value) {
        this.docJson = null;
      }
    }

    public String getSearchAppName() {
      return this.searchAppName;
    }

    public push_args setSearchAppName(String searchAppName) {
      this.searchAppName = searchAppName;
      return this;
    }

    public void unsetSearchAppName() {
      this.searchAppName = null;
    }

    /** Returns true if field searchAppName is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchAppName() {
      return this.searchAppName != null;
    }

    public void setSearchAppNameIsSet(boolean value) {
      if (!value) {
        this.searchAppName = null;
      }
    }

    public String getDataCollectionName() {
      return this.dataCollectionName;
    }

    public push_args setDataCollectionName(String dataCollectionName) {
      this.dataCollectionName = dataCollectionName;
      return this;
    }

    public void unsetDataCollectionName() {
      this.dataCollectionName = null;
    }

    /** Returns true if field dataCollectionName is set (has been assigned a value) and false otherwise */
    public boolean isSetDataCollectionName() {
      return this.dataCollectionName != null;
    }

    public void setDataCollectionNameIsSet(boolean value) {
      if (!value) {
        this.dataCollectionName = null;
      }
    }

    public String getDataCollectionType() {
      return this.dataCollectionType;
    }

    public push_args setDataCollectionType(String dataCollectionType) {
      this.dataCollectionType = dataCollectionType;
      return this;
    }

    public void unsetDataCollectionType() {
      this.dataCollectionType = null;
    }

    /** Returns true if field dataCollectionType is set (has been assigned a value) and false otherwise */
    public boolean isSetDataCollectionType() {
      return this.dataCollectionType != null;
    }

    public void setDataCollectionTypeIsSet(boolean value) {
      if (!value) {
        this.dataCollectionType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOC_JSON:
        if (value == null) {
          unsetDocJson();
        } else {
          setDocJson((String)value);
        }
        break;

      case SEARCH_APP_NAME:
        if (value == null) {
          unsetSearchAppName();
        } else {
          setSearchAppName((String)value);
        }
        break;

      case DATA_COLLECTION_NAME:
        if (value == null) {
          unsetDataCollectionName();
        } else {
          setDataCollectionName((String)value);
        }
        break;

      case DATA_COLLECTION_TYPE:
        if (value == null) {
          unsetDataCollectionType();
        } else {
          setDataCollectionType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOC_JSON:
        return getDocJson();

      case SEARCH_APP_NAME:
        return getSearchAppName();

      case DATA_COLLECTION_NAME:
        return getDataCollectionName();

      case DATA_COLLECTION_TYPE:
        return getDataCollectionType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOC_JSON:
        return isSetDocJson();
      case SEARCH_APP_NAME:
        return isSetSearchAppName();
      case DATA_COLLECTION_NAME:
        return isSetDataCollectionName();
      case DATA_COLLECTION_TYPE:
        return isSetDataCollectionType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof push_args)
        return this.equals((push_args)that);
      return false;
    }

    public boolean equals(push_args that) {
      if (that == null)
        return false;

      boolean this_present_docJson = true && this.isSetDocJson();
      boolean that_present_docJson = true && that.isSetDocJson();
      if (this_present_docJson || that_present_docJson) {
        if (!(this_present_docJson && that_present_docJson))
          return false;
        if (!this.docJson.equals(that.docJson))
          return false;
      }

      boolean this_present_searchAppName = true && this.isSetSearchAppName();
      boolean that_present_searchAppName = true && that.isSetSearchAppName();
      if (this_present_searchAppName || that_present_searchAppName) {
        if (!(this_present_searchAppName && that_present_searchAppName))
          return false;
        if (!this.searchAppName.equals(that.searchAppName))
          return false;
      }

      boolean this_present_dataCollectionName = true && this.isSetDataCollectionName();
      boolean that_present_dataCollectionName = true && that.isSetDataCollectionName();
      if (this_present_dataCollectionName || that_present_dataCollectionName) {
        if (!(this_present_dataCollectionName && that_present_dataCollectionName))
          return false;
        if (!this.dataCollectionName.equals(that.dataCollectionName))
          return false;
      }

      boolean this_present_dataCollectionType = true && this.isSetDataCollectionType();
      boolean that_present_dataCollectionType = true && that.isSetDataCollectionType();
      if (this_present_dataCollectionType || that_present_dataCollectionType) {
        if (!(this_present_dataCollectionType && that_present_dataCollectionType))
          return false;
        if (!this.dataCollectionType.equals(that.dataCollectionType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_docJson = true && (isSetDocJson());
      list.add(present_docJson);
      if (present_docJson)
        list.add(docJson);

      boolean present_searchAppName = true && (isSetSearchAppName());
      list.add(present_searchAppName);
      if (present_searchAppName)
        list.add(searchAppName);

      boolean present_dataCollectionName = true && (isSetDataCollectionName());
      list.add(present_dataCollectionName);
      if (present_dataCollectionName)
        list.add(dataCollectionName);

      boolean present_dataCollectionType = true && (isSetDataCollectionType());
      list.add(present_dataCollectionType);
      if (present_dataCollectionType)
        list.add(dataCollectionType);

      return list.hashCode();
    }

    @Override
    public int compareTo(push_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDocJson()).compareTo(other.isSetDocJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docJson, other.docJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchAppName()).compareTo(other.isSetSearchAppName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchAppName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchAppName, other.searchAppName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataCollectionName()).compareTo(other.isSetDataCollectionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataCollectionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataCollectionName, other.dataCollectionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataCollectionType()).compareTo(other.isSetDataCollectionType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataCollectionType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataCollectionType, other.dataCollectionType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("push_args(");
      boolean first = true;

      sb.append("docJson:");
      if (this.docJson == null) {
        sb.append("null");
      } else {
        sb.append(this.docJson);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchAppName:");
      if (this.searchAppName == null) {
        sb.append("null");
      } else {
        sb.append(this.searchAppName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataCollectionName:");
      if (this.dataCollectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.dataCollectionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataCollectionType:");
      if (this.dataCollectionType == null) {
        sb.append("null");
      } else {
        sb.append(this.dataCollectionType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class push_argsStandardSchemeFactory implements SchemeFactory {
      public push_argsStandardScheme getScheme() {
        return new push_argsStandardScheme();
      }
    }

    private static class push_argsStandardScheme extends StandardScheme<push_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, push_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOC_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.docJson = iprot.readString();
                struct.setDocJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_APP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchAppName = iprot.readString();
                struct.setSearchAppNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_COLLECTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataCollectionName = iprot.readString();
                struct.setDataCollectionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATA_COLLECTION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataCollectionType = iprot.readString();
                struct.setDataCollectionTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, push_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.docJson != null) {
          oprot.writeFieldBegin(DOC_JSON_FIELD_DESC);
          oprot.writeString(struct.docJson);
          oprot.writeFieldEnd();
        }
        if (struct.searchAppName != null) {
          oprot.writeFieldBegin(SEARCH_APP_NAME_FIELD_DESC);
          oprot.writeString(struct.searchAppName);
          oprot.writeFieldEnd();
        }
        if (struct.dataCollectionName != null) {
          oprot.writeFieldBegin(DATA_COLLECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.dataCollectionName);
          oprot.writeFieldEnd();
        }
        if (struct.dataCollectionType != null) {
          oprot.writeFieldBegin(DATA_COLLECTION_TYPE_FIELD_DESC);
          oprot.writeString(struct.dataCollectionType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class push_argsTupleSchemeFactory implements SchemeFactory {
      public push_argsTupleScheme getScheme() {
        return new push_argsTupleScheme();
      }
    }

    private static class push_argsTupleScheme extends TupleScheme<push_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, push_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDocJson()) {
          optionals.set(0);
        }
        if (struct.isSetSearchAppName()) {
          optionals.set(1);
        }
        if (struct.isSetDataCollectionName()) {
          optionals.set(2);
        }
        if (struct.isSetDataCollectionType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDocJson()) {
          oprot.writeString(struct.docJson);
        }
        if (struct.isSetSearchAppName()) {
          oprot.writeString(struct.searchAppName);
        }
        if (struct.isSetDataCollectionName()) {
          oprot.writeString(struct.dataCollectionName);
        }
        if (struct.isSetDataCollectionType()) {
          oprot.writeString(struct.dataCollectionType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, push_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.docJson = iprot.readString();
          struct.setDocJsonIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchAppName = iprot.readString();
          struct.setSearchAppNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataCollectionName = iprot.readString();
          struct.setDataCollectionNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dataCollectionType = iprot.readString();
          struct.setDataCollectionTypeIsSet(true);
        }
      }
    }

  }

  public static class push_result implements org.apache.thrift.TBase<push_result, push_result._Fields>, java.io.Serializable, Cloneable, Comparable<push_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("push_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new push_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new push_resultTupleSchemeFactory());
    }

    public com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult success; // required
    public com.aliyun.opensearch.sdk.generated.commons.OpenSearchException error; // required
    public com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERROR((short)1, "error"),
      E((short)2, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERROR
            return ERROR;
          case 2: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult.class)));
      tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(push_result.class, metaDataMap);
    }

    public push_result() {
    }

    public push_result(
      com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult success,
      com.aliyun.opensearch.sdk.generated.commons.OpenSearchException error,
      com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException e)
    {
      this();
      this.success = success;
      this.error = error;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public push_result(push_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult(other.success);
      }
      if (other.isSetError()) {
        this.error = new com.aliyun.opensearch.sdk.generated.commons.OpenSearchException(other.error);
      }
      if (other.isSetE()) {
        this.e = new com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException(other.e);
      }
    }

    public push_result deepCopy() {
      return new push_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.error = null;
      this.e = null;
    }

    public com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult getSuccess() {
      return this.success;
    }

    public push_result setSuccess(com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.aliyun.opensearch.sdk.generated.commons.OpenSearchException getError() {
      return this.error;
    }

    public push_result setError(com.aliyun.opensearch.sdk.generated.commons.OpenSearchException error) {
      this.error = error;
      return this;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException getE() {
      return this.e;
    }

    public push_result setE(com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult)value);
        }
        break;

      case ERROR:
        if (value == null) {
          unsetError();
        } else {
          setError((com.aliyun.opensearch.sdk.generated.commons.OpenSearchException)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERROR:
        return getError();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERROR:
        return isSetError();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof push_result)
        return this.equals((push_result)that);
      return false;
    }

    public boolean equals(push_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_error = true && (isSetError());
      list.add(present_error);
      if (present_error)
        list.add(error);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(push_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("push_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class push_resultStandardSchemeFactory implements SchemeFactory {
      public push_resultStandardScheme getScheme() {
        return new push_resultStandardScheme();
      }
    }

    private static class push_resultStandardScheme extends StandardScheme<push_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, push_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.error = new com.aliyun.opensearch.sdk.generated.commons.OpenSearchException();
                struct.error.read(iprot);
                struct.setErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, push_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.error != null) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class push_resultTupleSchemeFactory implements SchemeFactory {
      public push_resultTupleScheme getScheme() {
        return new push_resultTupleScheme();
      }
    }

    private static class push_resultTupleScheme extends TupleScheme<push_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, push_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetError()) {
          optionals.set(1);
        }
        if (struct.isSetE()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetError()) {
          struct.error.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, push_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new com.aliyun.opensearch.sdk.generated.commons.OpenSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error = new com.aliyun.opensearch.sdk.generated.commons.OpenSearchException();
          struct.error.read(iprot);
          struct.setErrorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.e = new com.aliyun.opensearch.sdk.generated.commons.OpenSearchClientException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
