/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-09-19")
public class SearchParams implements org.apache.thrift.TBase<SearchParams, SearchParams._Fields>, java.io.Serializable, Cloneable, Comparable<SearchParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchParams");

  private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("sort", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField AGGREGATES_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregates", org.apache.thrift.protocol.TType.SET, (short)13);
  private static final org.apache.thrift.protocol.TField DISTINCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("distincts", org.apache.thrift.protocol.TType.SET, (short)15);
  private static final org.apache.thrift.protocol.TField SUMMARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("summaries", org.apache.thrift.protocol.TType.SET, (short)17);
  private static final org.apache.thrift.protocol.TField QUERY_PROCESSOR_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("queryProcessorNames", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField DEEP_PAGING_FIELD_DESC = new org.apache.thrift.protocol.TField("deepPaging", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField DISABLE_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("disableFunctions", org.apache.thrift.protocol.TType.MAP, (short)23);
  private static final org.apache.thrift.protocol.TField CUSTOM_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("customParam", org.apache.thrift.protocol.TType.MAP, (short)27);
  private static final org.apache.thrift.protocol.TField SUGGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("suggest", org.apache.thrift.protocol.TType.STRUCT, (short)29);
  private static final org.apache.thrift.protocol.TField ABTEST_FIELD_DESC = new org.apache.thrift.protocol.TField("abtest", org.apache.thrift.protocol.TType.STRUCT, (short)30);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField RAW_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("rawQuery", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField FINAL_DISTINCT_FIELD_DESC = new org.apache.thrift.protocol.TField("finalDistinct", org.apache.thrift.protocol.TType.STRUCT, (short)33);
  private static final org.apache.thrift.protocol.TField CUSTOM_CLAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("customClause", org.apache.thrift.protocol.TType.MAP, (short)35);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchParamsTupleSchemeFactory());
  }

  /**
   * config for search.
   */
  public Config config; // required
  /**
   * 设定指定索引字段范围的搜索关键词(query)
   * 
   * 此query是查询必需的一部分，可以指定不同的索引名，并同时可指定多个查询及之间的关系
   * （AND, OR, ANDNOT, RANK）。
   * 
   * 例如查询subject索引字段的query:“手机”，可以设置为 query=subject:'手机'。
   * 
   * 上边例子如果查询price 在1000-2000之间的手机，其查询语句为： query=subject:'手机'
   * AND price:[1000,2000]
   * 
   * NOTE: text类型索引在建立时做了分词，而string类型的索引则没有分词。
   * 
   * @see <a href="http://docs.aliyun.com/?spm=5176.2020520121.103.8.VQIcGd&tag=tun#/pub/opensearch/api-reference/query-clause&query-clause">Query Clause</a>
   * 
   */
  public String query; // optional
  /**
   * 过滤规则(filter)
   */
  public String filter; // optional
  /**
   * 排序字段及排序方式(sort)
   */
  public Sort sort; // optional
  public Rank rank; // optional
  /**
   * 添加统计信息(aggregate)相关参数
   */
  public Set<Aggregate> aggregates; // optional
  /**
   * 聚合打散条件
   */
  public Set<Distinct> distincts; // optional
  /**
   * 动态摘要(summary)信息
   */
  public Set<Summary> summaries; // optional
  /**
   * 设置查询分析规则(qp)
   */
  public List<String> queryProcessorNames; // optional
  public DeepPaging deepPaging; // optional
  /**
   * 关闭某些功能模块(disable)
   * 
   * 有如下场景需要考虑：
   * 1、如果要关闭整个qp的功能，则指定disableValue="qp"。
   * 2、要指定某个索引关闭某个功能，则可以指定disableValue="qp:function_name:index_names",
   *   其中index_names可以用“|”分隔，可以为index_name1|index_name2...
   * 3、如果要关闭多个function可以用“,”分隔，例如：disableValue="qp:function_name1:index_name1,qp:function_name2:index_name1"
   * 
   * qp有如下模块：
   * 1、spell_check: 检查用户查询串中的拼写错误，并给出纠错建议。
   * 2、term_weighting: 分析查询中每个词的重要程度，并将其量化成权重，权重较低的词可能不会参与召回。
   * 3、stop_word: 根据系统内置的停用词典过滤查询中无意义的词
   * 4、synonym: 根据系统提供的通用同义词库和语义模型，对查询串进行同义词扩展，以便扩大召回。
   * 
   * example:
   * "qp" 标示关闭整个qp
   * "qp:spell_check" 标示关闭qp的拼音纠错功能。
   * "qp:stop_word:index_name1|index_name2" 标示关闭qp中index_name1和index_name2上的停用词功能。
   * 
   * key 需要禁用的函数名称
   * value 待禁用函数的详细说明
   */
  public Map<String,String> disableFunctions; // optional
  public Map<String,String> customParam; // optional
  /**
   * 下拉提示是搜索服务的基础功能，在用户输入查询词的过程中，智能推荐候选query，减少用户输入，帮助用户尽快找到想要的内容。
   * OpenSearch下拉提示在实现了中文前缀，拼音全拼，拼音首字母简拼查询等通用功能的基础上，实现了基于用户文档内容的query智能识别。
   * 用户通过控制台的简单配置，就能拥有专属的定制下拉提示。此外，控制台上还提供了黑名单，推荐词条功能，让用户进一步控制下拉提示
   * 的结果，实现更灵活的定制。
   * 
   */
  public Suggest suggest; // optional
  /**
   * Abtest
   */
  public Abtest abtest; // optional
  /**
   * 终端用户的id，用来统计uv信息
   */
  public String userId; // optional
  /**
   * 终端用户输入的query
   */
  public String rawQuery; // optional
  /**
   * 精排聚合打散条件
   */
  public FinalDistinct finalDistinct; // optional
  /**
   * 自定义查询子句
   */
  public Map<String,String> customClause; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * config for search.
     */
    CONFIG((short)3, "config"),
    /**
     * 设定指定索引字段范围的搜索关键词(query)
     * 
     * 此query是查询必需的一部分，可以指定不同的索引名，并同时可指定多个查询及之间的关系
     * （AND, OR, ANDNOT, RANK）。
     * 
     * 例如查询subject索引字段的query:“手机”，可以设置为 query=subject:'手机'。
     * 
     * 上边例子如果查询price 在1000-2000之间的手机，其查询语句为： query=subject:'手机'
     * AND price:[1000,2000]
     * 
     * NOTE: text类型索引在建立时做了分词，而string类型的索引则没有分词。
     * 
     * @see <a href="http://docs.aliyun.com/?spm=5176.2020520121.103.8.VQIcGd&tag=tun#/pub/opensearch/api-reference/query-clause&query-clause">Query Clause</a>
     * 
     */
    QUERY((short)5, "query"),
    /**
     * 过滤规则(filter)
     */
    FILTER((short)7, "filter"),
    /**
     * 排序字段及排序方式(sort)
     */
    SORT((short)9, "sort"),
    RANK((short)11, "rank"),
    /**
     * 添加统计信息(aggregate)相关参数
     */
    AGGREGATES((short)13, "aggregates"),
    /**
     * 聚合打散条件
     */
    DISTINCTS((short)15, "distincts"),
    /**
     * 动态摘要(summary)信息
     */
    SUMMARIES((short)17, "summaries"),
    /**
     * 设置查询分析规则(qp)
     */
    QUERY_PROCESSOR_NAMES((short)19, "queryProcessorNames"),
    DEEP_PAGING((short)21, "deepPaging"),
    /**
     * 关闭某些功能模块(disable)
     * 
     * 有如下场景需要考虑：
     * 1、如果要关闭整个qp的功能，则指定disableValue="qp"。
     * 2、要指定某个索引关闭某个功能，则可以指定disableValue="qp:function_name:index_names",
     *   其中index_names可以用“|”分隔，可以为index_name1|index_name2...
     * 3、如果要关闭多个function可以用“,”分隔，例如：disableValue="qp:function_name1:index_name1,qp:function_name2:index_name1"
     * 
     * qp有如下模块：
     * 1、spell_check: 检查用户查询串中的拼写错误，并给出纠错建议。
     * 2、term_weighting: 分析查询中每个词的重要程度，并将其量化成权重，权重较低的词可能不会参与召回。
     * 3、stop_word: 根据系统内置的停用词典过滤查询中无意义的词
     * 4、synonym: 根据系统提供的通用同义词库和语义模型，对查询串进行同义词扩展，以便扩大召回。
     * 
     * example:
     * "qp" 标示关闭整个qp
     * "qp:spell_check" 标示关闭qp的拼音纠错功能。
     * "qp:stop_word:index_name1|index_name2" 标示关闭qp中index_name1和index_name2上的停用词功能。
     * 
     * key 需要禁用的函数名称
     * value 待禁用函数的详细说明
     */
    DISABLE_FUNCTIONS((short)23, "disableFunctions"),
    CUSTOM_PARAM((short)27, "customParam"),
    /**
     * 下拉提示是搜索服务的基础功能，在用户输入查询词的过程中，智能推荐候选query，减少用户输入，帮助用户尽快找到想要的内容。
     * OpenSearch下拉提示在实现了中文前缀，拼音全拼，拼音首字母简拼查询等通用功能的基础上，实现了基于用户文档内容的query智能识别。
     * 用户通过控制台的简单配置，就能拥有专属的定制下拉提示。此外，控制台上还提供了黑名单，推荐词条功能，让用户进一步控制下拉提示
     * 的结果，实现更灵活的定制。
     * 
     */
    SUGGEST((short)29, "suggest"),
    /**
     * Abtest
     */
    ABTEST((short)30, "abtest"),
    /**
     * 终端用户的id，用来统计uv信息
     */
    USER_ID((short)31, "userId"),
    /**
     * 终端用户输入的query
     */
    RAW_QUERY((short)32, "rawQuery"),
    /**
     * 精排聚合打散条件
     */
    FINAL_DISTINCT((short)33, "finalDistinct"),
    /**
     * 自定义查询子句
     */
    CUSTOM_CLAUSE((short)35, "customClause");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 3: // CONFIG
          return CONFIG;
        case 5: // QUERY
          return QUERY;
        case 7: // FILTER
          return FILTER;
        case 9: // SORT
          return SORT;
        case 11: // RANK
          return RANK;
        case 13: // AGGREGATES
          return AGGREGATES;
        case 15: // DISTINCTS
          return DISTINCTS;
        case 17: // SUMMARIES
          return SUMMARIES;
        case 19: // QUERY_PROCESSOR_NAMES
          return QUERY_PROCESSOR_NAMES;
        case 21: // DEEP_PAGING
          return DEEP_PAGING;
        case 23: // DISABLE_FUNCTIONS
          return DISABLE_FUNCTIONS;
        case 27: // CUSTOM_PARAM
          return CUSTOM_PARAM;
        case 29: // SUGGEST
          return SUGGEST;
        case 30: // ABTEST
          return ABTEST;
        case 31: // USER_ID
          return USER_ID;
        case 32: // RAW_QUERY
          return RAW_QUERY;
        case 33: // FINAL_DISTINCT
          return FINAL_DISTINCT;
        case 35: // CUSTOM_CLAUSE
          return CUSTOM_CLAUSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.QUERY,_Fields.FILTER,_Fields.SORT,_Fields.RANK,_Fields.AGGREGATES,_Fields.DISTINCTS,_Fields.SUMMARIES,_Fields.QUERY_PROCESSOR_NAMES,_Fields.DEEP_PAGING,_Fields.DISABLE_FUNCTIONS,_Fields.CUSTOM_PARAM,_Fields.SUGGEST,_Fields.ABTEST,_Fields.USER_ID,_Fields.RAW_QUERY,_Fields.FINAL_DISTINCT,_Fields.CUSTOM_CLAUSE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Config.class)));
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT, new org.apache.thrift.meta_data.FieldMetaData("sort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sort.class)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Rank.class)));
    tmpMap.put(_Fields.AGGREGATES, new org.apache.thrift.meta_data.FieldMetaData("aggregates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Aggregate.class))));
    tmpMap.put(_Fields.DISTINCTS, new org.apache.thrift.meta_data.FieldMetaData("distincts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Distinct.class))));
    tmpMap.put(_Fields.SUMMARIES, new org.apache.thrift.meta_data.FieldMetaData("summaries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Summary.class))));
    tmpMap.put(_Fields.QUERY_PROCESSOR_NAMES, new org.apache.thrift.meta_data.FieldMetaData("queryProcessorNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DEEP_PAGING, new org.apache.thrift.meta_data.FieldMetaData("deepPaging", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeepPaging.class)));
    tmpMap.put(_Fields.DISABLE_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("disableFunctions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CUSTOM_PARAM, new org.apache.thrift.meta_data.FieldMetaData("customParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SUGGEST, new org.apache.thrift.meta_data.FieldMetaData("suggest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Suggest.class)));
    tmpMap.put(_Fields.ABTEST, new org.apache.thrift.meta_data.FieldMetaData("abtest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Abtest.class)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RAW_QUERY, new org.apache.thrift.meta_data.FieldMetaData("rawQuery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINAL_DISTINCT, new org.apache.thrift.meta_data.FieldMetaData("finalDistinct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinalDistinct.class)));
    tmpMap.put(_Fields.CUSTOM_CLAUSE, new org.apache.thrift.meta_data.FieldMetaData("customClause", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchParams.class, metaDataMap);
  }

  public SearchParams() {
    this.rank = new Rank();
    this.rank.setReRankSize(200);

  }

  public SearchParams(
    Config config)
  {
    this();
    this.config = config;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchParams(SearchParams other) {
    if (other.isSetConfig()) {
      this.config = new Config(other.config);
    }
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetFilter()) {
      this.filter = other.filter;
    }
    if (other.isSetSort()) {
      this.sort = new Sort(other.sort);
    }
    if (other.isSetRank()) {
      this.rank = new Rank(other.rank);
    }
    if (other.isSetAggregates()) {
      Set<Aggregate> __this__aggregates = new HashSet<Aggregate>(other.aggregates.size());
      for (Aggregate other_element : other.aggregates) {
        __this__aggregates.add(new Aggregate(other_element));
      }
      this.aggregates = __this__aggregates;
    }
    if (other.isSetDistincts()) {
      Set<Distinct> __this__distincts = new HashSet<Distinct>(other.distincts.size());
      for (Distinct other_element : other.distincts) {
        __this__distincts.add(new Distinct(other_element));
      }
      this.distincts = __this__distincts;
    }
    if (other.isSetSummaries()) {
      Set<Summary> __this__summaries = new HashSet<Summary>(other.summaries.size());
      for (Summary other_element : other.summaries) {
        __this__summaries.add(new Summary(other_element));
      }
      this.summaries = __this__summaries;
    }
    if (other.isSetQueryProcessorNames()) {
      List<String> __this__queryProcessorNames = new ArrayList<String>(other.queryProcessorNames);
      this.queryProcessorNames = __this__queryProcessorNames;
    }
    if (other.isSetDeepPaging()) {
      this.deepPaging = new DeepPaging(other.deepPaging);
    }
    if (other.isSetDisableFunctions()) {
      Map<String,String> __this__disableFunctions = new HashMap<String,String>(other.disableFunctions);
      this.disableFunctions = __this__disableFunctions;
    }
    if (other.isSetCustomParam()) {
      Map<String,String> __this__customParam = new HashMap<String,String>(other.customParam);
      this.customParam = __this__customParam;
    }
    if (other.isSetSuggest()) {
      this.suggest = new Suggest(other.suggest);
    }
    if (other.isSetAbtest()) {
      this.abtest = new Abtest(other.abtest);
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetRawQuery()) {
      this.rawQuery = other.rawQuery;
    }
    if (other.isSetFinalDistinct()) {
      this.finalDistinct = new FinalDistinct(other.finalDistinct);
    }
    if (other.isSetCustomClause()) {
      Map<String,String> __this__customClause = new HashMap<String,String>(other.customClause);
      this.customClause = __this__customClause;
    }
  }

  public SearchParams deepCopy() {
    return new SearchParams(this);
  }

  @Override
  public void clear() {
    this.config = null;
    this.query = null;
    this.filter = null;
    this.sort = null;
    this.rank = new Rank();
    this.rank.setReRankSize(200);

    this.aggregates = null;
    this.distincts = null;
    this.summaries = null;
    this.queryProcessorNames = null;
    this.deepPaging = null;
    this.disableFunctions = null;
    this.customParam = null;
    this.suggest = null;
    this.abtest = null;
    this.userId = null;
    this.rawQuery = null;
    this.finalDistinct = null;
    this.customClause = null;
  }

  /**
   * config for search.
   */
  public Config getConfig() {
    return this.config;
  }

  /**
   * config for search.
   */
  public SearchParams setConfig(Config config) {
    this.config = config;
    return this;
  }

  public void unsetConfig() {
    this.config = null;
  }

  /** Returns true if field config is set (has been assigned a value) and false otherwise */
  public boolean isSetConfig() {
    return this.config != null;
  }

  public void setConfigIsSet(boolean value) {
    if (!value) {
      this.config = null;
    }
  }

  /**
   * 设定指定索引字段范围的搜索关键词(query)
   * 
   * 此query是查询必需的一部分，可以指定不同的索引名，并同时可指定多个查询及之间的关系
   * （AND, OR, ANDNOT, RANK）。
   * 
   * 例如查询subject索引字段的query:“手机”，可以设置为 query=subject:'手机'。
   * 
   * 上边例子如果查询price 在1000-2000之间的手机，其查询语句为： query=subject:'手机'
   * AND price:[1000,2000]
   * 
   * NOTE: text类型索引在建立时做了分词，而string类型的索引则没有分词。
   * 
   * @see <a href="http://docs.aliyun.com/?spm=5176.2020520121.103.8.VQIcGd&tag=tun#/pub/opensearch/api-reference/query-clause&query-clause">Query Clause</a>
   * 
   */
  public String getQuery() {
    return this.query;
  }

  /**
   * 设定指定索引字段范围的搜索关键词(query)
   * 
   * 此query是查询必需的一部分，可以指定不同的索引名，并同时可指定多个查询及之间的关系
   * （AND, OR, ANDNOT, RANK）。
   * 
   * 例如查询subject索引字段的query:“手机”，可以设置为 query=subject:'手机'。
   * 
   * 上边例子如果查询price 在1000-2000之间的手机，其查询语句为： query=subject:'手机'
   * AND price:[1000,2000]
   * 
   * NOTE: text类型索引在建立时做了分词，而string类型的索引则没有分词。
   * 
   * @see <a href="http://docs.aliyun.com/?spm=5176.2020520121.103.8.VQIcGd&tag=tun#/pub/opensearch/api-reference/query-clause&query-clause">Query Clause</a>
   * 
   */
  public SearchParams setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  /**
   * 过滤规则(filter)
   */
  public String getFilter() {
    return this.filter;
  }

  /**
   * 过滤规则(filter)
   */
  public SearchParams setFilter(String filter) {
    this.filter = filter;
    return this;
  }

  public void unsetFilter() {
    this.filter = null;
  }

  /** Returns true if field filter is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter() {
    return this.filter != null;
  }

  public void setFilterIsSet(boolean value) {
    if (!value) {
      this.filter = null;
    }
  }

  /**
   * 排序字段及排序方式(sort)
   */
  public Sort getSort() {
    return this.sort;
  }

  /**
   * 排序字段及排序方式(sort)
   */
  public SearchParams setSort(Sort sort) {
    this.sort = sort;
    return this;
  }

  public void unsetSort() {
    this.sort = null;
  }

  /** Returns true if field sort is set (has been assigned a value) and false otherwise */
  public boolean isSetSort() {
    return this.sort != null;
  }

  public void setSortIsSet(boolean value) {
    if (!value) {
      this.sort = null;
    }
  }

  public Rank getRank() {
    return this.rank;
  }

  public SearchParams setRank(Rank rank) {
    this.rank = rank;
    return this;
  }

  public void unsetRank() {
    this.rank = null;
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return this.rank != null;
  }

  public void setRankIsSet(boolean value) {
    if (!value) {
      this.rank = null;
    }
  }

  public int getAggregatesSize() {
    return (this.aggregates == null) ? 0 : this.aggregates.size();
  }

  public java.util.Iterator<Aggregate> getAggregatesIterator() {
    return (this.aggregates == null) ? null : this.aggregates.iterator();
  }

  public void addToAggregates(Aggregate elem) {
    if (this.aggregates == null) {
      this.aggregates = new HashSet<Aggregate>();
    }
    this.aggregates.add(elem);
  }

  /**
   * 添加统计信息(aggregate)相关参数
   */
  public Set<Aggregate> getAggregates() {
    return this.aggregates;
  }

  /**
   * 添加统计信息(aggregate)相关参数
   */
  public SearchParams setAggregates(Set<Aggregate> aggregates) {
    this.aggregates = aggregates;
    return this;
  }

  public void unsetAggregates() {
    this.aggregates = null;
  }

  /** Returns true if field aggregates is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregates() {
    return this.aggregates != null;
  }

  public void setAggregatesIsSet(boolean value) {
    if (!value) {
      this.aggregates = null;
    }
  }

  public int getDistinctsSize() {
    return (this.distincts == null) ? 0 : this.distincts.size();
  }

  public java.util.Iterator<Distinct> getDistinctsIterator() {
    return (this.distincts == null) ? null : this.distincts.iterator();
  }

  public void addToDistincts(Distinct elem) {
    if (this.distincts == null) {
      this.distincts = new HashSet<Distinct>();
    }
    this.distincts.add(elem);
  }

  /**
   * 聚合打散条件
   */
  public Set<Distinct> getDistincts() {
    return this.distincts;
  }

  /**
   * 聚合打散条件
   */
  public SearchParams setDistincts(Set<Distinct> distincts) {
    this.distincts = distincts;
    return this;
  }

  public void unsetDistincts() {
    this.distincts = null;
  }

  /** Returns true if field distincts is set (has been assigned a value) and false otherwise */
  public boolean isSetDistincts() {
    return this.distincts != null;
  }

  public void setDistinctsIsSet(boolean value) {
    if (!value) {
      this.distincts = null;
    }
  }

  public int getSummariesSize() {
    return (this.summaries == null) ? 0 : this.summaries.size();
  }

  public java.util.Iterator<Summary> getSummariesIterator() {
    return (this.summaries == null) ? null : this.summaries.iterator();
  }

  public void addToSummaries(Summary elem) {
    if (this.summaries == null) {
      this.summaries = new HashSet<Summary>();
    }
    this.summaries.add(elem);
  }

  /**
   * 动态摘要(summary)信息
   */
  public Set<Summary> getSummaries() {
    return this.summaries;
  }

  /**
   * 动态摘要(summary)信息
   */
  public SearchParams setSummaries(Set<Summary> summaries) {
    this.summaries = summaries;
    return this;
  }

  public void unsetSummaries() {
    this.summaries = null;
  }

  /** Returns true if field summaries is set (has been assigned a value) and false otherwise */
  public boolean isSetSummaries() {
    return this.summaries != null;
  }

  public void setSummariesIsSet(boolean value) {
    if (!value) {
      this.summaries = null;
    }
  }

  public int getQueryProcessorNamesSize() {
    return (this.queryProcessorNames == null) ? 0 : this.queryProcessorNames.size();
  }

  public java.util.Iterator<String> getQueryProcessorNamesIterator() {
    return (this.queryProcessorNames == null) ? null : this.queryProcessorNames.iterator();
  }

  public void addToQueryProcessorNames(String elem) {
    if (this.queryProcessorNames == null) {
      this.queryProcessorNames = new ArrayList<String>();
    }
    this.queryProcessorNames.add(elem);
  }

  /**
   * 设置查询分析规则(qp)
   */
  public List<String> getQueryProcessorNames() {
    return this.queryProcessorNames;
  }

  /**
   * 设置查询分析规则(qp)
   */
  public SearchParams setQueryProcessorNames(List<String> queryProcessorNames) {
    this.queryProcessorNames = queryProcessorNames;
    return this;
  }

  public void unsetQueryProcessorNames() {
    this.queryProcessorNames = null;
  }

  /** Returns true if field queryProcessorNames is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryProcessorNames() {
    return this.queryProcessorNames != null;
  }

  public void setQueryProcessorNamesIsSet(boolean value) {
    if (!value) {
      this.queryProcessorNames = null;
    }
  }

  public DeepPaging getDeepPaging() {
    return this.deepPaging;
  }

  public SearchParams setDeepPaging(DeepPaging deepPaging) {
    this.deepPaging = deepPaging;
    return this;
  }

  public void unsetDeepPaging() {
    this.deepPaging = null;
  }

  /** Returns true if field deepPaging is set (has been assigned a value) and false otherwise */
  public boolean isSetDeepPaging() {
    return this.deepPaging != null;
  }

  public void setDeepPagingIsSet(boolean value) {
    if (!value) {
      this.deepPaging = null;
    }
  }

  public int getDisableFunctionsSize() {
    return (this.disableFunctions == null) ? 0 : this.disableFunctions.size();
  }

  public void putToDisableFunctions(String key, String val) {
    if (this.disableFunctions == null) {
      this.disableFunctions = new HashMap<String,String>();
    }
    this.disableFunctions.put(key, val);
  }

  /**
   * 关闭某些功能模块(disable)
   * 
   * 有如下场景需要考虑：
   * 1、如果要关闭整个qp的功能，则指定disableValue="qp"。
   * 2、要指定某个索引关闭某个功能，则可以指定disableValue="qp:function_name:index_names",
   *   其中index_names可以用“|”分隔，可以为index_name1|index_name2...
   * 3、如果要关闭多个function可以用“,”分隔，例如：disableValue="qp:function_name1:index_name1,qp:function_name2:index_name1"
   * 
   * qp有如下模块：
   * 1、spell_check: 检查用户查询串中的拼写错误，并给出纠错建议。
   * 2、term_weighting: 分析查询中每个词的重要程度，并将其量化成权重，权重较低的词可能不会参与召回。
   * 3、stop_word: 根据系统内置的停用词典过滤查询中无意义的词
   * 4、synonym: 根据系统提供的通用同义词库和语义模型，对查询串进行同义词扩展，以便扩大召回。
   * 
   * example:
   * "qp" 标示关闭整个qp
   * "qp:spell_check" 标示关闭qp的拼音纠错功能。
   * "qp:stop_word:index_name1|index_name2" 标示关闭qp中index_name1和index_name2上的停用词功能。
   * 
   * key 需要禁用的函数名称
   * value 待禁用函数的详细说明
   */
  public Map<String,String> getDisableFunctions() {
    return this.disableFunctions;
  }

  /**
   * 关闭某些功能模块(disable)
   * 
   * 有如下场景需要考虑：
   * 1、如果要关闭整个qp的功能，则指定disableValue="qp"。
   * 2、要指定某个索引关闭某个功能，则可以指定disableValue="qp:function_name:index_names",
   *   其中index_names可以用“|”分隔，可以为index_name1|index_name2...
   * 3、如果要关闭多个function可以用“,”分隔，例如：disableValue="qp:function_name1:index_name1,qp:function_name2:index_name1"
   * 
   * qp有如下模块：
   * 1、spell_check: 检查用户查询串中的拼写错误，并给出纠错建议。
   * 2、term_weighting: 分析查询中每个词的重要程度，并将其量化成权重，权重较低的词可能不会参与召回。
   * 3、stop_word: 根据系统内置的停用词典过滤查询中无意义的词
   * 4、synonym: 根据系统提供的通用同义词库和语义模型，对查询串进行同义词扩展，以便扩大召回。
   * 
   * example:
   * "qp" 标示关闭整个qp
   * "qp:spell_check" 标示关闭qp的拼音纠错功能。
   * "qp:stop_word:index_name1|index_name2" 标示关闭qp中index_name1和index_name2上的停用词功能。
   * 
   * key 需要禁用的函数名称
   * value 待禁用函数的详细说明
   */
  public SearchParams setDisableFunctions(Map<String,String> disableFunctions) {
    this.disableFunctions = disableFunctions;
    return this;
  }

  public void unsetDisableFunctions() {
    this.disableFunctions = null;
  }

  /** Returns true if field disableFunctions is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableFunctions() {
    return this.disableFunctions != null;
  }

  public void setDisableFunctionsIsSet(boolean value) {
    if (!value) {
      this.disableFunctions = null;
    }
  }

  public int getCustomParamSize() {
    return (this.customParam == null) ? 0 : this.customParam.size();
  }

  public void putToCustomParam(String key, String val) {
    if (this.customParam == null) {
      this.customParam = new HashMap<String,String>();
    }
    this.customParam.put(key, val);
  }

  public Map<String,String> getCustomParam() {
    return this.customParam;
  }

  public SearchParams setCustomParam(Map<String,String> customParam) {
    this.customParam = customParam;
    return this;
  }

  public void unsetCustomParam() {
    this.customParam = null;
  }

  /** Returns true if field customParam is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomParam() {
    return this.customParam != null;
  }

  public void setCustomParamIsSet(boolean value) {
    if (!value) {
      this.customParam = null;
    }
  }

  /**
   * 下拉提示是搜索服务的基础功能，在用户输入查询词的过程中，智能推荐候选query，减少用户输入，帮助用户尽快找到想要的内容。
   * OpenSearch下拉提示在实现了中文前缀，拼音全拼，拼音首字母简拼查询等通用功能的基础上，实现了基于用户文档内容的query智能识别。
   * 用户通过控制台的简单配置，就能拥有专属的定制下拉提示。此外，控制台上还提供了黑名单，推荐词条功能，让用户进一步控制下拉提示
   * 的结果，实现更灵活的定制。
   * 
   */
  public Suggest getSuggest() {
    return this.suggest;
  }

  /**
   * 下拉提示是搜索服务的基础功能，在用户输入查询词的过程中，智能推荐候选query，减少用户输入，帮助用户尽快找到想要的内容。
   * OpenSearch下拉提示在实现了中文前缀，拼音全拼，拼音首字母简拼查询等通用功能的基础上，实现了基于用户文档内容的query智能识别。
   * 用户通过控制台的简单配置，就能拥有专属的定制下拉提示。此外，控制台上还提供了黑名单，推荐词条功能，让用户进一步控制下拉提示
   * 的结果，实现更灵活的定制。
   * 
   */
  public SearchParams setSuggest(Suggest suggest) {
    this.suggest = suggest;
    return this;
  }

  public void unsetSuggest() {
    this.suggest = null;
  }

  /** Returns true if field suggest is set (has been assigned a value) and false otherwise */
  public boolean isSetSuggest() {
    return this.suggest != null;
  }

  public void setSuggestIsSet(boolean value) {
    if (!value) {
      this.suggest = null;
    }
  }

  /**
   * Abtest
   */
  public Abtest getAbtest() {
    return this.abtest;
  }

  /**
   * Abtest
   */
  public SearchParams setAbtest(Abtest abtest) {
    this.abtest = abtest;
    return this;
  }

  public void unsetAbtest() {
    this.abtest = null;
  }

  /** Returns true if field abtest is set (has been assigned a value) and false otherwise */
  public boolean isSetAbtest() {
    return this.abtest != null;
  }

  public void setAbtestIsSet(boolean value) {
    if (!value) {
      this.abtest = null;
    }
  }

  /**
   * 终端用户的id，用来统计uv信息
   */
  public String getUserId() {
    return this.userId;
  }

  /**
   * 终端用户的id，用来统计uv信息
   */
  public SearchParams setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  /**
   * 终端用户输入的query
   */
  public String getRawQuery() {
    return this.rawQuery;
  }

  /**
   * 终端用户输入的query
   */
  public SearchParams setRawQuery(String rawQuery) {
    this.rawQuery = rawQuery;
    return this;
  }

  public void unsetRawQuery() {
    this.rawQuery = null;
  }

  /** Returns true if field rawQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetRawQuery() {
    return this.rawQuery != null;
  }

  public void setRawQueryIsSet(boolean value) {
    if (!value) {
      this.rawQuery = null;
    }
  }

  /**
   * 精排聚合打散条件
   */
  public FinalDistinct getFinalDistinct() {
    return this.finalDistinct;
  }

  /**
   * 精排聚合打散条件
   */
  public SearchParams setFinalDistinct(FinalDistinct finalDistinct) {
    this.finalDistinct = finalDistinct;
    return this;
  }

  public void unsetFinalDistinct() {
    this.finalDistinct = null;
  }

  /** Returns true if field finalDistinct is set (has been assigned a value) and false otherwise */
  public boolean isSetFinalDistinct() {
    return this.finalDistinct != null;
  }

  public void setFinalDistinctIsSet(boolean value) {
    if (!value) {
      this.finalDistinct = null;
    }
  }

  public int getCustomClauseSize() {
    return (this.customClause == null) ? 0 : this.customClause.size();
  }

  public void putToCustomClause(String key, String val) {
    if (this.customClause == null) {
      this.customClause = new HashMap<String,String>();
    }
    this.customClause.put(key, val);
  }

  /**
   * 自定义查询子句
   */
  public Map<String,String> getCustomClause() {
    return this.customClause;
  }

  /**
   * 自定义查询子句
   */
  public SearchParams setCustomClause(Map<String,String> customClause) {
    this.customClause = customClause;
    return this;
  }

  public void unsetCustomClause() {
    this.customClause = null;
  }

  /** Returns true if field customClause is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomClause() {
    return this.customClause != null;
  }

  public void setCustomClauseIsSet(boolean value) {
    if (!value) {
      this.customClause = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONFIG:
      if (value == null) {
        unsetConfig();
      } else {
        setConfig((Config)value);
      }
      break;

    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case FILTER:
      if (value == null) {
        unsetFilter();
      } else {
        setFilter((String)value);
      }
      break;

    case SORT:
      if (value == null) {
        unsetSort();
      } else {
        setSort((Sort)value);
      }
      break;

    case RANK:
      if (value == null) {
        unsetRank();
      } else {
        setRank((Rank)value);
      }
      break;

    case AGGREGATES:
      if (value == null) {
        unsetAggregates();
      } else {
        setAggregates((Set<Aggregate>)value);
      }
      break;

    case DISTINCTS:
      if (value == null) {
        unsetDistincts();
      } else {
        setDistincts((Set<Distinct>)value);
      }
      break;

    case SUMMARIES:
      if (value == null) {
        unsetSummaries();
      } else {
        setSummaries((Set<Summary>)value);
      }
      break;

    case QUERY_PROCESSOR_NAMES:
      if (value == null) {
        unsetQueryProcessorNames();
      } else {
        setQueryProcessorNames((List<String>)value);
      }
      break;

    case DEEP_PAGING:
      if (value == null) {
        unsetDeepPaging();
      } else {
        setDeepPaging((DeepPaging)value);
      }
      break;

    case DISABLE_FUNCTIONS:
      if (value == null) {
        unsetDisableFunctions();
      } else {
        setDisableFunctions((Map<String,String>)value);
      }
      break;

    case CUSTOM_PARAM:
      if (value == null) {
        unsetCustomParam();
      } else {
        setCustomParam((Map<String,String>)value);
      }
      break;

    case SUGGEST:
      if (value == null) {
        unsetSuggest();
      } else {
        setSuggest((Suggest)value);
      }
      break;

    case ABTEST:
      if (value == null) {
        unsetAbtest();
      } else {
        setAbtest((Abtest)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case RAW_QUERY:
      if (value == null) {
        unsetRawQuery();
      } else {
        setRawQuery((String)value);
      }
      break;

    case FINAL_DISTINCT:
      if (value == null) {
        unsetFinalDistinct();
      } else {
        setFinalDistinct((FinalDistinct)value);
      }
      break;

    case CUSTOM_CLAUSE:
      if (value == null) {
        unsetCustomClause();
      } else {
        setCustomClause((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONFIG:
      return getConfig();

    case QUERY:
      return getQuery();

    case FILTER:
      return getFilter();

    case SORT:
      return getSort();

    case RANK:
      return getRank();

    case AGGREGATES:
      return getAggregates();

    case DISTINCTS:
      return getDistincts();

    case SUMMARIES:
      return getSummaries();

    case QUERY_PROCESSOR_NAMES:
      return getQueryProcessorNames();

    case DEEP_PAGING:
      return getDeepPaging();

    case DISABLE_FUNCTIONS:
      return getDisableFunctions();

    case CUSTOM_PARAM:
      return getCustomParam();

    case SUGGEST:
      return getSuggest();

    case ABTEST:
      return getAbtest();

    case USER_ID:
      return getUserId();

    case RAW_QUERY:
      return getRawQuery();

    case FINAL_DISTINCT:
      return getFinalDistinct();

    case CUSTOM_CLAUSE:
      return getCustomClause();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONFIG:
      return isSetConfig();
    case QUERY:
      return isSetQuery();
    case FILTER:
      return isSetFilter();
    case SORT:
      return isSetSort();
    case RANK:
      return isSetRank();
    case AGGREGATES:
      return isSetAggregates();
    case DISTINCTS:
      return isSetDistincts();
    case SUMMARIES:
      return isSetSummaries();
    case QUERY_PROCESSOR_NAMES:
      return isSetQueryProcessorNames();
    case DEEP_PAGING:
      return isSetDeepPaging();
    case DISABLE_FUNCTIONS:
      return isSetDisableFunctions();
    case CUSTOM_PARAM:
      return isSetCustomParam();
    case SUGGEST:
      return isSetSuggest();
    case ABTEST:
      return isSetAbtest();
    case USER_ID:
      return isSetUserId();
    case RAW_QUERY:
      return isSetRawQuery();
    case FINAL_DISTINCT:
      return isSetFinalDistinct();
    case CUSTOM_CLAUSE:
      return isSetCustomClause();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchParams)
      return this.equals((SearchParams)that);
    return false;
  }

  public boolean equals(SearchParams that) {
    if (that == null)
      return false;

    boolean this_present_config = true && this.isSetConfig();
    boolean that_present_config = true && that.isSetConfig();
    if (this_present_config || that_present_config) {
      if (!(this_present_config && that_present_config))
        return false;
      if (!this.config.equals(that.config))
        return false;
    }

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_filter = true && this.isSetFilter();
    boolean that_present_filter = true && that.isSetFilter();
    if (this_present_filter || that_present_filter) {
      if (!(this_present_filter && that_present_filter))
        return false;
      if (!this.filter.equals(that.filter))
        return false;
    }

    boolean this_present_sort = true && this.isSetSort();
    boolean that_present_sort = true && that.isSetSort();
    if (this_present_sort || that_present_sort) {
      if (!(this_present_sort && that_present_sort))
        return false;
      if (!this.sort.equals(that.sort))
        return false;
    }

    boolean this_present_rank = true && this.isSetRank();
    boolean that_present_rank = true && that.isSetRank();
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (!this.rank.equals(that.rank))
        return false;
    }

    boolean this_present_aggregates = true && this.isSetAggregates();
    boolean that_present_aggregates = true && that.isSetAggregates();
    if (this_present_aggregates || that_present_aggregates) {
      if (!(this_present_aggregates && that_present_aggregates))
        return false;
      if (!this.aggregates.equals(that.aggregates))
        return false;
    }

    boolean this_present_distincts = true && this.isSetDistincts();
    boolean that_present_distincts = true && that.isSetDistincts();
    if (this_present_distincts || that_present_distincts) {
      if (!(this_present_distincts && that_present_distincts))
        return false;
      if (!this.distincts.equals(that.distincts))
        return false;
    }

    boolean this_present_summaries = true && this.isSetSummaries();
    boolean that_present_summaries = true && that.isSetSummaries();
    if (this_present_summaries || that_present_summaries) {
      if (!(this_present_summaries && that_present_summaries))
        return false;
      if (!this.summaries.equals(that.summaries))
        return false;
    }

    boolean this_present_queryProcessorNames = true && this.isSetQueryProcessorNames();
    boolean that_present_queryProcessorNames = true && that.isSetQueryProcessorNames();
    if (this_present_queryProcessorNames || that_present_queryProcessorNames) {
      if (!(this_present_queryProcessorNames && that_present_queryProcessorNames))
        return false;
      if (!this.queryProcessorNames.equals(that.queryProcessorNames))
        return false;
    }

    boolean this_present_deepPaging = true && this.isSetDeepPaging();
    boolean that_present_deepPaging = true && that.isSetDeepPaging();
    if (this_present_deepPaging || that_present_deepPaging) {
      if (!(this_present_deepPaging && that_present_deepPaging))
        return false;
      if (!this.deepPaging.equals(that.deepPaging))
        return false;
    }

    boolean this_present_disableFunctions = true && this.isSetDisableFunctions();
    boolean that_present_disableFunctions = true && that.isSetDisableFunctions();
    if (this_present_disableFunctions || that_present_disableFunctions) {
      if (!(this_present_disableFunctions && that_present_disableFunctions))
        return false;
      if (!this.disableFunctions.equals(that.disableFunctions))
        return false;
    }

    boolean this_present_customParam = true && this.isSetCustomParam();
    boolean that_present_customParam = true && that.isSetCustomParam();
    if (this_present_customParam || that_present_customParam) {
      if (!(this_present_customParam && that_present_customParam))
        return false;
      if (!this.customParam.equals(that.customParam))
        return false;
    }

    boolean this_present_suggest = true && this.isSetSuggest();
    boolean that_present_suggest = true && that.isSetSuggest();
    if (this_present_suggest || that_present_suggest) {
      if (!(this_present_suggest && that_present_suggest))
        return false;
      if (!this.suggest.equals(that.suggest))
        return false;
    }

    boolean this_present_abtest = true && this.isSetAbtest();
    boolean that_present_abtest = true && that.isSetAbtest();
    if (this_present_abtest || that_present_abtest) {
      if (!(this_present_abtest && that_present_abtest))
        return false;
      if (!this.abtest.equals(that.abtest))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_rawQuery = true && this.isSetRawQuery();
    boolean that_present_rawQuery = true && that.isSetRawQuery();
    if (this_present_rawQuery || that_present_rawQuery) {
      if (!(this_present_rawQuery && that_present_rawQuery))
        return false;
      if (!this.rawQuery.equals(that.rawQuery))
        return false;
    }

    boolean this_present_finalDistinct = true && this.isSetFinalDistinct();
    boolean that_present_finalDistinct = true && that.isSetFinalDistinct();
    if (this_present_finalDistinct || that_present_finalDistinct) {
      if (!(this_present_finalDistinct && that_present_finalDistinct))
        return false;
      if (!this.finalDistinct.equals(that.finalDistinct))
        return false;
    }

    boolean this_present_customClause = true && this.isSetCustomClause();
    boolean that_present_customClause = true && that.isSetCustomClause();
    if (this_present_customClause || that_present_customClause) {
      if (!(this_present_customClause && that_present_customClause))
        return false;
      if (!this.customClause.equals(that.customClause))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_config = true && (isSetConfig());
    list.add(present_config);
    if (present_config)
      list.add(config);

    boolean present_query = true && (isSetQuery());
    list.add(present_query);
    if (present_query)
      list.add(query);

    boolean present_filter = true && (isSetFilter());
    list.add(present_filter);
    if (present_filter)
      list.add(filter);

    boolean present_sort = true && (isSetSort());
    list.add(present_sort);
    if (present_sort)
      list.add(sort);

    boolean present_rank = true && (isSetRank());
    list.add(present_rank);
    if (present_rank)
      list.add(rank);

    boolean present_aggregates = true && (isSetAggregates());
    list.add(present_aggregates);
    if (present_aggregates)
      list.add(aggregates);

    boolean present_distincts = true && (isSetDistincts());
    list.add(present_distincts);
    if (present_distincts)
      list.add(distincts);

    boolean present_summaries = true && (isSetSummaries());
    list.add(present_summaries);
    if (present_summaries)
      list.add(summaries);

    boolean present_queryProcessorNames = true && (isSetQueryProcessorNames());
    list.add(present_queryProcessorNames);
    if (present_queryProcessorNames)
      list.add(queryProcessorNames);

    boolean present_deepPaging = true && (isSetDeepPaging());
    list.add(present_deepPaging);
    if (present_deepPaging)
      list.add(deepPaging);

    boolean present_disableFunctions = true && (isSetDisableFunctions());
    list.add(present_disableFunctions);
    if (present_disableFunctions)
      list.add(disableFunctions);

    boolean present_customParam = true && (isSetCustomParam());
    list.add(present_customParam);
    if (present_customParam)
      list.add(customParam);

    boolean present_suggest = true && (isSetSuggest());
    list.add(present_suggest);
    if (present_suggest)
      list.add(suggest);

    boolean present_abtest = true && (isSetAbtest());
    list.add(present_abtest);
    if (present_abtest)
      list.add(abtest);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_rawQuery = true && (isSetRawQuery());
    list.add(present_rawQuery);
    if (present_rawQuery)
      list.add(rawQuery);

    boolean present_finalDistinct = true && (isSetFinalDistinct());
    list.add(present_finalDistinct);
    if (present_finalDistinct)
      list.add(finalDistinct);

    boolean present_customClause = true && (isSetCustomClause());
    list.add(present_customClause);
    if (present_customClause)
      list.add(customClause);

    return list.hashCode();
  }

  @Override
  public int compareTo(SearchParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter()).compareTo(other.isSetFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort()).compareTo(other.isSetSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort, other.sort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRank()).compareTo(other.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, other.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregates()).compareTo(other.isSetAggregates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregates, other.aggregates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistincts()).compareTo(other.isSetDistincts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistincts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distincts, other.distincts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummaries()).compareTo(other.isSetSummaries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummaries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summaries, other.summaries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryProcessorNames()).compareTo(other.isSetQueryProcessorNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryProcessorNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryProcessorNames, other.queryProcessorNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeepPaging()).compareTo(other.isSetDeepPaging());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeepPaging()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deepPaging, other.deepPaging);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisableFunctions()).compareTo(other.isSetDisableFunctions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableFunctions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disableFunctions, other.disableFunctions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomParam()).compareTo(other.isSetCustomParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customParam, other.customParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuggest()).compareTo(other.isSetSuggest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuggest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suggest, other.suggest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbtest()).compareTo(other.isSetAbtest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbtest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abtest, other.abtest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRawQuery()).compareTo(other.isSetRawQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawQuery, other.rawQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinalDistinct()).compareTo(other.isSetFinalDistinct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinalDistinct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finalDistinct, other.finalDistinct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomClause()).compareTo(other.isSetCustomClause());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomClause()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customClause, other.customClause);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchParams(");
    boolean first = true;

    sb.append("config:");
    if (this.config == null) {
      sb.append("null");
    } else {
      sb.append(this.config);
    }
    first = false;
    if (isSetQuery()) {
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetFilter()) {
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
    }
    if (isSetSort()) {
      if (!first) sb.append(", ");
      sb.append("sort:");
      if (this.sort == null) {
        sb.append("null");
      } else {
        sb.append(this.sort);
      }
      first = false;
    }
    if (isSetRank()) {
      if (!first) sb.append(", ");
      sb.append("rank:");
      if (this.rank == null) {
        sb.append("null");
      } else {
        sb.append(this.rank);
      }
      first = false;
    }
    if (isSetAggregates()) {
      if (!first) sb.append(", ");
      sb.append("aggregates:");
      if (this.aggregates == null) {
        sb.append("null");
      } else {
        sb.append(this.aggregates);
      }
      first = false;
    }
    if (isSetDistincts()) {
      if (!first) sb.append(", ");
      sb.append("distincts:");
      if (this.distincts == null) {
        sb.append("null");
      } else {
        sb.append(this.distincts);
      }
      first = false;
    }
    if (isSetSummaries()) {
      if (!first) sb.append(", ");
      sb.append("summaries:");
      if (this.summaries == null) {
        sb.append("null");
      } else {
        sb.append(this.summaries);
      }
      first = false;
    }
    if (isSetQueryProcessorNames()) {
      if (!first) sb.append(", ");
      sb.append("queryProcessorNames:");
      if (this.queryProcessorNames == null) {
        sb.append("null");
      } else {
        sb.append(this.queryProcessorNames);
      }
      first = false;
    }
    if (isSetDeepPaging()) {
      if (!first) sb.append(", ");
      sb.append("deepPaging:");
      if (this.deepPaging == null) {
        sb.append("null");
      } else {
        sb.append(this.deepPaging);
      }
      first = false;
    }
    if (isSetDisableFunctions()) {
      if (!first) sb.append(", ");
      sb.append("disableFunctions:");
      if (this.disableFunctions == null) {
        sb.append("null");
      } else {
        sb.append(this.disableFunctions);
      }
      first = false;
    }
    if (isSetCustomParam()) {
      if (!first) sb.append(", ");
      sb.append("customParam:");
      if (this.customParam == null) {
        sb.append("null");
      } else {
        sb.append(this.customParam);
      }
      first = false;
    }
    if (isSetSuggest()) {
      if (!first) sb.append(", ");
      sb.append("suggest:");
      if (this.suggest == null) {
        sb.append("null");
      } else {
        sb.append(this.suggest);
      }
      first = false;
    }
    if (isSetAbtest()) {
      if (!first) sb.append(", ");
      sb.append("abtest:");
      if (this.abtest == null) {
        sb.append("null");
      } else {
        sb.append(this.abtest);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetRawQuery()) {
      if (!first) sb.append(", ");
      sb.append("rawQuery:");
      if (this.rawQuery == null) {
        sb.append("null");
      } else {
        sb.append(this.rawQuery);
      }
      first = false;
    }
    if (isSetFinalDistinct()) {
      if (!first) sb.append(", ");
      sb.append("finalDistinct:");
      if (this.finalDistinct == null) {
        sb.append("null");
      } else {
        sb.append(this.finalDistinct);
      }
      first = false;
    }
    if (isSetCustomClause()) {
      if (!first) sb.append(", ");
      sb.append("customClause:");
      if (this.customClause == null) {
        sb.append("null");
      } else {
        sb.append(this.customClause);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (config == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'config' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (config != null) {
      config.validate();
    }
    if (sort != null) {
      sort.validate();
    }
    if (rank != null) {
      rank.validate();
    }
    if (deepPaging != null) {
      deepPaging.validate();
    }
    if (suggest != null) {
      suggest.validate();
    }
    if (abtest != null) {
      abtest.validate();
    }
    if (finalDistinct != null) {
      finalDistinct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchParamsStandardSchemeFactory implements SchemeFactory {
    public SearchParamsStandardScheme getScheme() {
      return new SearchParamsStandardScheme();
    }
  }

  private static class SearchParamsStandardScheme extends StandardScheme<SearchParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 3: // CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.config = new Config();
              struct.config.read(iprot);
              struct.setConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filter = iprot.readString();
              struct.setFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort = new Sort();
              struct.sort.read(iprot);
              struct.setSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rank = new Rank();
              struct.rank.read(iprot);
              struct.setRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AGGREGATES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set70 = iprot.readSetBegin();
                struct.aggregates = new HashSet<Aggregate>(2*_set70.size);
                Aggregate _elem71;
                for (int _i72 = 0; _i72 < _set70.size; ++_i72)
                {
                  _elem71 = new Aggregate();
                  _elem71.read(iprot);
                  struct.aggregates.add(_elem71);
                }
                iprot.readSetEnd();
              }
              struct.setAggregatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DISTINCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set73 = iprot.readSetBegin();
                struct.distincts = new HashSet<Distinct>(2*_set73.size);
                Distinct _elem74;
                for (int _i75 = 0; _i75 < _set73.size; ++_i75)
                {
                  _elem74 = new Distinct();
                  _elem74.read(iprot);
                  struct.distincts.add(_elem74);
                }
                iprot.readSetEnd();
              }
              struct.setDistinctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SUMMARIES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set76 = iprot.readSetBegin();
                struct.summaries = new HashSet<Summary>(2*_set76.size);
                Summary _elem77;
                for (int _i78 = 0; _i78 < _set76.size; ++_i78)
                {
                  _elem77 = new Summary();
                  _elem77.read(iprot);
                  struct.summaries.add(_elem77);
                }
                iprot.readSetEnd();
              }
              struct.setSummariesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // QUERY_PROCESSOR_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list79 = iprot.readListBegin();
                struct.queryProcessorNames = new ArrayList<String>(_list79.size);
                String _elem80;
                for (int _i81 = 0; _i81 < _list79.size; ++_i81)
                {
                  _elem80 = iprot.readString();
                  struct.queryProcessorNames.add(_elem80);
                }
                iprot.readListEnd();
              }
              struct.setQueryProcessorNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DEEP_PAGING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deepPaging = new DeepPaging();
              struct.deepPaging.read(iprot);
              struct.setDeepPagingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DISABLE_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
                struct.disableFunctions = new HashMap<String,String>(2*_map82.size);
                String _key83;
                String _val84;
                for (int _i85 = 0; _i85 < _map82.size; ++_i85)
                {
                  _key83 = iprot.readString();
                  _val84 = iprot.readString();
                  struct.disableFunctions.put(_key83, _val84);
                }
                iprot.readMapEnd();
              }
              struct.setDisableFunctionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CUSTOM_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map86 = iprot.readMapBegin();
                struct.customParam = new HashMap<String,String>(2*_map86.size);
                String _key87;
                String _val88;
                for (int _i89 = 0; _i89 < _map86.size; ++_i89)
                {
                  _key87 = iprot.readString();
                  _val88 = iprot.readString();
                  struct.customParam.put(_key87, _val88);
                }
                iprot.readMapEnd();
              }
              struct.setCustomParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SUGGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.suggest = new Suggest();
              struct.suggest.read(iprot);
              struct.setSuggestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ABTEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.abtest = new Abtest();
              struct.abtest.read(iprot);
              struct.setAbtestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // RAW_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rawQuery = iprot.readString();
              struct.setRawQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // FINAL_DISTINCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.finalDistinct = new FinalDistinct();
              struct.finalDistinct.read(iprot);
              struct.setFinalDistinctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CUSTOM_CLAUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map90 = iprot.readMapBegin();
                struct.customClause = new HashMap<String,String>(2*_map90.size);
                String _key91;
                String _val92;
                for (int _i93 = 0; _i93 < _map90.size; ++_i93)
                {
                  _key91 = iprot.readString();
                  _val92 = iprot.readString();
                  struct.customClause.put(_key91, _val92);
                }
                iprot.readMapEnd();
              }
              struct.setCustomClauseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.config != null) {
        oprot.writeFieldBegin(CONFIG_FIELD_DESC);
        struct.config.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.filter != null) {
        if (struct.isSetFilter()) {
          oprot.writeFieldBegin(FILTER_FIELD_DESC);
          oprot.writeString(struct.filter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort != null) {
        if (struct.isSetSort()) {
          oprot.writeFieldBegin(SORT_FIELD_DESC);
          struct.sort.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rank != null) {
        if (struct.isSetRank()) {
          oprot.writeFieldBegin(RANK_FIELD_DESC);
          struct.rank.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.aggregates != null) {
        if (struct.isSetAggregates()) {
          oprot.writeFieldBegin(AGGREGATES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.aggregates.size()));
            for (Aggregate _iter94 : struct.aggregates)
            {
              _iter94.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.distincts != null) {
        if (struct.isSetDistincts()) {
          oprot.writeFieldBegin(DISTINCTS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.distincts.size()));
            for (Distinct _iter95 : struct.distincts)
            {
              _iter95.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.summaries != null) {
        if (struct.isSetSummaries()) {
          oprot.writeFieldBegin(SUMMARIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.summaries.size()));
            for (Summary _iter96 : struct.summaries)
            {
              _iter96.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.queryProcessorNames != null) {
        if (struct.isSetQueryProcessorNames()) {
          oprot.writeFieldBegin(QUERY_PROCESSOR_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.queryProcessorNames.size()));
            for (String _iter97 : struct.queryProcessorNames)
            {
              oprot.writeString(_iter97);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.deepPaging != null) {
        if (struct.isSetDeepPaging()) {
          oprot.writeFieldBegin(DEEP_PAGING_FIELD_DESC);
          struct.deepPaging.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.disableFunctions != null) {
        if (struct.isSetDisableFunctions()) {
          oprot.writeFieldBegin(DISABLE_FUNCTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.disableFunctions.size()));
            for (Map.Entry<String, String> _iter98 : struct.disableFunctions.entrySet())
            {
              oprot.writeString(_iter98.getKey());
              oprot.writeString(_iter98.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.customParam != null) {
        if (struct.isSetCustomParam()) {
          oprot.writeFieldBegin(CUSTOM_PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.customParam.size()));
            for (Map.Entry<String, String> _iter99 : struct.customParam.entrySet())
            {
              oprot.writeString(_iter99.getKey());
              oprot.writeString(_iter99.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.suggest != null) {
        if (struct.isSetSuggest()) {
          oprot.writeFieldBegin(SUGGEST_FIELD_DESC);
          struct.suggest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.abtest != null) {
        if (struct.isSetAbtest()) {
          oprot.writeFieldBegin(ABTEST_FIELD_DESC);
          struct.abtest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rawQuery != null) {
        if (struct.isSetRawQuery()) {
          oprot.writeFieldBegin(RAW_QUERY_FIELD_DESC);
          oprot.writeString(struct.rawQuery);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finalDistinct != null) {
        if (struct.isSetFinalDistinct()) {
          oprot.writeFieldBegin(FINAL_DISTINCT_FIELD_DESC);
          struct.finalDistinct.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.customClause != null) {
        if (struct.isSetCustomClause()) {
          oprot.writeFieldBegin(CUSTOM_CLAUSE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.customClause.size()));
            for (Map.Entry<String, String> _iter100 : struct.customClause.entrySet())
            {
              oprot.writeString(_iter100.getKey());
              oprot.writeString(_iter100.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchParamsTupleSchemeFactory implements SchemeFactory {
    public SearchParamsTupleScheme getScheme() {
      return new SearchParamsTupleScheme();
    }
  }

  private static class SearchParamsTupleScheme extends TupleScheme<SearchParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.config.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetQuery()) {
        optionals.set(0);
      }
      if (struct.isSetFilter()) {
        optionals.set(1);
      }
      if (struct.isSetSort()) {
        optionals.set(2);
      }
      if (struct.isSetRank()) {
        optionals.set(3);
      }
      if (struct.isSetAggregates()) {
        optionals.set(4);
      }
      if (struct.isSetDistincts()) {
        optionals.set(5);
      }
      if (struct.isSetSummaries()) {
        optionals.set(6);
      }
      if (struct.isSetQueryProcessorNames()) {
        optionals.set(7);
      }
      if (struct.isSetDeepPaging()) {
        optionals.set(8);
      }
      if (struct.isSetDisableFunctions()) {
        optionals.set(9);
      }
      if (struct.isSetCustomParam()) {
        optionals.set(10);
      }
      if (struct.isSetSuggest()) {
        optionals.set(11);
      }
      if (struct.isSetAbtest()) {
        optionals.set(12);
      }
      if (struct.isSetUserId()) {
        optionals.set(13);
      }
      if (struct.isSetRawQuery()) {
        optionals.set(14);
      }
      if (struct.isSetFinalDistinct()) {
        optionals.set(15);
      }
      if (struct.isSetCustomClause()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetQuery()) {
        oprot.writeString(struct.query);
      }
      if (struct.isSetFilter()) {
        oprot.writeString(struct.filter);
      }
      if (struct.isSetSort()) {
        struct.sort.write(oprot);
      }
      if (struct.isSetRank()) {
        struct.rank.write(oprot);
      }
      if (struct.isSetAggregates()) {
        {
          oprot.writeI32(struct.aggregates.size());
          for (Aggregate _iter101 : struct.aggregates)
          {
            _iter101.write(oprot);
          }
        }
      }
      if (struct.isSetDistincts()) {
        {
          oprot.writeI32(struct.distincts.size());
          for (Distinct _iter102 : struct.distincts)
          {
            _iter102.write(oprot);
          }
        }
      }
      if (struct.isSetSummaries()) {
        {
          oprot.writeI32(struct.summaries.size());
          for (Summary _iter103 : struct.summaries)
          {
            _iter103.write(oprot);
          }
        }
      }
      if (struct.isSetQueryProcessorNames()) {
        {
          oprot.writeI32(struct.queryProcessorNames.size());
          for (String _iter104 : struct.queryProcessorNames)
          {
            oprot.writeString(_iter104);
          }
        }
      }
      if (struct.isSetDeepPaging()) {
        struct.deepPaging.write(oprot);
      }
      if (struct.isSetDisableFunctions()) {
        {
          oprot.writeI32(struct.disableFunctions.size());
          for (Map.Entry<String, String> _iter105 : struct.disableFunctions.entrySet())
          {
            oprot.writeString(_iter105.getKey());
            oprot.writeString(_iter105.getValue());
          }
        }
      }
      if (struct.isSetCustomParam()) {
        {
          oprot.writeI32(struct.customParam.size());
          for (Map.Entry<String, String> _iter106 : struct.customParam.entrySet())
          {
            oprot.writeString(_iter106.getKey());
            oprot.writeString(_iter106.getValue());
          }
        }
      }
      if (struct.isSetSuggest()) {
        struct.suggest.write(oprot);
      }
      if (struct.isSetAbtest()) {
        struct.abtest.write(oprot);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetRawQuery()) {
        oprot.writeString(struct.rawQuery);
      }
      if (struct.isSetFinalDistinct()) {
        struct.finalDistinct.write(oprot);
      }
      if (struct.isSetCustomClause()) {
        {
          oprot.writeI32(struct.customClause.size());
          for (Map.Entry<String, String> _iter107 : struct.customClause.entrySet())
          {
            oprot.writeString(_iter107.getKey());
            oprot.writeString(_iter107.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.config = new Config();
      struct.config.read(iprot);
      struct.setConfigIsSet(true);
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.filter = iprot.readString();
        struct.setFilterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sort = new Sort();
        struct.sort.read(iprot);
        struct.setSortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rank = new Rank();
        struct.rank.read(iprot);
        struct.setRankIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set108 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.aggregates = new HashSet<Aggregate>(2*_set108.size);
          Aggregate _elem109;
          for (int _i110 = 0; _i110 < _set108.size; ++_i110)
          {
            _elem109 = new Aggregate();
            _elem109.read(iprot);
            struct.aggregates.add(_elem109);
          }
        }
        struct.setAggregatesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set111 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.distincts = new HashSet<Distinct>(2*_set111.size);
          Distinct _elem112;
          for (int _i113 = 0; _i113 < _set111.size; ++_i113)
          {
            _elem112 = new Distinct();
            _elem112.read(iprot);
            struct.distincts.add(_elem112);
          }
        }
        struct.setDistinctsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set114 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.summaries = new HashSet<Summary>(2*_set114.size);
          Summary _elem115;
          for (int _i116 = 0; _i116 < _set114.size; ++_i116)
          {
            _elem115 = new Summary();
            _elem115.read(iprot);
            struct.summaries.add(_elem115);
          }
        }
        struct.setSummariesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.queryProcessorNames = new ArrayList<String>(_list117.size);
          String _elem118;
          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
          {
            _elem118 = iprot.readString();
            struct.queryProcessorNames.add(_elem118);
          }
        }
        struct.setQueryProcessorNamesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.deepPaging = new DeepPaging();
        struct.deepPaging.read(iprot);
        struct.setDeepPagingIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.disableFunctions = new HashMap<String,String>(2*_map120.size);
          String _key121;
          String _val122;
          for (int _i123 = 0; _i123 < _map120.size; ++_i123)
          {
            _key121 = iprot.readString();
            _val122 = iprot.readString();
            struct.disableFunctions.put(_key121, _val122);
          }
        }
        struct.setDisableFunctionsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map124 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.customParam = new HashMap<String,String>(2*_map124.size);
          String _key125;
          String _val126;
          for (int _i127 = 0; _i127 < _map124.size; ++_i127)
          {
            _key125 = iprot.readString();
            _val126 = iprot.readString();
            struct.customParam.put(_key125, _val126);
          }
        }
        struct.setCustomParamIsSet(true);
      }
      if (incoming.get(11)) {
        struct.suggest = new Suggest();
        struct.suggest.read(iprot);
        struct.setSuggestIsSet(true);
      }
      if (incoming.get(12)) {
        struct.abtest = new Abtest();
        struct.abtest.read(iprot);
        struct.setAbtestIsSet(true);
      }
      if (incoming.get(13)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rawQuery = iprot.readString();
        struct.setRawQueryIsSet(true);
      }
      if (incoming.get(15)) {
        struct.finalDistinct = new FinalDistinct();
        struct.finalDistinct.read(iprot);
        struct.setFinalDistinctIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TMap _map128 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.customClause = new HashMap<String,String>(2*_map128.size);
          String _key129;
          String _val130;
          for (int _i131 = 0; _i131 < _map128.size; ++_i131)
          {
            _key129 = iprot.readString();
            _val130 = iprot.readString();
            struct.customClause.put(_key129, _val130);
          }
        }
        struct.setCustomClauseIsSet(true);
      }
    }
  }

}

