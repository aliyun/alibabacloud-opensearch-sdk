/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class Abtest implements org.apache.thrift.TBase<Abtest, Abtest._Fields>, java.io.Serializable, Cloneable, Comparable<Abtest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Abtest");

  private static final org.apache.thrift.protocol.TField SCENE_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sceneTag", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FLOW_DIVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("flowDivider", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AbtestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AbtestTupleSchemeFactory());
  }

  private String sceneTag; // required
  private String flowDivider; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCENE_TAG((short)1, "sceneTag"),
    FLOW_DIVIDER((short)2, "flowDivider");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCENE_TAG
          return SCENE_TAG;
        case 2: // FLOW_DIVIDER
          return FLOW_DIVIDER;
        default:
          return null;
      }
    }

    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCENE_TAG, new org.apache.thrift.meta_data.FieldMetaData("sceneTag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_DIVIDER, new org.apache.thrift.meta_data.FieldMetaData("flowDivider", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Abtest.class, metaDataMap);
  }

  public Abtest() {
  }

  public Abtest(
    String sceneTag,
    String flowDivider)
  {
    this();
    this.sceneTag = sceneTag;
    this.flowDivider = flowDivider;
  }

  public Abtest(Abtest other) {
    if (other.isSetSceneTag()) {
      this.sceneTag = other.sceneTag;
    }
    if (other.isSetFlowDivider()) {
      this.flowDivider = other.flowDivider;
    }
  }

  public Abtest deepCopy() {
    return new Abtest(this);
  }

  @Override
  public void clear() {
    this.sceneTag = null;
    this.flowDivider = null;
  }

  public String getSceneTag() {
    return this.sceneTag;
  }

  public Abtest setSceneTag(String sceneTag) {
    this.sceneTag = sceneTag;
    return this;
  }

  public void unsetSceneTag() {
    this.sceneTag = null;
  }

  public boolean isSetSceneTag() {
    return this.sceneTag != null;
  }

  public void setSceneTagIsSet(boolean value) {
    if (!value) {
      this.sceneTag = null;
    }
  }

  public String getFlowDivider() {
    return this.flowDivider;
  }

  public Abtest setFlowDivider(String flowDivider) {
    this.flowDivider = flowDivider;
    return this;
  }

  public void unsetFlowDivider() {
    this.flowDivider = null;
  }

  public boolean isSetFlowDivider() {
    return this.flowDivider != null;
  }

  public void setFlowDividerIsSet(boolean value) {
    if (!value) {
      this.flowDivider = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCENE_TAG:
      if (value == null) {
        unsetSceneTag();
      } else {
        setSceneTag((String)value);
      }
      break;

    case FLOW_DIVIDER:
      if (value == null) {
        unsetFlowDivider();
      } else {
        setFlowDivider((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCENE_TAG:
      return getSceneTag();

    case FLOW_DIVIDER:
      return getFlowDivider();

    }
    throw new IllegalStateException();
  }

  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCENE_TAG:
      return isSetSceneTag();
    case FLOW_DIVIDER:
      return isSetFlowDivider();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Abtest)
      return this.equals((Abtest)that);
    return false;
  }

  public boolean equals(Abtest that) {
    if (that == null)
      return false;

    boolean this_present_sceneTag = true && this.isSetSceneTag();
    boolean that_present_sceneTag = true && that.isSetSceneTag();
    if (this_present_sceneTag || that_present_sceneTag) {
      if (!(this_present_sceneTag && that_present_sceneTag))
        return false;
      if (!this.sceneTag.equals(that.sceneTag))
        return false;
    }

    boolean this_present_flowDivider = true && this.isSetFlowDivider();
    boolean that_present_flowDivider = true && that.isSetFlowDivider();
    if (this_present_flowDivider || that_present_flowDivider) {
      if (!(this_present_flowDivider && that_present_flowDivider))
        return false;
      if (!this.flowDivider.equals(that.flowDivider))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sceneTag = true && (isSetSceneTag());
    list.add(present_sceneTag);
    if (present_sceneTag)
      list.add(sceneTag);

    boolean present_flowDivider = true && (isSetFlowDivider());
    list.add(present_flowDivider);
    if (present_flowDivider)
      list.add(flowDivider);

    return list.hashCode();
  }

  @Override
  public int compareTo(Abtest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSceneTag()).compareTo(other.isSetSceneTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSceneTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sceneTag, other.sceneTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowDivider()).compareTo(other.isSetFlowDivider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowDivider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowDivider, other.flowDivider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Abtest(");
    boolean first = true;

    sb.append("sceneTag:");
    if (this.sceneTag == null) {
      sb.append("null");
    } else {
      sb.append(this.sceneTag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowDivider:");
    if (this.flowDivider == null) {
      sb.append("null");
    } else {
      sb.append(this.flowDivider);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sceneTag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sceneTag' was not present! Struct: " + toString());
    }
    if (flowDivider == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'flowDivider' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AbtestStandardSchemeFactory implements SchemeFactory {
    public AbtestStandardScheme getScheme() {
      return new AbtestStandardScheme();
    }
  }

  private static class AbtestStandardScheme extends StandardScheme<Abtest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Abtest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCENE_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sceneTag = iprot.readString();
              struct.setSceneTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FLOW_DIVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowDivider = iprot.readString();
              struct.setFlowDividerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Abtest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sceneTag != null) {
        oprot.writeFieldBegin(SCENE_TAG_FIELD_DESC);
        oprot.writeString(struct.sceneTag);
        oprot.writeFieldEnd();
      }
      if (struct.flowDivider != null) {
        oprot.writeFieldBegin(FLOW_DIVIDER_FIELD_DESC);
        oprot.writeString(struct.flowDivider);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AbtestTupleSchemeFactory implements SchemeFactory {
    public AbtestTupleScheme getScheme() {
      return new AbtestTupleScheme();
    }
  }

  private static class AbtestTupleScheme extends TupleScheme<Abtest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Abtest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sceneTag);
      oprot.writeString(struct.flowDivider);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Abtest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sceneTag = iprot.readString();
      struct.setSceneTagIsSet(true);
      struct.flowDivider = iprot.readString();
      struct.setFlowDividerIsSet(true);
    }
  }

}

