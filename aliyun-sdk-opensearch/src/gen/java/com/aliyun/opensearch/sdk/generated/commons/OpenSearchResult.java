/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.commons;


import javax.annotation.Generated;

import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.protocol.*;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class OpenSearchResult implements org.apache.thrift.TBase<OpenSearchResult, OpenSearchResult._Fields>, java.io.Serializable, Cloneable, Comparable<OpenSearchResult> {
  private static final TStruct STRUCT_DESC = new TStruct("OpenSearchResult");

  private static final TField RESULT_FIELD_DESC = new TField("result", TType.STRING, (short)1);
  private static final TField TRACE_INFO_FIELD_DESC = new TField("traceInfo", TType.STRUCT, (short)3);
  private static final TField CHAT_FIELD_DESC = new TField("chat", TType.STRING, (short)5);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new OpenSearchResultStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new OpenSearchResultTupleSchemeFactory();

  private String result; // optional
  private TraceInfo traceInfo; // optional
  private String chat; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT((short)1, "result"),
    TRACE_INFO((short)3, "traceInfo"),
    CHAT((short)5, "chat");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
          return RESULT;
        case 3: // TRACE_INFO
          return TRACE_INFO;
        case 5: // CHAT
          return CHAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RESULT,_Fields.TRACE_INFO,_Fields.CHAT};
  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new FieldMetaData("result", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TRACE_INFO, new FieldMetaData("traceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.StructMetaData(TType.STRUCT, TraceInfo.class)));
    tmpMap.put(_Fields.CHAT, new FieldMetaData("chat", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(OpenSearchResult.class, metaDataMap);
  }

  public OpenSearchResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OpenSearchResult(OpenSearchResult other) {
    if (other.isSetResult()) {
      this.result = other.result;
    }
    if (other.isSetTraceInfo()) {
      this.traceInfo = new TraceInfo(other.traceInfo);
    }
    if (other.isSetChat()) {
      this.chat = other.chat;
    }
  }

  public OpenSearchResult deepCopy() {
    return new OpenSearchResult(this);
  }

  @Override
  public void clear() {
    this.result = null;
    this.traceInfo = null;
    this.chat = null;
  }

  public String getResult() {
    return this.result;
  }

  public OpenSearchResult setResult(String result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public TraceInfo getTraceInfo() {
    return this.traceInfo;
  }

  public OpenSearchResult setTraceInfo(TraceInfo traceInfo) {
    this.traceInfo = traceInfo;
    return this;
  }

  public void unsetTraceInfo() {
    this.traceInfo = null;
  }

  /** Returns true if field traceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceInfo() {
    return this.traceInfo != null;
  }

  public void setTraceInfoIsSet(boolean value) {
    if (!value) {
      this.traceInfo = null;
    }
  }

  public String getChat() {
    return this.chat;
  }

  public OpenSearchResult setChat(String chat) {
    this.chat = chat;
    return this;
  }

  public void unsetChat() {
    this.chat = null;
  }

  /** Returns true if field chat is set (has been assigned a value) and false otherwise */
  public boolean isSetChat() {
    return this.chat != null;
  }

  public void setChatIsSet(boolean value) {
    if (!value) {
      this.chat = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((String)value);
      }
      break;

    case TRACE_INFO:
      if (value == null) {
        unsetTraceInfo();
      } else {
        setTraceInfo((TraceInfo)value);
      }
      break;

    case CHAT:
      if (value == null) {
        unsetChat();
      } else {
        setChat((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();

    case TRACE_INFO:
      return getTraceInfo();

    case CHAT:
      return getChat();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case TRACE_INFO:
      return isSetTraceInfo();
    case CHAT:
      return isSetChat();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OpenSearchResult)
      return this.equals((OpenSearchResult)that);
    return false;
  }

  public boolean equals(OpenSearchResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_traceInfo = true && this.isSetTraceInfo();
    boolean that_present_traceInfo = true && that.isSetTraceInfo();
    if (this_present_traceInfo || that_present_traceInfo) {
      if (!(this_present_traceInfo && that_present_traceInfo))
        return false;
      if (!this.traceInfo.equals(that.traceInfo))
        return false;
    }

    boolean this_present_chat = true && this.isSetChat();
    boolean that_present_chat = true && that.isSetChat();
    if (this_present_chat || that_present_chat) {
      if (!(this_present_chat && that_present_chat))
        return false;
      if (!this.chat.equals(that.chat))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
    if (isSetResult())
      hashCode = hashCode * 8191 + result.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraceInfo()) ? 131071 : 524287);
    if (isSetTraceInfo())
      hashCode = hashCode * 8191 + traceInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetChat()) ? 131071 : 524287);
    if (isSetChat())
      hashCode = hashCode * 8191 + chat.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OpenSearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceInfo()).compareTo(other.isSetTraceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceInfo, other.traceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChat()).compareTo(other.isSetChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chat, other.chat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OpenSearchResult(");
    boolean first = true;

    if (isSetResult()) {
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
    }
    if (isSetTraceInfo()) {
      if (!first) sb.append(", ");
      sb.append("traceInfo:");
      if (this.traceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.traceInfo);
      }
      first = false;
    }
    if (isSetChat()) {
      if (!first) sb.append(", ");
      sb.append("chat:");
      if (this.chat == null) {
        sb.append("null");
      } else {
        sb.append(this.chat);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (traceInfo != null) {
      traceInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OpenSearchResultStandardSchemeFactory implements SchemeFactory {
    public OpenSearchResultStandardScheme getScheme() {
      return new OpenSearchResultStandardScheme();
    }
  }

  private static class OpenSearchResultStandardScheme extends StandardScheme<OpenSearchResult> {

    public void read(TProtocol iprot, OpenSearchResult struct) throws org.apache.thrift.TException {
      TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT
            if (schemeField.type == TType.STRING) {
              struct.result = iprot.readString();
              struct.setResultIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRACE_INFO
            if (schemeField.type == TType.STRUCT) {
              struct.traceInfo = new TraceInfo();
              struct.traceInfo.read(iprot);
              struct.setTraceInfoIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHAT
            if (schemeField.type == TType.STRING) {
              struct.chat = iprot.readString();
              struct.setChatIsSet(true);
            } else {
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(TProtocol oprot, OpenSearchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.result != null) {
        if (struct.isSetResult()) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeString(struct.result);
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceInfo != null) {
        if (struct.isSetTraceInfo()) {
          oprot.writeFieldBegin(TRACE_INFO_FIELD_DESC);
          struct.traceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chat != null) {
        if (struct.isSetChat()) {
          oprot.writeFieldBegin(CHAT_FIELD_DESC);
          oprot.writeString(struct.chat);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OpenSearchResultTupleSchemeFactory implements SchemeFactory {
    public OpenSearchResultTupleScheme getScheme() {
      return new OpenSearchResultTupleScheme();
    }
  }

  private static class OpenSearchResultTupleScheme extends TupleScheme<OpenSearchResult> {

    @Override
    public void write(TProtocol prot, OpenSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResult()) {
        optionals.set(0);
      }
      if (struct.isSetTraceInfo()) {
        optionals.set(1);
      }
      if (struct.isSetChat()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResult()) {
        oprot.writeString(struct.result);
      }
      if (struct.isSetTraceInfo()) {
        struct.traceInfo.write(oprot);
      }
      if (struct.isSetChat()) {
        oprot.writeString(struct.chat);
      }
    }

    @Override
    public void read(TProtocol prot, OpenSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.result = iprot.readString();
        struct.setResultIsSet(true);
      }
      if (incoming.get(1)) {
        struct.traceInfo = new TraceInfo();
        struct.traceInfo.read(iprot);
        struct.setTraceInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chat = iprot.readString();
        struct.setChatIsSet(true);
      }
    }
  }

  private static <S extends IScheme> S scheme(TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}