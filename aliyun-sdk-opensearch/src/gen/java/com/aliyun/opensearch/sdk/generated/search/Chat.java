/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2024-12-17")
public class Chat implements org.apache.thrift.TBase<Chat, Chat._Fields>, java.io.Serializable, Cloneable, Comparable<Chat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chat");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROMPT_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("promptParameters", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChatTupleSchemeFactory();

  private String name; // required
  private java.util.Map<String, String> promptParameters; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    PROMPT_PARAMETERS((short)2, "promptParameters");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // PROMPT_PARAMETERS
          return PROMPT_PARAMETERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROMPT_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("promptParameters", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chat.class, metaDataMap);
  }

  public Chat() {
  }

  public Chat(
    String name,
    java.util.Map<String, String> promptParameters)
  {
    this();
    this.name = name;
    this.promptParameters = promptParameters;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Chat(Chat other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPromptParameters()) {
      java.util.Map<String, String> __this__promptParameters = new java.util.HashMap<String, String>(other.promptParameters);
      this.promptParameters = __this__promptParameters;
    }
  }

  public Chat deepCopy() {
    return new Chat(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.promptParameters = null;
  }

  public String getName() {
    return this.name;
  }

  public Chat setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getPromptParametersSize() {
    return (this.promptParameters == null) ? 0 : this.promptParameters.size();
  }

  public void putToPromptParameters(String key, String val) {
    if (this.promptParameters == null) {
      this.promptParameters = new java.util.HashMap<String, String>();
    }
    this.promptParameters.put(key, val);
  }

  public java.util.Map<String, String> getPromptParameters() {
    return this.promptParameters;
  }

  public Chat setPromptParameters(java.util.Map<String, String> promptParameters) {
    this.promptParameters = promptParameters;
    return this;
  }

  public void unsetPromptParameters() {
    this.promptParameters = null;
  }

  /** Returns true if field promptParameters is set (has been assigned a value) and false otherwise */
  public boolean isSetPromptParameters() {
    return this.promptParameters != null;
  }

  public void setPromptParametersIsSet(boolean value) {
    if (!value) {
      this.promptParameters = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PROMPT_PARAMETERS:
      if (value == null) {
        unsetPromptParameters();
      } else {
        setPromptParameters((java.util.Map<String, String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case PROMPT_PARAMETERS:
      return getPromptParameters();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case PROMPT_PARAMETERS:
      return isSetPromptParameters();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Chat)
      return this.equals((Chat)that);
    return false;
  }

  public boolean equals(Chat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_promptParameters = true && this.isSetPromptParameters();
    boolean that_present_promptParameters = true && that.isSetPromptParameters();
    if (this_present_promptParameters || that_present_promptParameters) {
      if (!(this_present_promptParameters && that_present_promptParameters))
        return false;
      if (!this.promptParameters.equals(that.promptParameters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPromptParameters()) ? 131071 : 524287);
    if (isSetPromptParameters())
      hashCode = hashCode * 8191 + promptParameters.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Chat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPromptParameters()).compareTo(other.isSetPromptParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPromptParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promptParameters, other.promptParameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Chat(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("promptParameters:");
    if (this.promptParameters == null) {
      sb.append("null");
    } else {
      sb.append(this.promptParameters);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (promptParameters == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'promptParameters' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatStandardScheme getScheme() {
      return new ChatStandardScheme();
    }
  }

  private static class ChatStandardScheme extends org.apache.thrift.scheme.StandardScheme<Chat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Chat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROMPT_PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                struct.promptParameters = new java.util.HashMap<String, String>(2*_map68.size);
                String _key69;
                String _val70;
                for (int _i71 = 0; _i71 < _map68.size; ++_i71)
                {
                  _key69 = iprot.readString();
                  _val70 = iprot.readString();
                  struct.promptParameters.put(_key69, _val70);
                }
                iprot.readMapEnd();
              }
              struct.setPromptParametersIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Chat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.promptParameters != null) {
        oprot.writeFieldBegin(PROMPT_PARAMETERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.promptParameters.size()));
          for (java.util.Map.Entry<String, String> _iter72 : struct.promptParameters.entrySet())
          {
            oprot.writeString(_iter72.getKey());
            oprot.writeString(_iter72.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChatTupleScheme getScheme() {
      return new ChatTupleScheme();
    }
  }

  private static class ChatTupleScheme extends org.apache.thrift.scheme.TupleScheme<Chat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Chat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      {
        oprot.writeI32(struct.promptParameters.size());
        for (java.util.Map.Entry<String, String> _iter73 : struct.promptParameters.entrySet())
        {
          oprot.writeString(_iter73.getKey());
          oprot.writeString(_iter73.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Chat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map74 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.promptParameters = new java.util.HashMap<String, String>(2*_map74.size);
        String _key75;
        String _val76;
        for (int _i77 = 0; _i77 < _map74.size; ++_i77)
        {
          _key75 = iprot.readString();
          _val76 = iprot.readString();
          struct.promptParameters.put(_key75, _val76);
        }
      }
      struct.setPromptParametersIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

