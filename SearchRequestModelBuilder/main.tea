import Util;
import OpenSearchUtil;

type @query = SearchQuery
type @scroll = string
type @scrollId = string
type @searchType = string
type @firtRankName = string
type @secondRankName = string
type @secondRankType = string
type @fetchFields = [string]
type @summary = [Summary]
type @qp = [string]
type @disable = [string]
type @routeValue = string
type @abtest = ABTest
type @userId = string
type @rawQuery = string

init() {
  @query = new SearchQuery;
}

/**
 * 查询参数query的配置config子句
 */
model QueryConfig {
  start?: integer(name='start', minimum=0, maximum=5000, default=0, description='从搜索结果中第start个文档开始返回'),
  hit?: integer(name='hit', minimum=0, maximum=500, default=10, description='返回文档的最大数量'),
  format?: string(name='format', default='json', description='返回的文档格式，有json、fulljson两种格式可选。fulljson：比json类型多输出一些节点，如variableValue、sortExprValues等'),
  rerankSize?: integer(name='rerank_size', minimum=0, maximum=2000, default=200, description='设置参与精排个数'),
}

/**
 * 生成查询参数query的配置config子句
 */
function buildQueryConfig(config: QueryConfig): string
{
  Util.validateModel(config);
  var start = 0;
  var hit = 10;
  var format = 'json';
  var rerankSize = 200;
  if (Util.isUnset(config.start)) {
    config.start = start;
  }
  if (Util.isUnset(config.hit)) {
    config.hit = hit;
  }
  if (Util.isUnset(config.format)) {
    config.format = format;
  }
  if (Util.isUnset(config.rerankSize)) {
    config.rerankSize = rerankSize;
  }
  return OpenSearchUtil.mapToString(Util.stringifyMapValue(Util.toMap(config)), ':');
}

/**
 * 生成查询参数query的排序sort子句
 */
function buildQuerySorts(sorts: [string]): string
{
  return OpenSearchUtil.join(sorts, ';');
}

/**
 * 查询参数query的打散distinct子句
 * @link https://help.aliyun.com/document_detail/29161.html
 */
model QueryDistinct {
  distKey: string(name='dist_key', description='要打散的字段'),
  distTimes?: integer(name='dist_times', description='抽取的轮数', default=1),
  distCount?: integer(name='dist_count', description='一轮抽取的文档数', default=1),
  reserved?: boolean(name='reserved', description='是否保留抽取之后剩余的文档。如果为false，为不保留，则搜索结果的total（总匹配结果数）会不准确。', default=true),
  updateTotalHit?: boolean(name='update_total_hit', description='当reserved为false时，设置update_total_hit为true，则最终total_hit会减去被distinct丢弃的的数目（不一定准确），为false则不减。', default=false),
  distFilter?: string(name='dist_filter', description='过滤条件，被过滤的doc不参与distinct，只在后面的排序中，这些被过滤的doc将和被distinct出来的第一组doc一起参与排序。默认是全部参与distinct。'),
  grade?: string(name='grade', description='指定档位划分阈值，所有的文档将根据档位划分阈值划分成若干档，每个档位中各自根据distinct参数做distinct，可以不指定该参数，默认是所有文档都在同一档。档位的划分按照文档排序时第一维的排序依据的分数进行划分，两个档位阈值之间用 “|” 分开，档位的个数没有限制。例如：1、grade:3.0 ：表示根据第一维排序依据的分数分成两档，(< 3.0)的是第一档，(>= 3.0) 的是第二档；2、grade:3.0|5.0 ：表示分成三档，(< 3.0)是第一档，(>= 3.0，< 5.0)是第二档，(>= 5.0)是第三档。档位的先后顺序和第一维排序依据的顺序一致，即如果第一维排序依据是降序，则档位也是降序，反之亦然。')
}

/**
 * 生成查询参数query的打散distinct子句
 */
function buildQueryDistincts(distincts: [QueryDistinct]): string
{
  var distinctStrings: [string] = [];
  for (var distinct : distincts) {
    Util.validateModel(distinct);
    OpenSearchUtil.append(distinctStrings, OpenSearchUtil.mapToString(Util.stringifyMapValue(Util.toMap(distinct)), ':'));
  }
  return OpenSearchUtil.join(distinctStrings, ';');
}

/**
 * 查询参数query的统计aggregate子句
 * @link https://help.aliyun.com/document_detail/29160.html
 */
model QueryAggregate {
  groupKey: string(name='group_key', description='field为要进行统计的字段名，必须配置属性字段'),
  aggFun: string(name='agg_fun', description='func可以为count()、sum(id)、max(id)、min(id)四种系统函数，含义分别为：文档个数、对id字段求和、取id字段最大值、取id字段最小值；支持同时进行多个函数的统计，中间用英文井号（#）分隔；sum、max、min的内容支持基本的算术运算；'),
  range?: string(name='range', description='表示分段统计，可用于分布统计，只支持单个range参数。表示number1~number2及大于number2的区间情况。不支持string类型的字段分布统计'),
  aggFilter?: string(name='agg_filter', description='表示仅统计满足特定条件的文档'),
  aggSamplerThreshold?: string(name='agg_sampler_threshold', description='抽样统计的阈值。表示该值之前的文档会依次统计，该值之后的文档会进行抽样统计；'),
  aggSamplerStep?: string(name='agg_sampler_step', description='抽样统计的步长。表示从agg_sampler_threshold后的文档将间隔agg_sampler_step个文档统计一次。对于sum和count类型的统计会把阈值后的抽样统计结果最后乘以步长进行估算，估算的结果再加上阈值前的统计结果就是最后的统计结果'),
  maxGroup?: integer(name='max_group', description='最大返回组数', default='1000', minimum=1)
}

/**
 * 生成查询参数query的统计aggregate子句
 */
function buildQueryAggregates(aggregates: [QueryAggregate]): string
{
  var aggregateStrings: [string] = [];
  for (var aggregate : aggregates) {
    Util.validateModel(aggregate);
    OpenSearchUtil.append(aggregateStrings, OpenSearchUtil.mapToString(Util.stringifyMapValue(Util.toMap(aggregate)), ':'));
  }
  return OpenSearchUtil.join(aggregateStrings, ';');
}

/**
 * 生成查询参数query的自定义kvpairs子句
 */
function buildQueryKvpairs (kvpairs: map[string]any): string
{
  return OpenSearchUtil.mapToString(Util.stringifyMapValue(kvpairs), ':');
}

/**
 * 查询参数query
 */
model SearchQuery {
  query: string(name='query', default='', description='详细规则请参考文档：https://help.aliyun.com/document_detail/29157.html'),
  config?: QueryConfig(name='config', description='查询参数query的配置config子句'),
  sort?: [string](name='sort', description='详细规则请参考文档：https://help.aliyun.com/document_detail/29159.html'),
  filter?: string(name='filter', description='详细规则请参考文档：https://help.aliyun.com/document_detail/29158.html'),
  distinct?: [QueryDistinct](name='distinct', description='查询参数query的打散distinct子句'),
  aggregate?: [QueryAggregate](name='aggregate', description='查询参数query的统计aggregate子句'),
  kvpairs?: map[string]any(name='kvpairs', description='详细规则请参考文档：https://help.aliyun.com/document_detail/29162.html'),
}

/**
 * 生成查询参数query
 */
function buildSearchQuery (searchQuery: SearchQuery): string
{
  Util.validateModel(searchQuery);
  var output: string = `query=${searchQuery.query}&&config=${buildQueryConfig(searchQuery.config)}`;

  if (Util.isUnset(searchQuery.sort)) {
    output = `${output}&&sort=${buildQuerySorts(searchQuery.sort)}`;
  }

  if (Util.isUnset(searchQuery.filter)) {
    output = `${output}&&filter=${searchQuery.filter}`;
  }

  if (Util.isUnset(searchQuery.distinct)) {
    output = `${output}&&distinct=${buildQueryDistincts(searchQuery.distinct)}`;
  }

  if (Util.isUnset(searchQuery.aggregate)) {
    output = `${output}&&aggregate=${buildQueryAggregates(searchQuery.aggregate)}`;
  }

  if (Util.isUnset(searchQuery.kvpairs)) {
    output = `${output}&&kvpairs=${buildQueryKvpairs(searchQuery.kvpairs)}`;
  }

  return output;
}

/**
 * 查询参数summary
 */
model Summary {
  summaryField: string(name='summary_field', description='摘要的字段'),
  summaryLen?: integer(name='summaryLen', description='摘要要展示的片段长度'),
  summaryEllipsis?: string(name='summary_ellipsis', default='…', description='摘要的结尾省略符'),
  summarySnippet?: integer(name='summary_snippet', default=1, description='选取的摘要片段个数'),
  summaryElement?: string(name='summary_element', default='em', description='飘红标签，html标签去掉左右尖括号'),
  summaryElementPrefix?: string(name='summary_element_prefix', description='飘红的前缀，必须是完整的html标签，如<em>'),
  summaryElementPostfix?: string(name='summary_element_postfix', description='飘红的后缀，必须是完整的html标签，如</em>')
}

/**
 * 生成查询参数fetchFields
 */
function buildFetchFields(fetchFields: [string]): string
{
  return OpenSearchUtil.join(fetchFields, ';');
}

/**
 * 生成查询参数summary
 */
function buildSummaries(summaries: [Summary]): string
{
  var summaryStrings: [string] = [];
  for (var summary : summaries) {
    Util.validateModel(summary);
    OpenSearchUtil.append(summaryStrings, OpenSearchUtil.mapToString(Util.stringifyMapValue(Util.toMap(summary)), ':'));
  }
  return OpenSearchUtil.join(summaryStrings, ';');
}

/**
 * 生成查询参数qp
 */
function buildQueryProcessors(queryProcessors: [string]): string
{
  return OpenSearchUtil.join(queryProcessors, ',');
}

/**
 * 生成查询参数disable
 */
function buildDisableFunctions(disableFunctions: [string]): string
{
  return OpenSearchUtil.join(disableFunctions, ';');
}

/**
 * 查询参数abtest
 */
model ABTest {
  sceneTag: string(name='scene_tag', description='场景标签'),
  flowDivider: string(name='flow_divider', description='流量分配标识')
}

/**
 * 生成查询参数abtest
 */
function buildABTest(abTest: ABTest): string
{
  return OpenSearchUtil.mapToString(Util.stringifyMapValue(Util.toMap(abTest)), ':');
}

/**
 * 设置查询参数query的查询query子句
 */
function withQuery(query: string): void
{
  var searchQuery = @query;
  searchQuery.query = query;
  @query = searchQuery;
}

/**
 * 设置查询参数query的配置config子句
 */
function withQueryConfig(queryConfig: QueryConfig): void
{
  var searchQuery = @query;
  searchQuery.config = queryConfig;
  @query = searchQuery;
}

/**
 * 设置查询参数query的排序sort子句
 */
function withQuerySorts(sorts: [string]): void
{
  var searchQuery = @query;
  searchQuery.sort = sorts;
  @query = searchQuery;
}

/**
 * 设置查询参数query的过滤filter子句
 */
function withQueryFilter(filter: string): void
{
  var searchQuery = @query;
  searchQuery.filter = filter;
  @query = searchQuery;
}

/**
 * 设置查询参数query的打散distinct子句
 */
function withQueryDistincts(distincts: [QueryDistinct]): void
{
  var searchQuery = @query;
  searchQuery.distinct = distincts;
  @query = searchQuery;
}

/**
 * 设置查询参数query的统计aggregate子句
 */
function withQueryAggregates(aggregates: [QueryAggregate]): void
{
  var searchQuery = @query;
  searchQuery.aggregate = aggregates;
  @query = searchQuery;
}

/**
 * 设置查询参数query的自定义kvpairs子句
 */
function withKvpairs(kvpairs: map[string]any): void
{
  var searchQuery = @query;
  searchQuery.kvpairs = kvpairs;
  @query = searchQuery;
}

/**
 * 设置查询参数scroll
 */
function withScroll(scroll: string): void
{
  @scroll = scroll;
}

/**
 * 设置查询参数scrollId
 */
function withScrollId(scrollId: string): void
{
  @scrollId = scrollId;
}

/**
 * 设置查询参数searchType
 * 参数值为'scan'
 * scrollId与searchType 二选一，优先取用 scrollId
 */
function withSearchType(): void
{
  @searchType = "scan";
}

/**
 * 设置查询参数firtRankName
 */
function withFirtRankName(firtRankName: string): void
{
  @firtRankName = firtRankName;
}

/**
 * 设置查询参数secondRankName
 */
function withSecondRankName(secondRankName: string): void
{
  @secondRankName = secondRankName;
}

/**
 * 设置查询参数secondRankType
 */
function withSecondRankType(secondRankType: string): void
{
  @secondRankType = secondRankType;
}

/**
 * 设置查询参数fetchFields
 */
function withFetchFields(fetchFields: [string]): void
{
  @fetchFields = fetchFields;
}

/**
 * 添加查询参数fetchFields
 */
function addFetchField(fetchField: string): void
{
  OpenSearchUtil.append(@fetchFields, fetchField);
}

/**
 * 设置查询参数summary
 */
function withSummaries(summaries: [Summary]): void
{
  @summary = summaries;
}

/**
 * 设置查询参数qp
 */
function withQueryProcessors(queryProcessors: [string]): void
{
  @qp = queryProcessors;
}

/**
 * 添加查询参数qp
 */
function addQueryProcessor(queryProcessor: string): void
{
  OpenSearchUtil.append(@qp, queryProcessor);
}

/**
 * 设置查询参数disable
 */
function withDisableFunctions(functions: [string]): void
{
  @disable = functions;
}

/**
 * 添加查询参数disable
 */
function addDisableFunction(disableFunction: string): void
{
  OpenSearchUtil.append(@disable, disableFunction);
}

/**
 * 设置查询参数routeValue
 */
function withRouteValue(routeValue: string): void
{
  @routeValue = routeValue;
}

/**
 * 设置查询参数abtest
 */
function withABTest(abtest: ABTest): void
{
  @abtest = abtest;
}

/**
 * 设置查询参数userId
 */
function withUserId(userId: string): void
{
  @userId = userId;
}

/**
 * 设置查询参数rawQuery
 */
function withRawQuery(rawQuery: string): void
{
  @rawQuery = rawQuery;
}

/**
 * 生成查询参数
 */
function build(): map[string]string
{
  var output: map[string]string = {};
  output.query = buildSearchQuery(@query);

  if (Util.isUnset(@scroll)) {
    output.scroll = @scroll;
  }

  if (Util.isUnset(@scrollId)) {
    output.scroll_id = @scrollId;
    @searchType = null;
  }

  if (Util.isUnset(@searchType)) {
    output.search_type = @searchType;
  }

  if (Util.isUnset(@firtRankName)) {
    output.first_rank_name = @firtRankName;
  }

  if (Util.isUnset(@secondRankName)) {
    output.second_rank_name = @secondRankName;
  }

  if (Util.isUnset(@secondRankType)) {
    output.second_rank_type = @secondRankType;
  }

  if (Util.isUnset(@fetchFields)) {
    output.fetch_fields = buildFetchFields(@fetchFields);
  }

  if (Util.isUnset(@summary)) {
    output.summary = buildSummaries(@summary);
  }

  if (Util.isUnset(@qp)) {
    output.qp = buildQueryProcessors(@qp);
  }

  if (Util.isUnset(@disable)) {
    output.qp = buildDisableFunctions(@disable);
  }

  if (Util.isUnset(@routeValue)) {
    output.route_value = @routeValue;
  }

  if (Util.isUnset(@abtest)) {
    output.abtest = buildABTest(@abtest);
  }

  if (Util.isUnset(@userId)) {
    output.user_id = @userId;
  }

  if (Util.isUnset(@rawQuery)) {
    output.raw_query = @rawQuery;
  }

  return output;
}