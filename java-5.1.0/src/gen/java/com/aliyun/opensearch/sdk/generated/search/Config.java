/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class Config implements org.apache.thrift.TBase<Config, Config._Fields>, java.io.Serializable, Cloneable, Comparable<Config> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Config");

  private static final org.apache.thrift.protocol.TField APP_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("appNames", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("hits", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SEARCH_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchFormat", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CUSTOM_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("customConfig", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField KVPAIRS_FIELD_DESC = new org.apache.thrift.protocol.TField("kvpairs", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FETCH_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchFields", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField ROUTE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("routeValue", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ConfigTupleSchemeFactory());
  }

  private List<String> appNames; // required
  private int start; // optional
  private int hits; // optional
  private SearchFormat searchFormat; // optional
  private List<String> customConfig; // optional
  private String kvpairs; // optional
  private List<String> fetchFields; // optional
  private String routeValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * app name 或 app id 或 app version
     */
    APP_NAMES((short)1, "appNames"),
    START((short)2, "start"),
    HITS((short)3, "hits"),
    /**
     * 
     * @see SearchFormat
     */
    SEARCH_FORMAT((short)5, "searchFormat"),
    /**
     * example:  query=config=start:0,hit:15,rerank_size:200,format:json,KVpairs=name:company_name,price:new_price,query=id:'489013149';
     * 
     * config.setCustomConfig(Lists.newArrayList("mykey1:name#company_name,price#new_price"));
     * 
     * 
     */
    CUSTOM_CONFIG((short)7, "customConfig"),
    /**
     * example: cluster=daogou,kvpairs=name:company_name,query=笔筒;
     * 
     * config.setKvpairs("name:company_name,price:new_price");
     * 
     * 
     */
    KVPAIRS((short)9, "kvpairs"),
    /**
     * 获取搜索结果包含的字段列表(fetch_fields)
     * 
     */
    FETCH_FIELDS((short)11, "fetchFields"),
    /**
     * 分区查询.  routeValue为分区键所对应的值.
     * 
     */
    ROUTE_VALUE((short)13, "routeValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_NAMES
          return APP_NAMES;
        case 2: // START
          return START;
        case 3: // HITS
          return HITS;
        case 5: // SEARCH_FORMAT
          return SEARCH_FORMAT;
        case 7: // CUSTOM_CONFIG
          return CUSTOM_CONFIG;
        case 9: // KVPAIRS
          return KVPAIRS;
        case 11: // FETCH_FIELDS
          return FETCH_FIELDS;
        case 13: // ROUTE_VALUE
          return ROUTE_VALUE;
        default:
          return null;
      }
    }

    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_ISSET_ID = 0;
  private static final int __HITS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.START,_Fields.HITS,_Fields.SEARCH_FORMAT,_Fields.CUSTOM_CONFIG,_Fields.KVPAIRS,_Fields.FETCH_FIELDS,_Fields.ROUTE_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_NAMES, new org.apache.thrift.meta_data.FieldMetaData("appNames", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HITS, new org.apache.thrift.meta_data.FieldMetaData("hits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEARCH_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("searchFormat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SearchFormat.class)));
    tmpMap.put(_Fields.CUSTOM_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("customConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KVPAIRS, new org.apache.thrift.meta_data.FieldMetaData("kvpairs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FETCH_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fetchFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ROUTE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("routeValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Config.class, metaDataMap);
  }

  public Config() {
    this.start = 0;

    this.hits = 15;

    this.searchFormat = com.aliyun.opensearch.sdk.generated.search.SearchFormat.XML;

  }

  public Config(
    List<String> appNames)
  {
    this();
    this.appNames = appNames;
  }

  public Config(Config other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppNames()) {
      List<String> __this__appNames = new ArrayList<String>(other.appNames);
      this.appNames = __this__appNames;
    }
    this.start = other.start;
    this.hits = other.hits;
    if (other.isSetSearchFormat()) {
      this.searchFormat = other.searchFormat;
    }
    if (other.isSetCustomConfig()) {
      List<String> __this__customConfig = new ArrayList<String>(other.customConfig);
      this.customConfig = __this__customConfig;
    }
    if (other.isSetKvpairs()) {
      this.kvpairs = other.kvpairs;
    }
    if (other.isSetFetchFields()) {
      List<String> __this__fetchFields = new ArrayList<String>(other.fetchFields);
      this.fetchFields = __this__fetchFields;
    }
    if (other.isSetRouteValue()) {
      this.routeValue = other.routeValue;
    }
  }

  public Config deepCopy() {
    return new Config(this);
  }

  @Override
  public void clear() {
    this.appNames = null;
    this.start = 0;

    this.hits = 15;

    this.searchFormat = com.aliyun.opensearch.sdk.generated.search.SearchFormat.XML;

    this.customConfig = null;
    this.kvpairs = null;
    this.fetchFields = null;
    this.routeValue = null;
  }

  public int getAppNamesSize() {
    return (this.appNames == null) ? 0 : this.appNames.size();
  }

  public java.util.Iterator<String> getAppNamesIterator() {
    return (this.appNames == null) ? null : this.appNames.iterator();
  }

  public void addToAppNames(String elem) {
    if (this.appNames == null) {
      this.appNames = new ArrayList<String>();
    }
    this.appNames.add(elem);
  }

  public List<String> getAppNames() {
    return this.appNames;
  }

  public Config setAppNames(List<String> appNames) {
    this.appNames = appNames;
    return this;
  }

  public void unsetAppNames() {
    this.appNames = null;
  }

  public boolean isSetAppNames() {
    return this.appNames != null;
  }

  public void setAppNamesIsSet(boolean value) {
    if (!value) {
      this.appNames = null;
    }
  }

  public int getStart() {
    return this.start;
  }

  public Config setStart(int start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public int getHits() {
    return this.hits;
  }

  public Config setHits(int hits) {
    this.hits = hits;
    setHitsIsSet(true);
    return this;
  }

  public void unsetHits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HITS_ISSET_ID);
  }

  public boolean isSetHits() {
    return EncodingUtils.testBit(__isset_bitfield, __HITS_ISSET_ID);
  }

  public void setHitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HITS_ISSET_ID, value);
  }

  public SearchFormat getSearchFormat() {
    return this.searchFormat;
  }

  public Config setSearchFormat(SearchFormat searchFormat) {
    this.searchFormat = searchFormat;
    return this;
  }

  public void unsetSearchFormat() {
    this.searchFormat = null;
  }

  public boolean isSetSearchFormat() {
    return this.searchFormat != null;
  }

  public void setSearchFormatIsSet(boolean value) {
    if (!value) {
      this.searchFormat = null;
    }
  }

  public int getCustomConfigSize() {
    return (this.customConfig == null) ? 0 : this.customConfig.size();
  }

  public java.util.Iterator<String> getCustomConfigIterator() {
    return (this.customConfig == null) ? null : this.customConfig.iterator();
  }

  public void addToCustomConfig(String elem) {
    if (this.customConfig == null) {
      this.customConfig = new ArrayList<String>();
    }
    this.customConfig.add(elem);
  }


  public List<String> getCustomConfig() {
    return this.customConfig;
  }


  public Config setCustomConfig(List<String> customConfig) {
    this.customConfig = customConfig;
    return this;
  }

  public void unsetCustomConfig() {
    this.customConfig = null;
  }

  public boolean isSetCustomConfig() {
    return this.customConfig != null;
  }

  public void setCustomConfigIsSet(boolean value) {
    if (!value) {
      this.customConfig = null;
    }
  }

  public String getKvpairs() {
    return this.kvpairs;
  }

  public Config setKvpairs(String kvpairs) {
    this.kvpairs = kvpairs;
    return this;
  }

  public void unsetKvpairs() {
    this.kvpairs = null;
  }

  public boolean isSetKvpairs() {
    return this.kvpairs != null;
  }

  public void setKvpairsIsSet(boolean value) {
    if (!value) {
      this.kvpairs = null;
    }
  }

  public int getFetchFieldsSize() {
    return (this.fetchFields == null) ? 0 : this.fetchFields.size();
  }

  public java.util.Iterator<String> getFetchFieldsIterator() {
    return (this.fetchFields == null) ? null : this.fetchFields.iterator();
  }

  public void addToFetchFields(String elem) {
    if (this.fetchFields == null) {
      this.fetchFields = new ArrayList<String>();
    }
    this.fetchFields.add(elem);
  }

  public List<String> getFetchFields() {
    return this.fetchFields;
  }

  public Config setFetchFields(List<String> fetchFields) {
    this.fetchFields = fetchFields;
    return this;
  }

  public void unsetFetchFields() {
    this.fetchFields = null;
  }

  public boolean isSetFetchFields() {
    return this.fetchFields != null;
  }

  public void setFetchFieldsIsSet(boolean value) {
    if (!value) {
      this.fetchFields = null;
    }
  }

  public String getRouteValue() {
    return this.routeValue;
  }

  public Config setRouteValue(String routeValue) {
    this.routeValue = routeValue;
    return this;
  }

  public void unsetRouteValue() {
    this.routeValue = null;
  }

  public boolean isSetRouteValue() {
    return this.routeValue != null;
  }

  public void setRouteValueIsSet(boolean value) {
    if (!value) {
      this.routeValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_NAMES:
      if (value == null) {
        unsetAppNames();
      } else {
        setAppNames((List<String>)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Integer)value);
      }
      break;

    case HITS:
      if (value == null) {
        unsetHits();
      } else {
        setHits((Integer)value);
      }
      break;

    case SEARCH_FORMAT:
      if (value == null) {
        unsetSearchFormat();
      } else {
        setSearchFormat((SearchFormat)value);
      }
      break;

    case CUSTOM_CONFIG:
      if (value == null) {
        unsetCustomConfig();
      } else {
        setCustomConfig((List<String>)value);
      }
      break;

    case KVPAIRS:
      if (value == null) {
        unsetKvpairs();
      } else {
        setKvpairs((String)value);
      }
      break;

    case FETCH_FIELDS:
      if (value == null) {
        unsetFetchFields();
      } else {
        setFetchFields((List<String>)value);
      }
      break;

    case ROUTE_VALUE:
      if (value == null) {
        unsetRouteValue();
      } else {
        setRouteValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_NAMES:
      return getAppNames();

    case START:
      return getStart();

    case HITS:
      return getHits();

    case SEARCH_FORMAT:
      return getSearchFormat();

    case CUSTOM_CONFIG:
      return getCustomConfig();

    case KVPAIRS:
      return getKvpairs();

    case FETCH_FIELDS:
      return getFetchFields();

    case ROUTE_VALUE:
      return getRouteValue();

    }
    throw new IllegalStateException();
  }

  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_NAMES:
      return isSetAppNames();
    case START:
      return isSetStart();
    case HITS:
      return isSetHits();
    case SEARCH_FORMAT:
      return isSetSearchFormat();
    case CUSTOM_CONFIG:
      return isSetCustomConfig();
    case KVPAIRS:
      return isSetKvpairs();
    case FETCH_FIELDS:
      return isSetFetchFields();
    case ROUTE_VALUE:
      return isSetRouteValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Config)
      return this.equals((Config)that);
    return false;
  }

  public boolean equals(Config that) {
    if (that == null)
      return false;

    boolean this_present_appNames = true && this.isSetAppNames();
    boolean that_present_appNames = true && that.isSetAppNames();
    if (this_present_appNames || that_present_appNames) {
      if (!(this_present_appNames && that_present_appNames))
        return false;
      if (!this.appNames.equals(that.appNames))
        return false;
    }

    boolean this_present_start = true && this.isSetStart();
    boolean that_present_start = true && that.isSetStart();
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_hits = true && this.isSetHits();
    boolean that_present_hits = true && that.isSetHits();
    if (this_present_hits || that_present_hits) {
      if (!(this_present_hits && that_present_hits))
        return false;
      if (this.hits != that.hits)
        return false;
    }

    boolean this_present_searchFormat = true && this.isSetSearchFormat();
    boolean that_present_searchFormat = true && that.isSetSearchFormat();
    if (this_present_searchFormat || that_present_searchFormat) {
      if (!(this_present_searchFormat && that_present_searchFormat))
        return false;
      if (!this.searchFormat.equals(that.searchFormat))
        return false;
    }

    boolean this_present_customConfig = true && this.isSetCustomConfig();
    boolean that_present_customConfig = true && that.isSetCustomConfig();
    if (this_present_customConfig || that_present_customConfig) {
      if (!(this_present_customConfig && that_present_customConfig))
        return false;
      if (!this.customConfig.equals(that.customConfig))
        return false;
    }

    boolean this_present_kvpairs = true && this.isSetKvpairs();
    boolean that_present_kvpairs = true && that.isSetKvpairs();
    if (this_present_kvpairs || that_present_kvpairs) {
      if (!(this_present_kvpairs && that_present_kvpairs))
        return false;
      if (!this.kvpairs.equals(that.kvpairs))
        return false;
    }

    boolean this_present_fetchFields = true && this.isSetFetchFields();
    boolean that_present_fetchFields = true && that.isSetFetchFields();
    if (this_present_fetchFields || that_present_fetchFields) {
      if (!(this_present_fetchFields && that_present_fetchFields))
        return false;
      if (!this.fetchFields.equals(that.fetchFields))
        return false;
    }

    boolean this_present_routeValue = true && this.isSetRouteValue();
    boolean that_present_routeValue = true && that.isSetRouteValue();
    if (this_present_routeValue || that_present_routeValue) {
      if (!(this_present_routeValue && that_present_routeValue))
        return false;
      if (!this.routeValue.equals(that.routeValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_appNames = true && (isSetAppNames());
    list.add(present_appNames);
    if (present_appNames)
      list.add(appNames);

    boolean present_start = true && (isSetStart());
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_hits = true && (isSetHits());
    list.add(present_hits);
    if (present_hits)
      list.add(hits);

    boolean present_searchFormat = true && (isSetSearchFormat());
    list.add(present_searchFormat);
    if (present_searchFormat)
      list.add(searchFormat.getValue());

    boolean present_customConfig = true && (isSetCustomConfig());
    list.add(present_customConfig);
    if (present_customConfig)
      list.add(customConfig);

    boolean present_kvpairs = true && (isSetKvpairs());
    list.add(present_kvpairs);
    if (present_kvpairs)
      list.add(kvpairs);

    boolean present_fetchFields = true && (isSetFetchFields());
    list.add(present_fetchFields);
    if (present_fetchFields)
      list.add(fetchFields);

    boolean present_routeValue = true && (isSetRouteValue());
    list.add(present_routeValue);
    if (present_routeValue)
      list.add(routeValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(Config other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppNames()).compareTo(other.isSetAppNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appNames, other.appNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHits()).compareTo(other.isSetHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hits, other.hits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchFormat()).compareTo(other.isSetSearchFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchFormat, other.searchFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomConfig()).compareTo(other.isSetCustomConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customConfig, other.customConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKvpairs()).compareTo(other.isSetKvpairs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKvpairs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kvpairs, other.kvpairs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchFields()).compareTo(other.isSetFetchFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchFields, other.fetchFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRouteValue()).compareTo(other.isSetRouteValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRouteValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeValue, other.routeValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Config(");
    boolean first = true;

    sb.append("appNames:");
    if (this.appNames == null) {
      sb.append("null");
    } else {
      sb.append(this.appNames);
    }
    first = false;
    if (isSetStart()) {
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
    }
    if (isSetHits()) {
      if (!first) sb.append(", ");
      sb.append("hits:");
      sb.append(this.hits);
      first = false;
    }
    if (isSetSearchFormat()) {
      if (!first) sb.append(", ");
      sb.append("searchFormat:");
      if (this.searchFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.searchFormat);
      }
      first = false;
    }
    if (isSetCustomConfig()) {
      if (!first) sb.append(", ");
      sb.append("customConfig:");
      if (this.customConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.customConfig);
      }
      first = false;
    }
    if (isSetKvpairs()) {
      if (!first) sb.append(", ");
      sb.append("kvpairs:");
      if (this.kvpairs == null) {
        sb.append("null");
      } else {
        sb.append(this.kvpairs);
      }
      first = false;
    }
    if (isSetFetchFields()) {
      if (!first) sb.append(", ");
      sb.append("fetchFields:");
      if (this.fetchFields == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchFields);
      }
      first = false;
    }
    if (isSetRouteValue()) {
      if (!first) sb.append(", ");
      sb.append("routeValue:");
      if (this.routeValue == null) {
        sb.append("null");
      } else {
        sb.append(this.routeValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (appNames == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'appNames' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigStandardSchemeFactory implements SchemeFactory {
    public ConfigStandardScheme getScheme() {
      return new ConfigStandardScheme();
    }
  }

  private static class ConfigStandardScheme extends StandardScheme<Config> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Config struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.appNames = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.appNames.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAppNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start = iprot.readI32();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hits = iprot.readI32();
              struct.setHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEARCH_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.searchFormat = com.aliyun.opensearch.sdk.generated.search.SearchFormat.findByValue(iprot.readI32());
              struct.setSearchFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CUSTOM_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.customConfig = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.customConfig.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setCustomConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KVPAIRS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kvpairs = iprot.readString();
              struct.setKvpairsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FETCH_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.fetchFields = new ArrayList<String>(_list6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.fetchFields.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setFetchFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ROUTE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.routeValue = iprot.readString();
              struct.setRouteValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Config struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appNames != null) {
        oprot.writeFieldBegin(APP_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appNames.size()));
          for (String _iter9 : struct.appNames)
          {
            oprot.writeString(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetStart()) {
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHits()) {
        oprot.writeFieldBegin(HITS_FIELD_DESC);
        oprot.writeI32(struct.hits);
        oprot.writeFieldEnd();
      }
      if (struct.searchFormat != null) {
        if (struct.isSetSearchFormat()) {
          oprot.writeFieldBegin(SEARCH_FORMAT_FIELD_DESC);
          oprot.writeI32(struct.searchFormat.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.customConfig != null) {
        if (struct.isSetCustomConfig()) {
          oprot.writeFieldBegin(CUSTOM_CONFIG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.customConfig.size()));
            for (String _iter10 : struct.customConfig)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.kvpairs != null) {
        if (struct.isSetKvpairs()) {
          oprot.writeFieldBegin(KVPAIRS_FIELD_DESC);
          oprot.writeString(struct.kvpairs);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fetchFields != null) {
        if (struct.isSetFetchFields()) {
          oprot.writeFieldBegin(FETCH_FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fetchFields.size()));
            for (String _iter11 : struct.fetchFields)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.routeValue != null) {
        if (struct.isSetRouteValue()) {
          oprot.writeFieldBegin(ROUTE_VALUE_FIELD_DESC);
          oprot.writeString(struct.routeValue);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigTupleSchemeFactory implements SchemeFactory {
    public ConfigTupleScheme getScheme() {
      return new ConfigTupleScheme();
    }
  }

  private static class ConfigTupleScheme extends TupleScheme<Config> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Config struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.appNames.size());
        for (String _iter12 : struct.appNames)
        {
          oprot.writeString(_iter12);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetStart()) {
        optionals.set(0);
      }
      if (struct.isSetHits()) {
        optionals.set(1);
      }
      if (struct.isSetSearchFormat()) {
        optionals.set(2);
      }
      if (struct.isSetCustomConfig()) {
        optionals.set(3);
      }
      if (struct.isSetKvpairs()) {
        optionals.set(4);
      }
      if (struct.isSetFetchFields()) {
        optionals.set(5);
      }
      if (struct.isSetRouteValue()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetStart()) {
        oprot.writeI32(struct.start);
      }
      if (struct.isSetHits()) {
        oprot.writeI32(struct.hits);
      }
      if (struct.isSetSearchFormat()) {
        oprot.writeI32(struct.searchFormat.getValue());
      }
      if (struct.isSetCustomConfig()) {
        {
          oprot.writeI32(struct.customConfig.size());
          for (String _iter13 : struct.customConfig)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetKvpairs()) {
        oprot.writeString(struct.kvpairs);
      }
      if (struct.isSetFetchFields()) {
        {
          oprot.writeI32(struct.fetchFields.size());
          for (String _iter14 : struct.fetchFields)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetRouteValue()) {
        oprot.writeString(struct.routeValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Config struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.appNames = new ArrayList<String>(_list15.size);
        String _elem16;
        for (int _i17 = 0; _i17 < _list15.size; ++_i17)
        {
          _elem16 = iprot.readString();
          struct.appNames.add(_elem16);
        }
      }
      struct.setAppNamesIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.start = iprot.readI32();
        struct.setStartIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hits = iprot.readI32();
        struct.setHitsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.searchFormat = com.aliyun.opensearch.sdk.generated.search.SearchFormat.findByValue(iprot.readI32());
        struct.setSearchFormatIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.customConfig = new ArrayList<String>(_list18.size);
          String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.customConfig.add(_elem19);
          }
        }
        struct.setCustomConfigIsSet(true);
      }
      if (incoming.get(4)) {
        struct.kvpairs = iprot.readString();
        struct.setKvpairsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fetchFields = new ArrayList<String>(_list21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.fetchFields.add(_elem22);
          }
        }
        struct.setFetchFieldsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.routeValue = iprot.readString();
        struct.setRouteValueIsSet(true);
      }
    }
  }

}

