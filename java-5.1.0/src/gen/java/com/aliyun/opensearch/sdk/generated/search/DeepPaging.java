/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 
 * 传统搜索场景的主要目的是为了尽量短的时间内召回最符合的结果，所以对搜索结果进行了限制。在某些场景下需要提供更多的结果来进行分析工作，
 * 可以使用scroll接口来获取更多的结果，目前scorll只支持query与filter子句，sort子句无法支持。
 * 
 * 注意事项
 * <pre>
 *  1, start值无效，通过hit值设置每次返回的结果数，即后续查询都以第一次查询指定的hit值为准；
 *  2, aggregate、sort、distinct、排序表达式无效，如果传入，查询会报错且无结果；
 *  3, 第一次查询需要完整的query、index_name、AccessKeyId等参数，后面的查询不需要传这些参数（即使传入，也会被忽略），只需要传入上一次返回的scroll_id即可；
 *  4, 不支持多应用scroll查询；
 *  5, 每次查询都必须传scroll参数，如果不传，对于第一次查询，就按正常的查询；对于后续的查询，按scroll处理，但结果中无scroll_id返回。
 *  6, 返回结果均有第一次查询中的format决定，后续传scroll_id的响应格式均同第一次；
 *  7, 如果用户传入的scroll_id是非法的，那么查询会报错，返回结果格式为json。
 *  8, 第一次查询将不返回实际文档数据，只返回scroll_id，需要再次访问才能拿到搜索结果。
 *  </pre>
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class DeepPaging implements org.apache.thrift.TBase<DeepPaging, DeepPaging._Fields>, java.io.Serializable, Cloneable, Comparable<DeepPaging> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeepPaging");

  private static final org.apache.thrift.protocol.TField SCROLL_EXPIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("scrollExpire", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCROLL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scrollId", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeepPagingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeepPagingTupleSchemeFactory());
  }

  private String scrollExpire; // required
  private String scrollId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 设置scroll请求的有效期
     * 
     * expire 指定的scroll请求有效期 默认 1m 表示一分钟，支持的时间单位包括：w=Week, d=Day, h=Hour, m=minute, s=second
     */
    SCROLL_EXPIRE((short)1, "scrollExpire"),
    SCROLL_ID((short)3, "scrollId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCROLL_EXPIRE
          return SCROLL_EXPIRE;
        case 3: // SCROLL_ID
          return SCROLL_ID;
        default:
          return null;
      }
    }

    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SCROLL_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCROLL_EXPIRE, new org.apache.thrift.meta_data.FieldMetaData("scrollExpire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCROLL_ID, new org.apache.thrift.meta_data.FieldMetaData("scrollId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeepPaging.class, metaDataMap);
  }

  public DeepPaging() {
    this.scrollExpire = "1m";

  }

  public DeepPaging(
    String scrollExpire)
  {
    this();
    this.scrollExpire = scrollExpire;
  }

  public DeepPaging(DeepPaging other) {
    if (other.isSetScrollExpire()) {
      this.scrollExpire = other.scrollExpire;
    }
    if (other.isSetScrollId()) {
      this.scrollId = other.scrollId;
    }
  }

  public DeepPaging deepCopy() {
    return new DeepPaging(this);
  }

  @Override
  public void clear() {
    this.scrollExpire = "1m";

    this.scrollId = null;
  }

  /**
   * 设置scroll请求的有效期
   * 
   * expire 指定的scroll请求有效期 默认 1m 表示一分钟，支持的时间单位包括：w=Week, d=Day, h=Hour, m=minute, s=second
   * @return this
   */
  public String getScrollExpire() {
    return this.scrollExpire;
  }

  /**
   * 设置scroll请求的有效期
   * 
   * @param scrollExpire 指定的scroll请求有效期 默认 1m 表示一分钟，支持的时间单位包括：w=Week, d=Day, h=Hour, m=minute, s=second
   * @return this
   */
  public DeepPaging setScrollExpire(String scrollExpire) {
    this.scrollExpire = scrollExpire;
    return this;
  }

  public void unsetScrollExpire() {
    this.scrollExpire = null;
  }

  public boolean isSetScrollExpire() {
    return this.scrollExpire != null;
  }

  public void setScrollExpireIsSet(boolean value) {
    if (!value) {
      this.scrollExpire = null;
    }
  }

  public String getScrollId() {
    return this.scrollId;
  }

  public DeepPaging setScrollId(String scrollId) {
    this.scrollId = scrollId;
    return this;
  }

  public void unsetScrollId() {
    this.scrollId = null;
  }

  public boolean isSetScrollId() {
    return this.scrollId != null;
  }

  public void setScrollIdIsSet(boolean value) {
    if (!value) {
      this.scrollId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCROLL_EXPIRE:
      if (value == null) {
        unsetScrollExpire();
      } else {
        setScrollExpire((String)value);
      }
      break;

    case SCROLL_ID:
      if (value == null) {
        unsetScrollId();
      } else {
        setScrollId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCROLL_EXPIRE:
      return getScrollExpire();

    case SCROLL_ID:
      return getScrollId();

    }
    throw new IllegalStateException();
  }

  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCROLL_EXPIRE:
      return isSetScrollExpire();
    case SCROLL_ID:
      return isSetScrollId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeepPaging)
      return this.equals((DeepPaging)that);
    return false;
  }

  public boolean equals(DeepPaging that) {
    if (that == null)
      return false;

    boolean this_present_scrollExpire = true && this.isSetScrollExpire();
    boolean that_present_scrollExpire = true && that.isSetScrollExpire();
    if (this_present_scrollExpire || that_present_scrollExpire) {
      if (!(this_present_scrollExpire && that_present_scrollExpire))
        return false;
      if (!this.scrollExpire.equals(that.scrollExpire))
        return false;
    }

    boolean this_present_scrollId = true && this.isSetScrollId();
    boolean that_present_scrollId = true && that.isSetScrollId();
    if (this_present_scrollId || that_present_scrollId) {
      if (!(this_present_scrollId && that_present_scrollId))
        return false;
      if (!this.scrollId.equals(that.scrollId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_scrollExpire = true && (isSetScrollExpire());
    list.add(present_scrollExpire);
    if (present_scrollExpire)
      list.add(scrollExpire);

    boolean present_scrollId = true && (isSetScrollId());
    list.add(present_scrollId);
    if (present_scrollId)
      list.add(scrollId);

    return list.hashCode();
  }

  @Override
  public int compareTo(DeepPaging other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetScrollExpire()).compareTo(other.isSetScrollExpire());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScrollExpire()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scrollExpire, other.scrollExpire);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScrollId()).compareTo(other.isSetScrollId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScrollId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scrollId, other.scrollId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeepPaging(");
    boolean first = true;

    sb.append("scrollExpire:");
    if (this.scrollExpire == null) {
      sb.append("null");
    } else {
      sb.append(this.scrollExpire);
    }
    first = false;
    if (isSetScrollId()) {
      if (!first) sb.append(", ");
      sb.append("scrollId:");
      if (this.scrollId == null) {
        sb.append("null");
      } else {
        sb.append(this.scrollId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeepPagingStandardSchemeFactory implements SchemeFactory {
    public DeepPagingStandardScheme getScheme() {
      return new DeepPagingStandardScheme();
    }
  }

  private static class DeepPagingStandardScheme extends StandardScheme<DeepPaging> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeepPaging struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCROLL_EXPIRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scrollExpire = iprot.readString();
              struct.setScrollExpireIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCROLL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scrollId = iprot.readString();
              struct.setScrollIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeepPaging struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.scrollExpire != null) {
        oprot.writeFieldBegin(SCROLL_EXPIRE_FIELD_DESC);
        oprot.writeString(struct.scrollExpire);
        oprot.writeFieldEnd();
      }
      if (struct.scrollId != null) {
        if (struct.isSetScrollId()) {
          oprot.writeFieldBegin(SCROLL_ID_FIELD_DESC);
          oprot.writeString(struct.scrollId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeepPagingTupleSchemeFactory implements SchemeFactory {
    public DeepPagingTupleScheme getScheme() {
      return new DeepPagingTupleScheme();
    }
  }

  private static class DeepPagingTupleScheme extends TupleScheme<DeepPaging> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeepPaging struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetScrollExpire()) {
        optionals.set(0);
      }
      if (struct.isSetScrollId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetScrollExpire()) {
        oprot.writeString(struct.scrollExpire);
      }
      if (struct.isSetScrollId()) {
        oprot.writeString(struct.scrollId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeepPaging struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.scrollExpire = iprot.readString();
        struct.setScrollExpireIsSet(true);
      }
      if (incoming.get(1)) {
        struct.scrollId = iprot.readString();
        struct.setScrollIdIsSet(true);
      }
    }
  }

}

