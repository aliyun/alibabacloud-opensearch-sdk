/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2020-04-13")
public class OpenSearch implements org.apache.thrift.TBase<OpenSearch, OpenSearch._Fields>, java.io.Serializable, Cloneable, Comparable<OpenSearch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpenSearch");

  private static final org.apache.thrift.protocol.TField ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("secret", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField GZIP_FIELD_DESC = new org.apache.thrift.protocol.TField("gzip", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CONNECT_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("connectTimeout", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EXPIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("expired", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField SECURITY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("securityToken", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OpenSearchStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OpenSearchTupleSchemeFactory();

  public java.lang.String accessKey; // required
  public java.lang.String secret; // required
  public java.lang.String host; // required
  public java.util.Map<java.lang.String,java.lang.String> options; // optional
  public boolean gzip; // optional
  public int timeout; // optional
  public int connectTimeout; // optional
  public boolean expired; // optional
  public java.lang.String securityToken; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCESS_KEY((short)1, "accessKey"),
    SECRET((short)2, "secret"),
    HOST((short)3, "host"),
    OPTIONS((short)4, "options"),
    GZIP((short)5, "gzip"),
    TIMEOUT((short)6, "timeout"),
    CONNECT_TIMEOUT((short)7, "connectTimeout"),
    EXPIRED((short)8, "expired"),
    SECURITY_TOKEN((short)9, "securityToken");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCESS_KEY
          return ACCESS_KEY;
        case 2: // SECRET
          return SECRET;
        case 3: // HOST
          return HOST;
        case 4: // OPTIONS
          return OPTIONS;
        case 5: // GZIP
          return GZIP;
        case 6: // TIMEOUT
          return TIMEOUT;
        case 7: // CONNECT_TIMEOUT
          return CONNECT_TIMEOUT;
        case 8: // EXPIRED
          return EXPIRED;
        case 9: // SECURITY_TOKEN
          return SECURITY_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GZIP_ISSET_ID = 0;
  private static final int __TIMEOUT_ISSET_ID = 1;
  private static final int __CONNECTTIMEOUT_ISSET_ID = 2;
  private static final int __EXPIRED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OPTIONS,_Fields.GZIP,_Fields.TIMEOUT,_Fields.CONNECT_TIMEOUT,_Fields.EXPIRED,_Fields.SECURITY_TOKEN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("accessKey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRET, new org.apache.thrift.meta_data.FieldMetaData("secret", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "Options")));
    tmpMap.put(_Fields.GZIP, new org.apache.thrift.meta_data.FieldMetaData("gzip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONNECT_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("connectTimeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPIRED, new org.apache.thrift.meta_data.FieldMetaData("expired", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SECURITY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("securityToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenSearch.class, metaDataMap);
  }

  public OpenSearch() {
    this.gzip = true;

    this.timeout = 10000;

    this.connectTimeout = 5000;

    this.expired = false;

  }

  public OpenSearch(
    java.lang.String accessKey,
    java.lang.String secret,
    java.lang.String host)
  {
    this();
    this.accessKey = accessKey;
    this.secret = secret;
    this.host = host;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OpenSearch(OpenSearch other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAccessKey()) {
      this.accessKey = other.accessKey;
    }
    if (other.isSetSecret()) {
      this.secret = other.secret;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetOptions()) {
      java.util.Map<java.lang.String,java.lang.String> __this__options = new java.util.HashMap<java.lang.String,java.lang.String>(other.options);
      this.options = __this__options;
    }
    this.gzip = other.gzip;
    this.timeout = other.timeout;
    this.connectTimeout = other.connectTimeout;
    this.expired = other.expired;
    if (other.isSetSecurityToken()) {
      this.securityToken = other.securityToken;
    }
  }

  public OpenSearch deepCopy() {
    return new OpenSearch(this);
  }

  @Override
  public void clear() {
    this.accessKey = null;
    this.secret = null;
    this.host = null;
    this.options = null;
    this.gzip = true;

    this.timeout = 10000;

    this.connectTimeout = 5000;

    this.expired = false;

    this.securityToken = null;
  }

  public java.lang.String getAccessKey() {
    return this.accessKey;
  }

  public OpenSearch setAccessKey(java.lang.String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

  public void unsetAccessKey() {
    this.accessKey = null;
  }

  /** Returns true if field accessKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessKey() {
    return this.accessKey != null;
  }

  public void setAccessKeyIsSet(boolean value) {
    if (!value) {
      this.accessKey = null;
    }
  }

  public java.lang.String getSecret() {
    return this.secret;
  }

  public OpenSearch setSecret(java.lang.String secret) {
    this.secret = secret;
    return this;
  }

  public void unsetSecret() {
    this.secret = null;
  }

  /** Returns true if field secret is set (has been assigned a value) and false otherwise */
  public boolean isSetSecret() {
    return this.secret != null;
  }

  public void setSecretIsSet(boolean value) {
    if (!value) {
      this.secret = null;
    }
  }

  public java.lang.String getHost() {
    return this.host;
  }

  public OpenSearch setHost(java.lang.String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public int getOptionsSize() {
    return (this.options == null) ? 0 : this.options.size();
  }

  public void putToOptions(java.lang.String key, java.lang.String val) {
    if (this.options == null) {
      this.options = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.options.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getOptions() {
    return this.options;
  }

  public OpenSearch setOptions(java.util.Map<java.lang.String,java.lang.String> options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public boolean isGzip() {
    return this.gzip;
  }

  public OpenSearch setGzip(boolean gzip) {
    this.gzip = gzip;
    setGzipIsSet(true);
    return this;
  }

  public void unsetGzip() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GZIP_ISSET_ID);
  }

  /** Returns true if field gzip is set (has been assigned a value) and false otherwise */
  public boolean isSetGzip() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GZIP_ISSET_ID);
  }

  public void setGzipIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GZIP_ISSET_ID, value);
  }

  public int getTimeout() {
    return this.timeout;
  }

  public OpenSearch setTimeout(int timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public int getConnectTimeout() {
    return this.connectTimeout;
  }

  public OpenSearch setConnectTimeout(int connectTimeout) {
    this.connectTimeout = connectTimeout;
    setConnectTimeoutIsSet(true);
    return this;
  }

  public void unsetConnectTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECTTIMEOUT_ISSET_ID);
  }

  /** Returns true if field connectTimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECTTIMEOUT_ISSET_ID);
  }

  public void setConnectTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECTTIMEOUT_ISSET_ID, value);
  }

  public boolean isExpired() {
    return this.expired;
  }

  public OpenSearch setExpired(boolean expired) {
    this.expired = expired;
    setExpiredIsSet(true);
    return this;
  }

  public void unsetExpired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRED_ISSET_ID);
  }

  /** Returns true if field expired is set (has been assigned a value) and false otherwise */
  public boolean isSetExpired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRED_ISSET_ID);
  }

  public void setExpiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRED_ISSET_ID, value);
  }

  public java.lang.String getSecurityToken() {
    return this.securityToken;
  }

  public OpenSearch setSecurityToken(java.lang.String securityToken) {
    this.securityToken = securityToken;
    return this;
  }

  public void unsetSecurityToken() {
    this.securityToken = null;
  }

  /** Returns true if field securityToken is set (has been assigned a value) and false otherwise */
  public boolean isSetSecurityToken() {
    return this.securityToken != null;
  }

  public void setSecurityTokenIsSet(boolean value) {
    if (!value) {
      this.securityToken = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACCESS_KEY:
      if (value == null) {
        unsetAccessKey();
      } else {
        setAccessKey((java.lang.String)value);
      }
      break;

    case SECRET:
      if (value == null) {
        unsetSecret();
      } else {
        setSecret((java.lang.String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((java.lang.String)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case GZIP:
      if (value == null) {
        unsetGzip();
      } else {
        setGzip((java.lang.Boolean)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Integer)value);
      }
      break;

    case CONNECT_TIMEOUT:
      if (value == null) {
        unsetConnectTimeout();
      } else {
        setConnectTimeout((java.lang.Integer)value);
      }
      break;

    case EXPIRED:
      if (value == null) {
        unsetExpired();
      } else {
        setExpired((java.lang.Boolean)value);
      }
      break;

    case SECURITY_TOKEN:
      if (value == null) {
        unsetSecurityToken();
      } else {
        setSecurityToken((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCESS_KEY:
      return getAccessKey();

    case SECRET:
      return getSecret();

    case HOST:
      return getHost();

    case OPTIONS:
      return getOptions();

    case GZIP:
      return isGzip();

    case TIMEOUT:
      return getTimeout();

    case CONNECT_TIMEOUT:
      return getConnectTimeout();

    case EXPIRED:
      return isExpired();

    case SECURITY_TOKEN:
      return getSecurityToken();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACCESS_KEY:
      return isSetAccessKey();
    case SECRET:
      return isSetSecret();
    case HOST:
      return isSetHost();
    case OPTIONS:
      return isSetOptions();
    case GZIP:
      return isSetGzip();
    case TIMEOUT:
      return isSetTimeout();
    case CONNECT_TIMEOUT:
      return isSetConnectTimeout();
    case EXPIRED:
      return isSetExpired();
    case SECURITY_TOKEN:
      return isSetSecurityToken();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof OpenSearch)
      return this.equals((OpenSearch)that);
    return false;
  }

  public boolean equals(OpenSearch that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_accessKey = true && this.isSetAccessKey();
    boolean that_present_accessKey = true && that.isSetAccessKey();
    if (this_present_accessKey || that_present_accessKey) {
      if (!(this_present_accessKey && that_present_accessKey))
        return false;
      if (!this.accessKey.equals(that.accessKey))
        return false;
    }

    boolean this_present_secret = true && this.isSetSecret();
    boolean that_present_secret = true && that.isSetSecret();
    if (this_present_secret || that_present_secret) {
      if (!(this_present_secret && that_present_secret))
        return false;
      if (!this.secret.equals(that.secret))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_gzip = true && this.isSetGzip();
    boolean that_present_gzip = true && that.isSetGzip();
    if (this_present_gzip || that_present_gzip) {
      if (!(this_present_gzip && that_present_gzip))
        return false;
      if (this.gzip != that.gzip)
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_connectTimeout = true && this.isSetConnectTimeout();
    boolean that_present_connectTimeout = true && that.isSetConnectTimeout();
    if (this_present_connectTimeout || that_present_connectTimeout) {
      if (!(this_present_connectTimeout && that_present_connectTimeout))
        return false;
      if (this.connectTimeout != that.connectTimeout)
        return false;
    }

    boolean this_present_expired = true && this.isSetExpired();
    boolean that_present_expired = true && that.isSetExpired();
    if (this_present_expired || that_present_expired) {
      if (!(this_present_expired && that_present_expired))
        return false;
      if (this.expired != that.expired)
        return false;
    }

    boolean this_present_securityToken = true && this.isSetSecurityToken();
    boolean that_present_securityToken = true && that.isSetSecurityToken();
    if (this_present_securityToken || that_present_securityToken) {
      if (!(this_present_securityToken && that_present_securityToken))
        return false;
      if (!this.securityToken.equals(that.securityToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAccessKey()) ? 131071 : 524287);
    if (isSetAccessKey())
      hashCode = hashCode * 8191 + accessKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecret()) ? 131071 : 524287);
    if (isSetSecret())
      hashCode = hashCode * 8191 + secret.hashCode();

    hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
    if (isSetHost())
      hashCode = hashCode * 8191 + host.hashCode();

    hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
    if (isSetOptions())
      hashCode = hashCode * 8191 + options.hashCode();

    hashCode = hashCode * 8191 + ((isSetGzip()) ? 131071 : 524287);
    if (isSetGzip())
      hashCode = hashCode * 8191 + ((gzip) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + timeout;

    hashCode = hashCode * 8191 + ((isSetConnectTimeout()) ? 131071 : 524287);
    if (isSetConnectTimeout())
      hashCode = hashCode * 8191 + connectTimeout;

    hashCode = hashCode * 8191 + ((isSetExpired()) ? 131071 : 524287);
    if (isSetExpired())
      hashCode = hashCode * 8191 + ((expired) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSecurityToken()) ? 131071 : 524287);
    if (isSetSecurityToken())
      hashCode = hashCode * 8191 + securityToken.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(OpenSearch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAccessKey()).compareTo(other.isSetAccessKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKey, other.accessKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecret()).compareTo(other.isSetSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecret()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secret, other.secret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGzip()).compareTo(other.isSetGzip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGzip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gzip, other.gzip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeout()).compareTo(other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConnectTimeout()).compareTo(other.isSetConnectTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectTimeout, other.connectTimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpired()).compareTo(other.isSetExpired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expired, other.expired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecurityToken()).compareTo(other.isSetSecurityToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecurityToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.securityToken, other.securityToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OpenSearch(");
    boolean first = true;

    sb.append("accessKey:");
    if (this.accessKey == null) {
      sb.append("null");
    } else {
      sb.append(this.accessKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secret:");
    if (this.secret == null) {
      sb.append("null");
    } else {
      sb.append(this.secret);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (isSetOptions()) {
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
    }
    if (isSetGzip()) {
      if (!first) sb.append(", ");
      sb.append("gzip:");
      sb.append(this.gzip);
      first = false;
    }
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (isSetConnectTimeout()) {
      if (!first) sb.append(", ");
      sb.append("connectTimeout:");
      sb.append(this.connectTimeout);
      first = false;
    }
    if (isSetExpired()) {
      if (!first) sb.append(", ");
      sb.append("expired:");
      sb.append(this.expired);
      first = false;
    }
    if (isSetSecurityToken()) {
      if (!first) sb.append(", ");
      sb.append("securityToken:");
      if (this.securityToken == null) {
        sb.append("null");
      } else {
        sb.append(this.securityToken);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (accessKey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accessKey' was not present! Struct: " + toString());
    }
    if (secret == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'secret' was not present! Struct: " + toString());
    }
    if (host == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'host' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OpenSearchStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OpenSearchStandardScheme getScheme() {
      return new OpenSearchStandardScheme();
    }
  }

  private static class OpenSearchStandardScheme extends org.apache.thrift.scheme.StandardScheme<OpenSearch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OpenSearch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCESS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessKey = iprot.readString();
              struct.setAccessKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SECRET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secret = iprot.readString();
              struct.setSecretIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.options = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                java.lang.String _key1;
                java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.options.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GZIP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.gzip = iprot.readBool();
              struct.setGzipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeout = iprot.readI32();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONNECT_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.connectTimeout = iprot.readI32();
              struct.setConnectTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.expired = iprot.readBool();
              struct.setExpiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SECURITY_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.securityToken = iprot.readString();
              struct.setSecurityTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OpenSearch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accessKey != null) {
        oprot.writeFieldBegin(ACCESS_KEY_FIELD_DESC);
        oprot.writeString(struct.accessKey);
        oprot.writeFieldEnd();
      }
      if (struct.secret != null) {
        oprot.writeFieldBegin(SECRET_FIELD_DESC);
        oprot.writeString(struct.secret);
        oprot.writeFieldEnd();
      }
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      if (struct.options != null) {
        if (struct.isSetOptions()) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.options.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.options.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGzip()) {
        oprot.writeFieldBegin(GZIP_FIELD_DESC);
        oprot.writeBool(struct.gzip);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConnectTimeout()) {
        oprot.writeFieldBegin(CONNECT_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.connectTimeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpired()) {
        oprot.writeFieldBegin(EXPIRED_FIELD_DESC);
        oprot.writeBool(struct.expired);
        oprot.writeFieldEnd();
      }
      if (struct.securityToken != null) {
        if (struct.isSetSecurityToken()) {
          oprot.writeFieldBegin(SECURITY_TOKEN_FIELD_DESC);
          oprot.writeString(struct.securityToken);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OpenSearchTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OpenSearchTupleScheme getScheme() {
      return new OpenSearchTupleScheme();
    }
  }

  private static class OpenSearchTupleScheme extends org.apache.thrift.scheme.TupleScheme<OpenSearch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OpenSearch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.accessKey);
      oprot.writeString(struct.secret);
      oprot.writeString(struct.host);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOptions()) {
        optionals.set(0);
      }
      if (struct.isSetGzip()) {
        optionals.set(1);
      }
      if (struct.isSetTimeout()) {
        optionals.set(2);
      }
      if (struct.isSetConnectTimeout()) {
        optionals.set(3);
      }
      if (struct.isSetExpired()) {
        optionals.set(4);
      }
      if (struct.isSetSecurityToken()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOptions()) {
        {
          oprot.writeI32(struct.options.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.options.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetGzip()) {
        oprot.writeBool(struct.gzip);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI32(struct.timeout);
      }
      if (struct.isSetConnectTimeout()) {
        oprot.writeI32(struct.connectTimeout);
      }
      if (struct.isSetExpired()) {
        oprot.writeBool(struct.expired);
      }
      if (struct.isSetSecurityToken()) {
        oprot.writeString(struct.securityToken);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OpenSearch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.accessKey = iprot.readString();
      struct.setAccessKeyIsSet(true);
      struct.secret = iprot.readString();
      struct.setSecretIsSet(true);
      struct.host = iprot.readString();
      struct.setHostIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.options = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          java.lang.String _key7;
          java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.options.put(_key7, _val8);
          }
        }
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gzip = iprot.readBool();
        struct.setGzipIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeout = iprot.readI32();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(3)) {
        struct.connectTimeout = iprot.readI32();
        struct.setConnectTimeoutIsSet(true);
      }
      if (incoming.get(4)) {
        struct.expired = iprot.readBool();
        struct.setExpiredIsSet(true);
      }
      if (incoming.get(5)) {
        struct.securityToken = iprot.readString();
        struct.setSecurityTokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

