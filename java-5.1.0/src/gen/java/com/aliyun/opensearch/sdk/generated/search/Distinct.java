/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 聚合打散条件(distinct)
 * 
 * 例如：检索关键词“手机”共获得10个结果，分别为：doc1，doc2，doc3，doc4，doc5，doc6，
 * doc7，doc8，doc9，doc10。其中前三个属于用户A，doc4-doc6属于用户B，剩余四个属于
 * 用户C。如果前端每页仅展示5个商品，则用户C将没有展示的机会。但是如果按照user_id进行抽
 * 取，每轮抽取1个，抽取2次，并保留抽取剩余的结果，则可以获得以下文档排列顺序：doc1、
 * doc4、doc7、doc2、doc5、doc8、doc3、doc6、doc9、doc10。可以看出，通过distinct
 * 排序，各个用户的 商品都得到了展示机会，结果排序更趋于合理。
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class Distinct implements org.apache.thrift.TBase<Distinct, Distinct._Fields>, java.io.Serializable, Cloneable, Comparable<Distinct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Distinct");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DIST_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("distCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DIST_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("distTimes", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RESERVED_FIELD_DESC = new org.apache.thrift.protocol.TField("reserved", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField DIST_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("distFilter", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_TOTAL_HIT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTotalHit", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("grade", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DistinctStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DistinctTupleSchemeFactory());
  }

  private String key; // required
  private int distCount; // optional
  private int distTimes; // optional
  private boolean reserved; // optional
  private String distFilter; // optional
  private boolean updateTotalHit; // optional
  private String grade; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 为用户用于做distinct抽取的字段，该字段要求为可过滤字段。
     *  
     */
    KEY((short)1, "key"),
    /**
     * 为一次抽取的document数量，默认值为1。
     *  
     */
    DIST_COUNT((short)3, "distCount"),
    /**
     * 为抽取的次数，默认值为1。
     *  
     */
    DIST_TIMES((short)5, "distTimes"),
    /**
     * 为是否保留抽取之后剩余的结果，true为保留，false则丢弃，丢弃时totalHits的个数会减去被distinct而丢弃的个数，但这个结果不一定准确，默认为true。
     *  
     */
    RESERVED((short)7, "reserved"),
    /**
     * 为过滤条件，被过滤的doc不参与distinct，只在后面的 排序中，这些被过滤的doc将和被distinct出来的第一组doc一起参与排序。默认是全部参与distinct。
     *  
     */
    DIST_FILTER((short)9, "distFilter"),
    /**
     * 当reserved为false时，设置update_total_hit为true，则最终total_hit会减去被distinct丢弃的的数目（不一定准确），为false则不减； 默认为false。
     *  
     */
    UPDATE_TOTAL_HIT((short)11, "updateTotalHit"),
    /**
     * 指定档位划分阈值。
     *  
     */
    GRADE((short)13, "grade");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 3: // DIST_COUNT
          return DIST_COUNT;
        case 5: // DIST_TIMES
          return DIST_TIMES;
        case 7: // RESERVED
          return RESERVED;
        case 9: // DIST_FILTER
          return DIST_FILTER;
        case 11: // UPDATE_TOTAL_HIT
          return UPDATE_TOTAL_HIT;
        case 13: // GRADE
          return GRADE;
        default:
          return null;
      }
    }

    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DISTCOUNT_ISSET_ID = 0;
  private static final int __DISTTIMES_ISSET_ID = 1;
  private static final int __RESERVED_ISSET_ID = 2;
  private static final int __UPDATETOTALHIT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DIST_COUNT,_Fields.DIST_TIMES,_Fields.RESERVED,_Fields.DIST_FILTER,_Fields.UPDATE_TOTAL_HIT,_Fields.GRADE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIST_COUNT, new org.apache.thrift.meta_data.FieldMetaData("distCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.DIST_TIMES, new org.apache.thrift.meta_data.FieldMetaData("distTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.RESERVED, new org.apache.thrift.meta_data.FieldMetaData("reserved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.DIST_FILTER, new org.apache.thrift.meta_data.FieldMetaData("distFilter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TOTAL_HIT, new org.apache.thrift.meta_data.FieldMetaData("updateTotalHit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.GRADE, new org.apache.thrift.meta_data.FieldMetaData("grade", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Distinct.class, metaDataMap);
  }

  public Distinct() {
    this.distCount = 1;

    this.distTimes = 1;

    this.reserved = true;

    this.updateTotalHit = false;

  }

  public Distinct(
    String key)
  {
    this();
    this.key = key;
  }

  public Distinct(Distinct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetKey()) {
      this.key = other.key;
    }
    this.distCount = other.distCount;
    this.distTimes = other.distTimes;
    this.reserved = other.reserved;
    if (other.isSetDistFilter()) {
      this.distFilter = other.distFilter;
    }
    this.updateTotalHit = other.updateTotalHit;
    if (other.isSetGrade()) {
      this.grade = other.grade;
    }
  }

  public Distinct deepCopy() {
    return new Distinct(this);
  }

  @Override
  public void clear() {
    this.key = null;
    this.distCount = 1;

    this.distTimes = 1;

    this.reserved = true;

    this.distFilter = null;
    this.updateTotalHit = false;

    this.grade = null;
  }

  public String getKey() {
    return this.key;
  }

  public Distinct setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public int getDistCount() {
    return this.distCount;
  }

  public Distinct setDistCount(int distCount) {
    this.distCount = distCount;
    setDistCountIsSet(true);
    return this;
  }

  public void unsetDistCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTCOUNT_ISSET_ID);
  }

  public boolean isSetDistCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTCOUNT_ISSET_ID);
  }

  public void setDistCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTCOUNT_ISSET_ID, value);
  }

  public int getDistTimes() {
    return this.distTimes;
  }

  public Distinct setDistTimes(int distTimes) {
    this.distTimes = distTimes;
    setDistTimesIsSet(true);
    return this;
  }

  public void unsetDistTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTTIMES_ISSET_ID);
  }

  public boolean isSetDistTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTTIMES_ISSET_ID);
  }

  public void setDistTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTTIMES_ISSET_ID, value);
  }

  public boolean isReserved() {
    return this.reserved;
  }

  public Distinct setReserved(boolean reserved) {
    this.reserved = reserved;
    setReservedIsSet(true);
    return this;
  }

  public void unsetReserved() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESERVED_ISSET_ID);
  }

  public boolean isSetReserved() {
    return EncodingUtils.testBit(__isset_bitfield, __RESERVED_ISSET_ID);
  }

  public void setReservedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESERVED_ISSET_ID, value);
  }

  public String getDistFilter() {
    return this.distFilter;
  }

  public Distinct setDistFilter(String distFilter) {
    this.distFilter = distFilter;
    return this;
  }

  public void unsetDistFilter() {
    this.distFilter = null;
  }

  public boolean isSetDistFilter() {
    return this.distFilter != null;
  }

  public void setDistFilterIsSet(boolean value) {
    if (!value) {
      this.distFilter = null;
    }
  }

  public boolean isUpdateTotalHit() {
    return this.updateTotalHit;
  }

  public Distinct setUpdateTotalHit(boolean updateTotalHit) {
    this.updateTotalHit = updateTotalHit;
    setUpdateTotalHitIsSet(true);
    return this;
  }

  public void unsetUpdateTotalHit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETOTALHIT_ISSET_ID);
  }

  public boolean isSetUpdateTotalHit() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETOTALHIT_ISSET_ID);
  }

  public void setUpdateTotalHitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETOTALHIT_ISSET_ID, value);
  }

  public String getGrade() {
    return this.grade;
  }

  public Distinct setGrade(String grade) {
    this.grade = grade;
    return this;
  }

  public void unsetGrade() {
    this.grade = null;
  }

  public boolean isSetGrade() {
    return this.grade != null;
  }

  public void setGradeIsSet(boolean value) {
    if (!value) {
      this.grade = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case DIST_COUNT:
      if (value == null) {
        unsetDistCount();
      } else {
        setDistCount((Integer)value);
      }
      break;

    case DIST_TIMES:
      if (value == null) {
        unsetDistTimes();
      } else {
        setDistTimes((Integer)value);
      }
      break;

    case RESERVED:
      if (value == null) {
        unsetReserved();
      } else {
        setReserved((Boolean)value);
      }
      break;

    case DIST_FILTER:
      if (value == null) {
        unsetDistFilter();
      } else {
        setDistFilter((String)value);
      }
      break;

    case UPDATE_TOTAL_HIT:
      if (value == null) {
        unsetUpdateTotalHit();
      } else {
        setUpdateTotalHit((Boolean)value);
      }
      break;

    case GRADE:
      if (value == null) {
        unsetGrade();
      } else {
        setGrade((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case DIST_COUNT:
      return getDistCount();

    case DIST_TIMES:
      return getDistTimes();

    case RESERVED:
      return isReserved();

    case DIST_FILTER:
      return getDistFilter();

    case UPDATE_TOTAL_HIT:
      return isUpdateTotalHit();

    case GRADE:
      return getGrade();

    }
    throw new IllegalStateException();
  }

  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case DIST_COUNT:
      return isSetDistCount();
    case DIST_TIMES:
      return isSetDistTimes();
    case RESERVED:
      return isSetReserved();
    case DIST_FILTER:
      return isSetDistFilter();
    case UPDATE_TOTAL_HIT:
      return isSetUpdateTotalHit();
    case GRADE:
      return isSetGrade();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Distinct)
      return this.equals((Distinct)that);
    return false;
  }

  public boolean equals(Distinct that) {
    if (that == null)
      return false;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_distCount = true && this.isSetDistCount();
    boolean that_present_distCount = true && that.isSetDistCount();
    if (this_present_distCount || that_present_distCount) {
      if (!(this_present_distCount && that_present_distCount))
        return false;
      if (this.distCount != that.distCount)
        return false;
    }

    boolean this_present_distTimes = true && this.isSetDistTimes();
    boolean that_present_distTimes = true && that.isSetDistTimes();
    if (this_present_distTimes || that_present_distTimes) {
      if (!(this_present_distTimes && that_present_distTimes))
        return false;
      if (this.distTimes != that.distTimes)
        return false;
    }

    boolean this_present_reserved = true && this.isSetReserved();
    boolean that_present_reserved = true && that.isSetReserved();
    if (this_present_reserved || that_present_reserved) {
      if (!(this_present_reserved && that_present_reserved))
        return false;
      if (this.reserved != that.reserved)
        return false;
    }

    boolean this_present_distFilter = true && this.isSetDistFilter();
    boolean that_present_distFilter = true && that.isSetDistFilter();
    if (this_present_distFilter || that_present_distFilter) {
      if (!(this_present_distFilter && that_present_distFilter))
        return false;
      if (!this.distFilter.equals(that.distFilter))
        return false;
    }

    boolean this_present_updateTotalHit = true && this.isSetUpdateTotalHit();
    boolean that_present_updateTotalHit = true && that.isSetUpdateTotalHit();
    if (this_present_updateTotalHit || that_present_updateTotalHit) {
      if (!(this_present_updateTotalHit && that_present_updateTotalHit))
        return false;
      if (this.updateTotalHit != that.updateTotalHit)
        return false;
    }

    boolean this_present_grade = true && this.isSetGrade();
    boolean that_present_grade = true && that.isSetGrade();
    if (this_present_grade || that_present_grade) {
      if (!(this_present_grade && that_present_grade))
        return false;
      if (!this.grade.equals(that.grade))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_key = true && (isSetKey());
    list.add(present_key);
    if (present_key)
      list.add(key);

    boolean present_distCount = true && (isSetDistCount());
    list.add(present_distCount);
    if (present_distCount)
      list.add(distCount);

    boolean present_distTimes = true && (isSetDistTimes());
    list.add(present_distTimes);
    if (present_distTimes)
      list.add(distTimes);

    boolean present_reserved = true && (isSetReserved());
    list.add(present_reserved);
    if (present_reserved)
      list.add(reserved);

    boolean present_distFilter = true && (isSetDistFilter());
    list.add(present_distFilter);
    if (present_distFilter)
      list.add(distFilter);

    boolean present_updateTotalHit = true && (isSetUpdateTotalHit());
    list.add(present_updateTotalHit);
    if (present_updateTotalHit)
      list.add(updateTotalHit);

    boolean present_grade = true && (isSetGrade());
    list.add(present_grade);
    if (present_grade)
      list.add(grade);

    return list.hashCode();
  }

  @Override
  public int compareTo(Distinct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistCount()).compareTo(other.isSetDistCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distCount, other.distCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistTimes()).compareTo(other.isSetDistTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distTimes, other.distTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserved()).compareTo(other.isSetReserved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserved, other.reserved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistFilter()).compareTo(other.isSetDistFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distFilter, other.distFilter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTotalHit()).compareTo(other.isSetUpdateTotalHit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTotalHit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTotalHit, other.updateTotalHit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrade()).compareTo(other.isSetGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grade, other.grade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Distinct(");
    boolean first = true;

    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (isSetDistCount()) {
      if (!first) sb.append(", ");
      sb.append("distCount:");
      sb.append(this.distCount);
      first = false;
    }
    if (isSetDistTimes()) {
      if (!first) sb.append(", ");
      sb.append("distTimes:");
      sb.append(this.distTimes);
      first = false;
    }
    if (isSetReserved()) {
      if (!first) sb.append(", ");
      sb.append("reserved:");
      sb.append(this.reserved);
      first = false;
    }
    if (isSetDistFilter()) {
      if (!first) sb.append(", ");
      sb.append("distFilter:");
      if (this.distFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.distFilter);
      }
      first = false;
    }
    if (isSetUpdateTotalHit()) {
      if (!first) sb.append(", ");
      sb.append("updateTotalHit:");
      sb.append(this.updateTotalHit);
      first = false;
    }
    if (isSetGrade()) {
      if (!first) sb.append(", ");
      sb.append("grade:");
      if (this.grade == null) {
        sb.append("null");
      } else {
        sb.append(this.grade);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DistinctStandardSchemeFactory implements SchemeFactory {
    public DistinctStandardScheme getScheme() {
      return new DistinctStandardScheme();
    }
  }

  private static class DistinctStandardScheme extends StandardScheme<Distinct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Distinct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIST_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distCount = iprot.readI32();
              struct.setDistCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIST_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distTimes = iprot.readI32();
              struct.setDistTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESERVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reserved = iprot.readBool();
              struct.setReservedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DIST_FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.distFilter = iprot.readString();
              struct.setDistFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_TOTAL_HIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.updateTotalHit = iprot.readBool();
              struct.setUpdateTotalHitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.grade = iprot.readString();
              struct.setGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Distinct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDistCount()) {
        oprot.writeFieldBegin(DIST_COUNT_FIELD_DESC);
        oprot.writeI32(struct.distCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDistTimes()) {
        oprot.writeFieldBegin(DIST_TIMES_FIELD_DESC);
        oprot.writeI32(struct.distTimes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReserved()) {
        oprot.writeFieldBegin(RESERVED_FIELD_DESC);
        oprot.writeBool(struct.reserved);
        oprot.writeFieldEnd();
      }
      if (struct.distFilter != null) {
        if (struct.isSetDistFilter()) {
          oprot.writeFieldBegin(DIST_FILTER_FIELD_DESC);
          oprot.writeString(struct.distFilter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUpdateTotalHit()) {
        oprot.writeFieldBegin(UPDATE_TOTAL_HIT_FIELD_DESC);
        oprot.writeBool(struct.updateTotalHit);
        oprot.writeFieldEnd();
      }
      if (struct.grade != null) {
        if (struct.isSetGrade()) {
          oprot.writeFieldBegin(GRADE_FIELD_DESC);
          oprot.writeString(struct.grade);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DistinctTupleSchemeFactory implements SchemeFactory {
    public DistinctTupleScheme getScheme() {
      return new DistinctTupleScheme();
    }
  }

  private static class DistinctTupleScheme extends TupleScheme<Distinct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Distinct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.key);
      BitSet optionals = new BitSet();
      if (struct.isSetDistCount()) {
        optionals.set(0);
      }
      if (struct.isSetDistTimes()) {
        optionals.set(1);
      }
      if (struct.isSetReserved()) {
        optionals.set(2);
      }
      if (struct.isSetDistFilter()) {
        optionals.set(3);
      }
      if (struct.isSetUpdateTotalHit()) {
        optionals.set(4);
      }
      if (struct.isSetGrade()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDistCount()) {
        oprot.writeI32(struct.distCount);
      }
      if (struct.isSetDistTimes()) {
        oprot.writeI32(struct.distTimes);
      }
      if (struct.isSetReserved()) {
        oprot.writeBool(struct.reserved);
      }
      if (struct.isSetDistFilter()) {
        oprot.writeString(struct.distFilter);
      }
      if (struct.isSetUpdateTotalHit()) {
        oprot.writeBool(struct.updateTotalHit);
      }
      if (struct.isSetGrade()) {
        oprot.writeString(struct.grade);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Distinct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.key = iprot.readString();
      struct.setKeyIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.distCount = iprot.readI32();
        struct.setDistCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.distTimes = iprot.readI32();
        struct.setDistTimesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reserved = iprot.readBool();
        struct.setReservedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.distFilter = iprot.readString();
        struct.setDistFilterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updateTotalHit = iprot.readBool();
        struct.setUpdateTotalHitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.grade = iprot.readString();
        struct.setGradeIsSet(true);
      }
    }
  }

}

