/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.summary;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class Summary implements org.apache.thrift.TBase<Summary, Summary._Fields>, java.io.Serializable, Cloneable, Comparable<Summary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Summary");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LEN_FIELD_DESC = new org.apache.thrift.protocol.TField("len", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ELEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("element", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ELLIPSIS_FIELD_DESC = new org.apache.thrift.protocol.TField("ellipsis", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField SNIPPET_FIELD_DESC = new org.apache.thrift.protocol.TField("snippet", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SummaryTupleSchemeFactory());
  }

  private String id; // optional
  private com.aliyun.opensearch.sdk.generated.commons.AppReference app; // optional
  private String field; // optional
  private String group; // optional
  private int len; // optional
  private String element; // optional
  private String ellipsis; // optional
  private int snippet; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    APP((short)2, "app"),
    FIELD((short)10, "field"),
    GROUP((short)11, "group"),
    LEN((short)12, "len"),
    ELEMENT((short)13, "element"),
    ELLIPSIS((short)14, "ellipsis"),
    SNIPPET((short)15, "snippet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // APP
          return APP;
        case 10: // FIELD
          return FIELD;
        case 11: // GROUP
          return GROUP;
        case 12: // LEN
          return LEN;
        case 13: // ELEMENT
          return ELEMENT;
        case 14: // ELLIPSIS
          return ELLIPSIS;
        case 15: // SNIPPET
          return SNIPPET;
        default:
          return null;
      }
    }

    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEN_ISSET_ID = 0;
  private static final int __SNIPPET_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.APP,_Fields.FIELD,_Fields.GROUP,_Fields.LEN,_Fields.ELEMENT,_Fields.ELLIPSIS,_Fields.SNIPPET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aliyun.opensearch.sdk.generated.commons.AppReference.class)));
    tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEN, new org.apache.thrift.meta_data.FieldMetaData("len", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ELEMENT, new org.apache.thrift.meta_data.FieldMetaData("element", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ELLIPSIS, new org.apache.thrift.meta_data.FieldMetaData("ellipsis", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNIPPET, new org.apache.thrift.meta_data.FieldMetaData("snippet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Summary.class, metaDataMap);
  }

  public Summary() {
  }

  public Summary(Summary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetApp()) {
      this.app = new com.aliyun.opensearch.sdk.generated.commons.AppReference(other.app);
    }
    if (other.isSetField()) {
      this.field = other.field;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    this.len = other.len;
    if (other.isSetElement()) {
      this.element = other.element;
    }
    if (other.isSetEllipsis()) {
      this.ellipsis = other.ellipsis;
    }
    this.snippet = other.snippet;
  }

  public Summary deepCopy() {
    return new Summary(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.app = null;
    this.field = null;
    this.group = null;
    setLenIsSet(false);
    this.len = 0;
    this.element = null;
    this.ellipsis = null;
    setSnippetIsSet(false);
    this.snippet = 0;
  }

  public String getId() {
    return this.id;
  }

  public Summary setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public com.aliyun.opensearch.sdk.generated.commons.AppReference getApp() {
    return this.app;
  }

  public Summary setApp(com.aliyun.opensearch.sdk.generated.commons.AppReference app) {
    this.app = app;
    return this;
  }

  public void unsetApp() {
    this.app = null;
  }

  public boolean isSetApp() {
    return this.app != null;
  }

  public void setAppIsSet(boolean value) {
    if (!value) {
      this.app = null;
    }
  }

  public String getField() {
    return this.field;
  }

  public Summary setField(String field) {
    this.field = field;
    return this;
  }

  public void unsetField() {
    this.field = null;
  }

  public boolean isSetField() {
    return this.field != null;
  }

  public void setFieldIsSet(boolean value) {
    if (!value) {
      this.field = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public Summary setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public int getLen() {
    return this.len;
  }

  public Summary setLen(int len) {
    this.len = len;
    setLenIsSet(true);
    return this;
  }

  public void unsetLen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEN_ISSET_ID);
  }

  public boolean isSetLen() {
    return EncodingUtils.testBit(__isset_bitfield, __LEN_ISSET_ID);
  }

  public void setLenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEN_ISSET_ID, value);
  }

  public String getElement() {
    return this.element;
  }

  public Summary setElement(String element) {
    this.element = element;
    return this;
  }

  public void unsetElement() {
    this.element = null;
  }

  public boolean isSetElement() {
    return this.element != null;
  }

  public void setElementIsSet(boolean value) {
    if (!value) {
      this.element = null;
    }
  }

  public String getEllipsis() {
    return this.ellipsis;
  }

  public Summary setEllipsis(String ellipsis) {
    this.ellipsis = ellipsis;
    return this;
  }

  public void unsetEllipsis() {
    this.ellipsis = null;
  }

  public boolean isSetEllipsis() {
    return this.ellipsis != null;
  }

  public void setEllipsisIsSet(boolean value) {
    if (!value) {
      this.ellipsis = null;
    }
  }

  public int getSnippet() {
    return this.snippet;
  }

  public Summary setSnippet(int snippet) {
    this.snippet = snippet;
    setSnippetIsSet(true);
    return this;
  }

  public void unsetSnippet() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SNIPPET_ISSET_ID);
  }

  public boolean isSetSnippet() {
    return EncodingUtils.testBit(__isset_bitfield, __SNIPPET_ISSET_ID);
  }

  public void setSnippetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SNIPPET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case APP:
      if (value == null) {
        unsetApp();
      } else {
        setApp((com.aliyun.opensearch.sdk.generated.commons.AppReference)value);
      }
      break;

    case FIELD:
      if (value == null) {
        unsetField();
      } else {
        setField((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case LEN:
      if (value == null) {
        unsetLen();
      } else {
        setLen((Integer)value);
      }
      break;

    case ELEMENT:
      if (value == null) {
        unsetElement();
      } else {
        setElement((String)value);
      }
      break;

    case ELLIPSIS:
      if (value == null) {
        unsetEllipsis();
      } else {
        setEllipsis((String)value);
      }
      break;

    case SNIPPET:
      if (value == null) {
        unsetSnippet();
      } else {
        setSnippet((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case APP:
      return getApp();

    case FIELD:
      return getField();

    case GROUP:
      return getGroup();

    case LEN:
      return getLen();

    case ELEMENT:
      return getElement();

    case ELLIPSIS:
      return getEllipsis();

    case SNIPPET:
      return getSnippet();

    }
    throw new IllegalStateException();
  }

  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case APP:
      return isSetApp();
    case FIELD:
      return isSetField();
    case GROUP:
      return isSetGroup();
    case LEN:
      return isSetLen();
    case ELEMENT:
      return isSetElement();
    case ELLIPSIS:
      return isSetEllipsis();
    case SNIPPET:
      return isSetSnippet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Summary)
      return this.equals((Summary)that);
    return false;
  }

  public boolean equals(Summary that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_app = true && this.isSetApp();
    boolean that_present_app = true && that.isSetApp();
    if (this_present_app || that_present_app) {
      if (!(this_present_app && that_present_app))
        return false;
      if (!this.app.equals(that.app))
        return false;
    }

    boolean this_present_field = true && this.isSetField();
    boolean that_present_field = true && that.isSetField();
    if (this_present_field || that_present_field) {
      if (!(this_present_field && that_present_field))
        return false;
      if (!this.field.equals(that.field))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_len = true && this.isSetLen();
    boolean that_present_len = true && that.isSetLen();
    if (this_present_len || that_present_len) {
      if (!(this_present_len && that_present_len))
        return false;
      if (this.len != that.len)
        return false;
    }

    boolean this_present_element = true && this.isSetElement();
    boolean that_present_element = true && that.isSetElement();
    if (this_present_element || that_present_element) {
      if (!(this_present_element && that_present_element))
        return false;
      if (!this.element.equals(that.element))
        return false;
    }

    boolean this_present_ellipsis = true && this.isSetEllipsis();
    boolean that_present_ellipsis = true && that.isSetEllipsis();
    if (this_present_ellipsis || that_present_ellipsis) {
      if (!(this_present_ellipsis && that_present_ellipsis))
        return false;
      if (!this.ellipsis.equals(that.ellipsis))
        return false;
    }

    boolean this_present_snippet = true && this.isSetSnippet();
    boolean that_present_snippet = true && that.isSetSnippet();
    if (this_present_snippet || that_present_snippet) {
      if (!(this_present_snippet && that_present_snippet))
        return false;
      if (this.snippet != that.snippet)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_app = true && (isSetApp());
    list.add(present_app);
    if (present_app)
      list.add(app);

    boolean present_field = true && (isSetField());
    list.add(present_field);
    if (present_field)
      list.add(field);

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_len = true && (isSetLen());
    list.add(present_len);
    if (present_len)
      list.add(len);

    boolean present_element = true && (isSetElement());
    list.add(present_element);
    if (present_element)
      list.add(element);

    boolean present_ellipsis = true && (isSetEllipsis());
    list.add(present_ellipsis);
    if (present_ellipsis)
      list.add(ellipsis);

    boolean present_snippet = true && (isSetSnippet());
    list.add(present_snippet);
    if (present_snippet)
      list.add(snippet);

    return list.hashCode();
  }

  @Override
  public int compareTo(Summary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp()).compareTo(other.isSetApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, other.app);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLen()).compareTo(other.isSetLen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.len, other.len);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetElement()).compareTo(other.isSetElement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetElement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.element, other.element);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEllipsis()).compareTo(other.isSetEllipsis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEllipsis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ellipsis, other.ellipsis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnippet()).compareTo(other.isSetSnippet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnippet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snippet, other.snippet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Summary(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetApp()) {
      if (!first) sb.append(", ");
      sb.append("app:");
      if (this.app == null) {
        sb.append("null");
      } else {
        sb.append(this.app);
      }
      first = false;
    }
    if (isSetField()) {
      if (!first) sb.append(", ");
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetLen()) {
      if (!first) sb.append(", ");
      sb.append("len:");
      sb.append(this.len);
      first = false;
    }
    if (isSetElement()) {
      if (!first) sb.append(", ");
      sb.append("element:");
      if (this.element == null) {
        sb.append("null");
      } else {
        sb.append(this.element);
      }
      first = false;
    }
    if (isSetEllipsis()) {
      if (!first) sb.append(", ");
      sb.append("ellipsis:");
      if (this.ellipsis == null) {
        sb.append("null");
      } else {
        sb.append(this.ellipsis);
      }
      first = false;
    }
    if (isSetSnippet()) {
      if (!first) sb.append(", ");
      sb.append("snippet:");
      sb.append(this.snippet);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (app != null) {
      app.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SummaryStandardSchemeFactory implements SchemeFactory {
    public SummaryStandardScheme getScheme() {
      return new SummaryStandardScheme();
    }
  }

  private static class SummaryStandardScheme extends StandardScheme<Summary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Summary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.app = new com.aliyun.opensearch.sdk.generated.commons.AppReference();
              struct.app.read(iprot);
              struct.setAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field = iprot.readString();
              struct.setFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.len = iprot.readI32();
              struct.setLenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ELEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.element = iprot.readString();
              struct.setElementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ELLIPSIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ellipsis = iprot.readString();
              struct.setEllipsisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SNIPPET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.snippet = iprot.readI32();
              struct.setSnippetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Summary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.app != null) {
        if (struct.isSetApp()) {
          oprot.writeFieldBegin(APP_FIELD_DESC);
          struct.app.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.field != null) {
        if (struct.isSetField()) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLen()) {
        oprot.writeFieldBegin(LEN_FIELD_DESC);
        oprot.writeI32(struct.len);
        oprot.writeFieldEnd();
      }
      if (struct.element != null) {
        if (struct.isSetElement()) {
          oprot.writeFieldBegin(ELEMENT_FIELD_DESC);
          oprot.writeString(struct.element);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ellipsis != null) {
        if (struct.isSetEllipsis()) {
          oprot.writeFieldBegin(ELLIPSIS_FIELD_DESC);
          oprot.writeString(struct.ellipsis);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSnippet()) {
        oprot.writeFieldBegin(SNIPPET_FIELD_DESC);
        oprot.writeI32(struct.snippet);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SummaryTupleSchemeFactory implements SchemeFactory {
    public SummaryTupleScheme getScheme() {
      return new SummaryTupleScheme();
    }
  }

  private static class SummaryTupleScheme extends TupleScheme<Summary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Summary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetApp()) {
        optionals.set(1);
      }
      if (struct.isSetField()) {
        optionals.set(2);
      }
      if (struct.isSetGroup()) {
        optionals.set(3);
      }
      if (struct.isSetLen()) {
        optionals.set(4);
      }
      if (struct.isSetElement()) {
        optionals.set(5);
      }
      if (struct.isSetEllipsis()) {
        optionals.set(6);
      }
      if (struct.isSetSnippet()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetApp()) {
        struct.app.write(oprot);
      }
      if (struct.isSetField()) {
        oprot.writeString(struct.field);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetLen()) {
        oprot.writeI32(struct.len);
      }
      if (struct.isSetElement()) {
        oprot.writeString(struct.element);
      }
      if (struct.isSetEllipsis()) {
        oprot.writeString(struct.ellipsis);
      }
      if (struct.isSetSnippet()) {
        oprot.writeI32(struct.snippet);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Summary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.app = new com.aliyun.opensearch.sdk.generated.commons.AppReference();
        struct.app.read(iprot);
        struct.setAppIsSet(true);
      }
      if (incoming.get(2)) {
        struct.field = iprot.readString();
        struct.setFieldIsSet(true);
      }
      if (incoming.get(3)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(4)) {
        struct.len = iprot.readI32();
        struct.setLenIsSet(true);
      }
      if (incoming.get(5)) {
        struct.element = iprot.readString();
        struct.setElementIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ellipsis = iprot.readString();
        struct.setEllipsisIsSet(true);
      }
      if (incoming.get(7)) {
        struct.snippet = iprot.readI32();
        struct.setSnippetIsSet(true);
      }
    }
  }

}

