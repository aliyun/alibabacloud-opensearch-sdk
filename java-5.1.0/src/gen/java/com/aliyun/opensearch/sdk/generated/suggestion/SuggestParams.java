/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.suggestion;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 下拉提示参数
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-04-15")
public class SuggestParams implements org.apache.thrift.TBase<SuggestParams, SuggestParams._Fields>, java.io.Serializable, Cloneable, Comparable<SuggestParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SuggestParams");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("hits", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RE_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("reSearch", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CUSTOM_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("customParams", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SuggestParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SuggestParamsTupleSchemeFactory());
  }

  /**
   * 搜索关键词
   */
  public String query; // required
  /**
   * 下拉提示条数
   */
  public int hits; // optional
  /**
   * 用来标识发起当前下拉提示请求的终端用户。
   * 建议跟搜索请求中userId参数保持一致。
   */
  public String userId; // optional
  /**
   * 重查策略
   * 
   * @see ReSearch
   */
  public ReSearch reSearch; // optional
  /**
   * 自定义参数
   */
  public Map<String,String> customParams; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 搜索关键词
     */
    QUERY((short)1, "query"),
    /**
     * 下拉提示条数
     */
    HITS((short)3, "hits"),
    /**
     * 用来标识发起当前下拉提示请求的终端用户。
     * 建议跟搜索请求中userId参数保持一致。
     */
    USER_ID((short)5, "userId"),
    /**
     * 重查策略
     * 
     * @see ReSearch
     */
    RE_SEARCH((short)7, "reSearch"),
    /**
     * 自定义参数
     */
    CUSTOM_PARAMS((short)9, "customParams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 3: // HITS
          return HITS;
        case 5: // USER_ID
          return USER_ID;
        case 7: // RE_SEARCH
          return RE_SEARCH;
        case 9: // CUSTOM_PARAMS
          return CUSTOM_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HITS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HITS,_Fields.USER_ID,_Fields.RE_SEARCH,_Fields.CUSTOM_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HITS, new org.apache.thrift.meta_data.FieldMetaData("hits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RE_SEARCH, new org.apache.thrift.meta_data.FieldMetaData("reSearch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReSearch.class)));
    tmpMap.put(_Fields.CUSTOM_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("customParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SuggestParams.class, metaDataMap);
  }

  public SuggestParams() {
    this.hits = 10;

  }

  public SuggestParams(
    String query)
  {
    this();
    this.query = query;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SuggestParams(SuggestParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    this.hits = other.hits;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetReSearch()) {
      this.reSearch = other.reSearch;
    }
    if (other.isSetCustomParams()) {
      Map<String,String> __this__customParams = new HashMap<String,String>(other.customParams);
      this.customParams = __this__customParams;
    }
  }

  public SuggestParams deepCopy() {
    return new SuggestParams(this);
  }

  @Override
  public void clear() {
    this.query = null;
    this.hits = 10;

    this.userId = null;
    this.reSearch = null;
    this.customParams = null;
  }

  /**
   * 搜索关键词
   */
  public String getQuery() {
    return this.query;
  }

  /**
   * 搜索关键词
   */
  public SuggestParams setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  /**
   * 下拉提示条数
   */
  public int getHits() {
    return this.hits;
  }

  /**
   * 下拉提示条数
   */
  public SuggestParams setHits(int hits) {
    this.hits = hits;
    setHitsIsSet(true);
    return this;
  }

  public void unsetHits() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HITS_ISSET_ID);
  }

  /** Returns true if field hits is set (has been assigned a value) and false otherwise */
  public boolean isSetHits() {
    return EncodingUtils.testBit(__isset_bitfield, __HITS_ISSET_ID);
  }

  public void setHitsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HITS_ISSET_ID, value);
  }

  /**
   * 用来标识发起当前下拉提示请求的终端用户。
   * 建议跟搜索请求中userId参数保持一致。
   */
  public String getUserId() {
    return this.userId;
  }

  /**
   * 用来标识发起当前下拉提示请求的终端用户。
   * 建议跟搜索请求中userId参数保持一致。
   */
  public SuggestParams setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  /**
   * 重查策略
   * 
   * @see ReSearch
   */
  public ReSearch getReSearch() {
    return this.reSearch;
  }

  /**
   * 重查策略
   * 
   * @see ReSearch
   */
  public SuggestParams setReSearch(ReSearch reSearch) {
    this.reSearch = reSearch;
    return this;
  }

  public void unsetReSearch() {
    this.reSearch = null;
  }

  /** Returns true if field reSearch is set (has been assigned a value) and false otherwise */
  public boolean isSetReSearch() {
    return this.reSearch != null;
  }

  public void setReSearchIsSet(boolean value) {
    if (!value) {
      this.reSearch = null;
    }
  }

  public int getCustomParamsSize() {
    return (this.customParams == null) ? 0 : this.customParams.size();
  }

  public void putToCustomParams(String key, String val) {
    if (this.customParams == null) {
      this.customParams = new HashMap<String,String>();
    }
    this.customParams.put(key, val);
  }

  /**
   * 自定义参数
   */
  public Map<String,String> getCustomParams() {
    return this.customParams;
  }

  /**
   * 自定义参数
   */
  public SuggestParams setCustomParams(Map<String,String> customParams) {
    this.customParams = customParams;
    return this;
  }

  public void unsetCustomParams() {
    this.customParams = null;
  }

  /** Returns true if field customParams is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomParams() {
    return this.customParams != null;
  }

  public void setCustomParamsIsSet(boolean value) {
    if (!value) {
      this.customParams = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case HITS:
      if (value == null) {
        unsetHits();
      } else {
        setHits((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case RE_SEARCH:
      if (value == null) {
        unsetReSearch();
      } else {
        setReSearch((ReSearch)value);
      }
      break;

    case CUSTOM_PARAMS:
      if (value == null) {
        unsetCustomParams();
      } else {
        setCustomParams((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case HITS:
      return getHits();

    case USER_ID:
      return getUserId();

    case RE_SEARCH:
      return getReSearch();

    case CUSTOM_PARAMS:
      return getCustomParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case HITS:
      return isSetHits();
    case USER_ID:
      return isSetUserId();
    case RE_SEARCH:
      return isSetReSearch();
    case CUSTOM_PARAMS:
      return isSetCustomParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SuggestParams)
      return this.equals((SuggestParams)that);
    return false;
  }

  public boolean equals(SuggestParams that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_hits = true && this.isSetHits();
    boolean that_present_hits = true && that.isSetHits();
    if (this_present_hits || that_present_hits) {
      if (!(this_present_hits && that_present_hits))
        return false;
      if (this.hits != that.hits)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_reSearch = true && this.isSetReSearch();
    boolean that_present_reSearch = true && that.isSetReSearch();
    if (this_present_reSearch || that_present_reSearch) {
      if (!(this_present_reSearch && that_present_reSearch))
        return false;
      if (!this.reSearch.equals(that.reSearch))
        return false;
    }

    boolean this_present_customParams = true && this.isSetCustomParams();
    boolean that_present_customParams = true && that.isSetCustomParams();
    if (this_present_customParams || that_present_customParams) {
      if (!(this_present_customParams && that_present_customParams))
        return false;
      if (!this.customParams.equals(that.customParams))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_query = true && (isSetQuery());
    list.add(present_query);
    if (present_query)
      list.add(query);

    boolean present_hits = true && (isSetHits());
    list.add(present_hits);
    if (present_hits)
      list.add(hits);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_reSearch = true && (isSetReSearch());
    list.add(present_reSearch);
    if (present_reSearch)
      list.add(reSearch.getValue());

    boolean present_customParams = true && (isSetCustomParams());
    list.add(present_customParams);
    if (present_customParams)
      list.add(customParams);

    return list.hashCode();
  }

  @Override
  public int compareTo(SuggestParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHits()).compareTo(other.isSetHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hits, other.hits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReSearch()).compareTo(other.isSetReSearch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReSearch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reSearch, other.reSearch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomParams()).compareTo(other.isSetCustomParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customParams, other.customParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SuggestParams(");
    boolean first = true;

    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (isSetHits()) {
      if (!first) sb.append(", ");
      sb.append("hits:");
      sb.append(this.hits);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetReSearch()) {
      if (!first) sb.append(", ");
      sb.append("reSearch:");
      if (this.reSearch == null) {
        sb.append("null");
      } else {
        sb.append(this.reSearch);
      }
      first = false;
    }
    if (isSetCustomParams()) {
      if (!first) sb.append(", ");
      sb.append("customParams:");
      if (this.customParams == null) {
        sb.append("null");
      } else {
        sb.append(this.customParams);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SuggestParamsStandardSchemeFactory implements SchemeFactory {
    public SuggestParamsStandardScheme getScheme() {
      return new SuggestParamsStandardScheme();
    }
  }

  private static class SuggestParamsStandardScheme extends StandardScheme<SuggestParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SuggestParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hits = iprot.readI32();
              struct.setHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RE_SEARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reSearch = com.aliyun.opensearch.sdk.generated.suggestion.ReSearch.findByValue(iprot.readI32());
              struct.setReSearchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUSTOM_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.customParams = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.customParams.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setCustomParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SuggestParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(struct.query);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHits()) {
        oprot.writeFieldBegin(HITS_FIELD_DESC);
        oprot.writeI32(struct.hits);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reSearch != null) {
        if (struct.isSetReSearch()) {
          oprot.writeFieldBegin(RE_SEARCH_FIELD_DESC);
          oprot.writeI32(struct.reSearch.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.customParams != null) {
        if (struct.isSetCustomParams()) {
          oprot.writeFieldBegin(CUSTOM_PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.customParams.size()));
            for (Map.Entry<String, String> _iter4 : struct.customParams.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SuggestParamsTupleSchemeFactory implements SchemeFactory {
    public SuggestParamsTupleScheme getScheme() {
      return new SuggestParamsTupleScheme();
    }
  }

  private static class SuggestParamsTupleScheme extends TupleScheme<SuggestParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SuggestParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.query);
      BitSet optionals = new BitSet();
      if (struct.isSetHits()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetReSearch()) {
        optionals.set(2);
      }
      if (struct.isSetCustomParams()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetHits()) {
        oprot.writeI32(struct.hits);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetReSearch()) {
        oprot.writeI32(struct.reSearch.getValue());
      }
      if (struct.isSetCustomParams()) {
        {
          oprot.writeI32(struct.customParams.size());
          for (Map.Entry<String, String> _iter5 : struct.customParams.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SuggestParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.query = iprot.readString();
      struct.setQueryIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.hits = iprot.readI32();
        struct.setHitsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reSearch = com.aliyun.opensearch.sdk.generated.suggestion.ReSearch.findByValue(iprot.readI32());
        struct.setReSearchIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.customParams = new HashMap<String,String>(2*_map6.size);
          String _key7;
          String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.customParams.put(_key7, _val8);
          }
        }
        struct.setCustomParamsIsSet(true);
      }
    }
  }

}

