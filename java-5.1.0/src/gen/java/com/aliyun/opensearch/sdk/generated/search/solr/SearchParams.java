/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search.solr;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class SearchParams implements org.apache.thrift.TBase<SearchParams, SearchParams._Fields>, java.io.Serializable, Cloneable, Comparable<SearchParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchParams");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("app_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("sort", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField FACET_FIELD_DESC = new org.apache.thrift.protocol.TField("facet", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("highlight", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField TIME_ALLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("timeAllowed", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchParamsTupleSchemeFactory());
  }

  private String query; // required
  private String app_name; // required
  private Map<String,List<String>> param; // optional
  private SearchFormat format; // optional
  private int start; // optional
  private int rows; // optional
  private Map<String,Order> sort; // optional
  private Facet facet; // optional
  private Highlight highlight; // optional
  private int timeAllowed; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    APP_NAME((short)2, "app_name"),
    PARAM((short)3, "param"),
    /**
     * 
     * @see SearchFormat
     */
    FORMAT((short)4, "format"),
    START((short)5, "start"),
    ROWS((short)6, "rows"),
    SORT((short)7, "sort"),
    FACET((short)8, "facet"),
    HIGHLIGHT((short)9, "highlight"),
    TIME_ALLOWED((short)10, "timeAllowed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // APP_NAME
          return APP_NAME;
        case 3: // PARAM
          return PARAM;
        case 4: // FORMAT
          return FORMAT;
        case 5: // START
          return START;
        case 6: // ROWS
          return ROWS;
        case 7: // SORT
          return SORT;
        case 8: // FACET
          return FACET;
        case 9: // HIGHLIGHT
          return HIGHLIGHT;
        case 10: // TIME_ALLOWED
          return TIME_ALLOWED;
        default:
          return null;
      }
    }

    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __TIMEALLOWED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARAM,_Fields.FORMAT,_Fields.START,_Fields.ROWS,_Fields.SORT,_Fields.FACET,_Fields.HIGHLIGHT,_Fields.TIME_ALLOWED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("app_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SearchFormat.class)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SORT, new org.apache.thrift.meta_data.FieldMetaData("sort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Order.class))));
    tmpMap.put(_Fields.FACET, new org.apache.thrift.meta_data.FieldMetaData("facet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Facet.class)));
    tmpMap.put(_Fields.HIGHLIGHT, new org.apache.thrift.meta_data.FieldMetaData("highlight", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Highlight.class)));
    tmpMap.put(_Fields.TIME_ALLOWED, new org.apache.thrift.meta_data.FieldMetaData("timeAllowed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchParams.class, metaDataMap);
  }

  public SearchParams() {
  }

  public SearchParams(
    String query,
    String app_name)
  {
    this();
    this.query = query;
    this.app_name = app_name;
  }

  public SearchParams(SearchParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetApp_name()) {
      this.app_name = other.app_name;
    }
    if (other.isSetParam()) {
      Map<String,List<String>> __this__param = new HashMap<String,List<String>>(other.param.size());
      for (Map.Entry<String, List<String>> other_element : other.param.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__param_copy_key = other_element_key;

        List<String> __this__param_copy_value = new ArrayList<String>(other_element_value);

        __this__param.put(__this__param_copy_key, __this__param_copy_value);
      }
      this.param = __this__param;
    }
    if (other.isSetFormat()) {
      this.format = other.format;
    }
    this.start = other.start;
    this.rows = other.rows;
    if (other.isSetSort()) {
      Map<String,Order> __this__sort = new HashMap<String,Order>(other.sort.size());
      for (Map.Entry<String, Order> other_element : other.sort.entrySet()) {

        String other_element_key = other_element.getKey();
        Order other_element_value = other_element.getValue();

        String __this__sort_copy_key = other_element_key;

        Order __this__sort_copy_value = other_element_value;

        __this__sort.put(__this__sort_copy_key, __this__sort_copy_value);
      }
      this.sort = __this__sort;
    }
    if (other.isSetFacet()) {
      this.facet = new Facet(other.facet);
    }
    if (other.isSetHighlight()) {
      this.highlight = new Highlight(other.highlight);
    }
    this.timeAllowed = other.timeAllowed;
  }

  public SearchParams deepCopy() {
    return new SearchParams(this);
  }

  @Override
  public void clear() {
    this.query = null;
    this.app_name = null;
    this.param = null;
    this.format = null;
    setStartIsSet(false);
    this.start = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.sort = null;
    this.facet = null;
    this.highlight = null;
    setTimeAllowedIsSet(false);
    this.timeAllowed = 0;
  }

  public String getQuery() {
    return this.query;
  }

  public SearchParams setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public String getApp_name() {
    return this.app_name;
  }

  public SearchParams setApp_name(String app_name) {
    this.app_name = app_name;
    return this;
  }

  public void unsetApp_name() {
    this.app_name = null;
  }

  public boolean isSetApp_name() {
    return this.app_name != null;
  }

  public void setApp_nameIsSet(boolean value) {
    if (!value) {
      this.app_name = null;
    }
  }

  public int getParamSize() {
    return (this.param == null) ? 0 : this.param.size();
  }

  public void putToParam(String key, List<String> val) {
    if (this.param == null) {
      this.param = new HashMap<String,List<String>>();
    }
    this.param.put(key, val);
  }

  public Map<String,List<String>> getParam() {
    return this.param;
  }

  public SearchParams setParam(Map<String,List<String>> param) {
    this.param = param;
    return this;
  }

  public void unsetParam() {
    this.param = null;
  }

  public boolean isSetParam() {
    return this.param != null;
  }

  public void setParamIsSet(boolean value) {
    if (!value) {
      this.param = null;
    }
  }

  public SearchFormat getFormat() {
    return this.format;
  }

  public SearchParams setFormat(SearchFormat format) {
    this.format = format;
    return this;
  }

  public void unsetFormat() {
    this.format = null;
  }

  public boolean isSetFormat() {
    return this.format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.format = null;
    }
  }

  public int getStart() {
    return this.start;
  }

  public SearchParams setStart(int start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  public boolean isSetStart() {
    return EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public SearchParams setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getSortSize() {
    return (this.sort == null) ? 0 : this.sort.size();
  }

  public void putToSort(String key, Order val) {
    if (this.sort == null) {
      this.sort = new HashMap<String,Order>();
    }
    this.sort.put(key, val);
  }

  public Map<String,Order> getSort() {
    return this.sort;
  }

  public SearchParams setSort(Map<String,Order> sort) {
    this.sort = sort;
    return this;
  }

  public void unsetSort() {
    this.sort = null;
  }

  public boolean isSetSort() {
    return this.sort != null;
  }

  public void setSortIsSet(boolean value) {
    if (!value) {
      this.sort = null;
    }
  }

  public Facet getFacet() {
    return this.facet;
  }

  public SearchParams setFacet(Facet facet) {
    this.facet = facet;
    return this;
  }

  public void unsetFacet() {
    this.facet = null;
  }

  public boolean isSetFacet() {
    return this.facet != null;
  }

  public void setFacetIsSet(boolean value) {
    if (!value) {
      this.facet = null;
    }
  }

  public Highlight getHighlight() {
    return this.highlight;
  }

  public SearchParams setHighlight(Highlight highlight) {
    this.highlight = highlight;
    return this;
  }

  public void unsetHighlight() {
    this.highlight = null;
  }

  public boolean isSetHighlight() {
    return this.highlight != null;
  }

  public void setHighlightIsSet(boolean value) {
    if (!value) {
      this.highlight = null;
    }
  }

  public int getTimeAllowed() {
    return this.timeAllowed;
  }

  public SearchParams setTimeAllowed(int timeAllowed) {
    this.timeAllowed = timeAllowed;
    setTimeAllowedIsSet(true);
    return this;
  }

  public void unsetTimeAllowed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEALLOWED_ISSET_ID);
  }

  public boolean isSetTimeAllowed() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEALLOWED_ISSET_ID);
  }

  public void setTimeAllowedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEALLOWED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetApp_name();
      } else {
        setApp_name((String)value);
      }
      break;

    case PARAM:
      if (value == null) {
        unsetParam();
      } else {
        setParam((Map<String,List<String>>)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((SearchFormat)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case SORT:
      if (value == null) {
        unsetSort();
      } else {
        setSort((Map<String,Order>)value);
      }
      break;

    case FACET:
      if (value == null) {
        unsetFacet();
      } else {
        setFacet((Facet)value);
      }
      break;

    case HIGHLIGHT:
      if (value == null) {
        unsetHighlight();
      } else {
        setHighlight((Highlight)value);
      }
      break;

    case TIME_ALLOWED:
      if (value == null) {
        unsetTimeAllowed();
      } else {
        setTimeAllowed((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case APP_NAME:
      return getApp_name();

    case PARAM:
      return getParam();

    case FORMAT:
      return getFormat();

    case START:
      return getStart();

    case ROWS:
      return getRows();

    case SORT:
      return getSort();

    case FACET:
      return getFacet();

    case HIGHLIGHT:
      return getHighlight();

    case TIME_ALLOWED:
      return getTimeAllowed();

    }
    throw new IllegalStateException();
  }

  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case APP_NAME:
      return isSetApp_name();
    case PARAM:
      return isSetParam();
    case FORMAT:
      return isSetFormat();
    case START:
      return isSetStart();
    case ROWS:
      return isSetRows();
    case SORT:
      return isSetSort();
    case FACET:
      return isSetFacet();
    case HIGHLIGHT:
      return isSetHighlight();
    case TIME_ALLOWED:
      return isSetTimeAllowed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchParams)
      return this.equals((SearchParams)that);
    return false;
  }

  public boolean equals(SearchParams that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_app_name = true && this.isSetApp_name();
    boolean that_present_app_name = true && that.isSetApp_name();
    if (this_present_app_name || that_present_app_name) {
      if (!(this_present_app_name && that_present_app_name))
        return false;
      if (!this.app_name.equals(that.app_name))
        return false;
    }

    boolean this_present_param = true && this.isSetParam();
    boolean that_present_param = true && that.isSetParam();
    if (this_present_param || that_present_param) {
      if (!(this_present_param && that_present_param))
        return false;
      if (!this.param.equals(that.param))
        return false;
    }

    boolean this_present_format = true && this.isSetFormat();
    boolean that_present_format = true && that.isSetFormat();
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (!this.format.equals(that.format))
        return false;
    }

    boolean this_present_start = true && this.isSetStart();
    boolean that_present_start = true && that.isSetStart();
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_rows = true && this.isSetRows();
    boolean that_present_rows = true && that.isSetRows();
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_sort = true && this.isSetSort();
    boolean that_present_sort = true && that.isSetSort();
    if (this_present_sort || that_present_sort) {
      if (!(this_present_sort && that_present_sort))
        return false;
      if (!this.sort.equals(that.sort))
        return false;
    }

    boolean this_present_facet = true && this.isSetFacet();
    boolean that_present_facet = true && that.isSetFacet();
    if (this_present_facet || that_present_facet) {
      if (!(this_present_facet && that_present_facet))
        return false;
      if (!this.facet.equals(that.facet))
        return false;
    }

    boolean this_present_highlight = true && this.isSetHighlight();
    boolean that_present_highlight = true && that.isSetHighlight();
    if (this_present_highlight || that_present_highlight) {
      if (!(this_present_highlight && that_present_highlight))
        return false;
      if (!this.highlight.equals(that.highlight))
        return false;
    }

    boolean this_present_timeAllowed = true && this.isSetTimeAllowed();
    boolean that_present_timeAllowed = true && that.isSetTimeAllowed();
    if (this_present_timeAllowed || that_present_timeAllowed) {
      if (!(this_present_timeAllowed && that_present_timeAllowed))
        return false;
      if (this.timeAllowed != that.timeAllowed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_query = true && (isSetQuery());
    list.add(present_query);
    if (present_query)
      list.add(query);

    boolean present_app_name = true && (isSetApp_name());
    list.add(present_app_name);
    if (present_app_name)
      list.add(app_name);

    boolean present_param = true && (isSetParam());
    list.add(present_param);
    if (present_param)
      list.add(param);

    boolean present_format = true && (isSetFormat());
    list.add(present_format);
    if (present_format)
      list.add(format.getValue());

    boolean present_start = true && (isSetStart());
    list.add(present_start);
    if (present_start)
      list.add(start);

    boolean present_rows = true && (isSetRows());
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_sort = true && (isSetSort());
    list.add(present_sort);
    if (present_sort)
      list.add(sort);

    boolean present_facet = true && (isSetFacet());
    list.add(present_facet);
    if (present_facet)
      list.add(facet);

    boolean present_highlight = true && (isSetHighlight());
    list.add(present_highlight);
    if (present_highlight)
      list.add(highlight);

    boolean present_timeAllowed = true && (isSetTimeAllowed());
    list.add(present_timeAllowed);
    if (present_timeAllowed)
      list.add(timeAllowed);

    return list.hashCode();
  }

  @Override
  public int compareTo(SearchParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp_name()).compareTo(other.isSetApp_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_name, other.app_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormat()).compareTo(other.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, other.format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort()).compareTo(other.isSetSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort, other.sort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacet()).compareTo(other.isSetFacet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.facet, other.facet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlight()).compareTo(other.isSetHighlight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlight, other.highlight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeAllowed()).compareTo(other.isSetTimeAllowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeAllowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeAllowed, other.timeAllowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchParams(");
    boolean first = true;

    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("app_name:");
    if (this.app_name == null) {
      sb.append("null");
    } else {
      sb.append(this.app_name);
    }
    first = false;
    if (isSetParam()) {
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
    }
    if (isSetFormat()) {
      if (!first) sb.append(", ");
      sb.append("format:");
      if (this.format == null) {
        sb.append("null");
      } else {
        sb.append(this.format);
      }
      first = false;
    }
    if (isSetStart()) {
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
    }
    if (isSetRows()) {
      if (!first) sb.append(", ");
      sb.append("rows:");
      sb.append(this.rows);
      first = false;
    }
    if (isSetSort()) {
      if (!first) sb.append(", ");
      sb.append("sort:");
      if (this.sort == null) {
        sb.append("null");
      } else {
        sb.append(this.sort);
      }
      first = false;
    }
    if (isSetFacet()) {
      if (!first) sb.append(", ");
      sb.append("facet:");
      if (this.facet == null) {
        sb.append("null");
      } else {
        sb.append(this.facet);
      }
      first = false;
    }
    if (isSetHighlight()) {
      if (!first) sb.append(", ");
      sb.append("highlight:");
      if (this.highlight == null) {
        sb.append("null");
      } else {
        sb.append(this.highlight);
      }
      first = false;
    }
    if (isSetTimeAllowed()) {
      if (!first) sb.append(", ");
      sb.append("timeAllowed:");
      sb.append(this.timeAllowed);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
    }
    if (app_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'app_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (facet != null) {
      facet.validate();
    }
    if (highlight != null) {
      highlight.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchParamsStandardSchemeFactory implements SchemeFactory {
    public SearchParamsStandardScheme getScheme() {
      return new SearchParamsStandardScheme();
    }
  }

  private static class SearchParamsStandardScheme extends StandardScheme<SearchParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.app_name = iprot.readString();
              struct.setApp_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.param = new HashMap<String,List<String>>(2*_map16.size);
                String _key17;
                List<String> _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                    _val18 = new ArrayList<String>(_list20.size);
                    String _elem21;
                    for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                    {
                      _elem21 = iprot.readString();
                      _val18.add(_elem21);
                    }
                    iprot.readListEnd();
                  }
                  struct.param.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format = com.aliyun.opensearch.sdk.generated.search.solr.SearchFormat.findByValue(iprot.readI32());
              struct.setFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start = iprot.readI32();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map23 = iprot.readMapBegin();
                struct.sort = new HashMap<String,Order>(2*_map23.size);
                String _key24;
                Order _val25;
                for (int _i26 = 0; _i26 < _map23.size; ++_i26)
                {
                  _key24 = iprot.readString();
                  _val25 = com.aliyun.opensearch.sdk.generated.search.solr.Order.findByValue(iprot.readI32());
                  struct.sort.put(_key24, _val25);
                }
                iprot.readMapEnd();
              }
              struct.setSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FACET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.facet = new Facet();
              struct.facet.read(iprot);
              struct.setFacetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HIGHLIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.highlight = new Highlight();
              struct.highlight.read(iprot);
              struct.setHighlightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIME_ALLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeAllowed = iprot.readI32();
              struct.setTimeAllowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(struct.query);
        oprot.writeFieldEnd();
      }
      if (struct.app_name != null) {
        oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
        oprot.writeString(struct.app_name);
        oprot.writeFieldEnd();
      }
      if (struct.param != null) {
        if (struct.isSetParam()) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.param.size()));
            for (Map.Entry<String, List<String>> _iter27 : struct.param.entrySet())
            {
              oprot.writeString(_iter27.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter27.getValue().size()));
                for (String _iter28 : _iter27.getValue())
                {
                  oprot.writeString(_iter28);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.format != null) {
        if (struct.isSetFormat()) {
          oprot.writeFieldBegin(FORMAT_FIELD_DESC);
          oprot.writeI32(struct.format.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStart()) {
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRows()) {
        oprot.writeFieldBegin(ROWS_FIELD_DESC);
        oprot.writeI32(struct.rows);
        oprot.writeFieldEnd();
      }
      if (struct.sort != null) {
        if (struct.isSetSort()) {
          oprot.writeFieldBegin(SORT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.sort.size()));
            for (Map.Entry<String, Order> _iter29 : struct.sort.entrySet())
            {
              oprot.writeString(_iter29.getKey());
              oprot.writeI32(_iter29.getValue().getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.facet != null) {
        if (struct.isSetFacet()) {
          oprot.writeFieldBegin(FACET_FIELD_DESC);
          struct.facet.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.highlight != null) {
        if (struct.isSetHighlight()) {
          oprot.writeFieldBegin(HIGHLIGHT_FIELD_DESC);
          struct.highlight.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimeAllowed()) {
        oprot.writeFieldBegin(TIME_ALLOWED_FIELD_DESC);
        oprot.writeI32(struct.timeAllowed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchParamsTupleSchemeFactory implements SchemeFactory {
    public SearchParamsTupleScheme getScheme() {
      return new SearchParamsTupleScheme();
    }
  }

  private static class SearchParamsTupleScheme extends TupleScheme<SearchParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.query);
      oprot.writeString(struct.app_name);
      BitSet optionals = new BitSet();
      if (struct.isSetParam()) {
        optionals.set(0);
      }
      if (struct.isSetFormat()) {
        optionals.set(1);
      }
      if (struct.isSetStart()) {
        optionals.set(2);
      }
      if (struct.isSetRows()) {
        optionals.set(3);
      }
      if (struct.isSetSort()) {
        optionals.set(4);
      }
      if (struct.isSetFacet()) {
        optionals.set(5);
      }
      if (struct.isSetHighlight()) {
        optionals.set(6);
      }
      if (struct.isSetTimeAllowed()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetParam()) {
        {
          oprot.writeI32(struct.param.size());
          for (Map.Entry<String, List<String>> _iter30 : struct.param.entrySet())
          {
            oprot.writeString(_iter30.getKey());
            {
              oprot.writeI32(_iter30.getValue().size());
              for (String _iter31 : _iter30.getValue())
              {
                oprot.writeString(_iter31);
              }
            }
          }
        }
      }
      if (struct.isSetFormat()) {
        oprot.writeI32(struct.format.getValue());
      }
      if (struct.isSetStart()) {
        oprot.writeI32(struct.start);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetSort()) {
        {
          oprot.writeI32(struct.sort.size());
          for (Map.Entry<String, Order> _iter32 : struct.sort.entrySet())
          {
            oprot.writeString(_iter32.getKey());
            oprot.writeI32(_iter32.getValue().getValue());
          }
        }
      }
      if (struct.isSetFacet()) {
        struct.facet.write(oprot);
      }
      if (struct.isSetHighlight()) {
        struct.highlight.write(oprot);
      }
      if (struct.isSetTimeAllowed()) {
        oprot.writeI32(struct.timeAllowed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.query = iprot.readString();
      struct.setQueryIsSet(true);
      struct.app_name = iprot.readString();
      struct.setApp_nameIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map33 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.param = new HashMap<String,List<String>>(2*_map33.size);
          String _key34;
          List<String> _val35;
          for (int _i36 = 0; _i36 < _map33.size; ++_i36)
          {
            _key34 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val35 = new ArrayList<String>(_list37.size);
              String _elem38;
              for (int _i39 = 0; _i39 < _list37.size; ++_i39)
              {
                _elem38 = iprot.readString();
                _val35.add(_elem38);
              }
            }
            struct.param.put(_key34, _val35);
          }
        }
        struct.setParamIsSet(true);
      }
      if (incoming.get(1)) {
        struct.format = com.aliyun.opensearch.sdk.generated.search.solr.SearchFormat.findByValue(iprot.readI32());
        struct.setFormatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start = iprot.readI32();
        struct.setStartIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sort = new HashMap<String,Order>(2*_map40.size);
          String _key41;
          Order _val42;
          for (int _i43 = 0; _i43 < _map40.size; ++_i43)
          {
            _key41 = iprot.readString();
            _val42 = com.aliyun.opensearch.sdk.generated.search.solr.Order.findByValue(iprot.readI32());
            struct.sort.put(_key41, _val42);
          }
        }
        struct.setSortIsSet(true);
      }
      if (incoming.get(5)) {
        struct.facet = new Facet();
        struct.facet.read(iprot);
        struct.setFacetIsSet(true);
      }
      if (incoming.get(6)) {
        struct.highlight = new Highlight();
        struct.highlight.read(iprot);
        struct.setHighlightIsSet(true);
      }
      if (incoming.get(7)) {
        struct.timeAllowed = iprot.readI32();
        struct.setTimeAllowedIsSet(true);
      }
    }
  }

}

