/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 排序相关度及表达式
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-04-10")
public class Rank implements org.apache.thrift.TBase<Rank, Rank._Fields>, java.io.Serializable, Cloneable, Comparable<Rank> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Rank");

  private static final org.apache.thrift.protocol.TField RE_RANK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("reRankSize", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FIRST_RANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstRankName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SECOND_RANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("secondRankName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SECOND_RANK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("secondRankType", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RankStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RankTupleSchemeFactory());
  }

  public int reRankSize; // optional
  /**
   * 设置粗排表达式名称
   * 
   */
  public String firstRankName; // optional
  /**
   * 设置精排表达式名称
   * 
   */
  public String secondRankName; // optional
  /**
   * 设置精排表达式类型
   * 
   * @see RankType
   */
  public RankType secondRankType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RE_RANK_SIZE((short)1, "reRankSize"),
    /**
     * 设置粗排表达式名称
     * 
     */
    FIRST_RANK_NAME((short)3, "firstRankName"),
    /**
     * 设置精排表达式名称
     * 
     */
    SECOND_RANK_NAME((short)5, "secondRankName"),
    /**
     * 设置精排表达式类型
     * 
     * @see RankType
     */
    SECOND_RANK_TYPE((short)7, "secondRankType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RE_RANK_SIZE
          return RE_RANK_SIZE;
        case 3: // FIRST_RANK_NAME
          return FIRST_RANK_NAME;
        case 5: // SECOND_RANK_NAME
          return SECOND_RANK_NAME;
        case 7: // SECOND_RANK_TYPE
          return SECOND_RANK_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RERANKSIZE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RE_RANK_SIZE,_Fields.FIRST_RANK_NAME,_Fields.SECOND_RANK_NAME,_Fields.SECOND_RANK_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RE_RANK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("reRankSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FIRST_RANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstRankName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECOND_RANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("secondRankName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECOND_RANK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("secondRankType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RankType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Rank.class, metaDataMap);
  }

  public Rank() {
    this.reRankSize = 200;

    this.secondRankType = com.aliyun.opensearch.sdk.generated.search.RankType.EXPRESSION;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Rank(Rank other) {
    __isset_bitfield = other.__isset_bitfield;
    this.reRankSize = other.reRankSize;
    if (other.isSetFirstRankName()) {
      this.firstRankName = other.firstRankName;
    }
    if (other.isSetSecondRankName()) {
      this.secondRankName = other.secondRankName;
    }
    if (other.isSetSecondRankType()) {
      this.secondRankType = other.secondRankType;
    }
  }

  public Rank deepCopy() {
    return new Rank(this);
  }

  @Override
  public void clear() {
    this.reRankSize = 200;

    this.firstRankName = null;
    this.secondRankName = null;
    this.secondRankType = com.aliyun.opensearch.sdk.generated.search.RankType.EXPRESSION;

  }

  public int getReRankSize() {
    return this.reRankSize;
  }

  public Rank setReRankSize(int reRankSize) {
    this.reRankSize = reRankSize;
    setReRankSizeIsSet(true);
    return this;
  }

  public void unsetReRankSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RERANKSIZE_ISSET_ID);
  }

  /** Returns true if field reRankSize is set (has been assigned a value) and false otherwise */
  public boolean isSetReRankSize() {
    return EncodingUtils.testBit(__isset_bitfield, __RERANKSIZE_ISSET_ID);
  }

  public void setReRankSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RERANKSIZE_ISSET_ID, value);
  }

  /**
   * 设置粗排表达式名称
   * 
   */
  public String getFirstRankName() {
    return this.firstRankName;
  }

  /**
   * 设置粗排表达式名称
   * 
   */
  public Rank setFirstRankName(String firstRankName) {
    this.firstRankName = firstRankName;
    return this;
  }

  public void unsetFirstRankName() {
    this.firstRankName = null;
  }

  /** Returns true if field firstRankName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstRankName() {
    return this.firstRankName != null;
  }

  public void setFirstRankNameIsSet(boolean value) {
    if (!value) {
      this.firstRankName = null;
    }
  }

  /**
   * 设置精排表达式名称
   * 
   */
  public String getSecondRankName() {
    return this.secondRankName;
  }

  /**
   * 设置精排表达式名称
   * 
   */
  public Rank setSecondRankName(String secondRankName) {
    this.secondRankName = secondRankName;
    return this;
  }

  public void unsetSecondRankName() {
    this.secondRankName = null;
  }

  /** Returns true if field secondRankName is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondRankName() {
    return this.secondRankName != null;
  }

  public void setSecondRankNameIsSet(boolean value) {
    if (!value) {
      this.secondRankName = null;
    }
  }

  /**
   * 设置精排表达式类型
   * 
   * @see RankType
   */
  public RankType getSecondRankType() {
    return this.secondRankType;
  }

  /**
   * 设置精排表达式类型
   * 
   * @see RankType
   */
  public Rank setSecondRankType(RankType secondRankType) {
    this.secondRankType = secondRankType;
    return this;
  }

  public void unsetSecondRankType() {
    this.secondRankType = null;
  }

  /** Returns true if field secondRankType is set (has been assigned a value) and false otherwise */
  public boolean isSetSecondRankType() {
    return this.secondRankType != null;
  }

  public void setSecondRankTypeIsSet(boolean value) {
    if (!value) {
      this.secondRankType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RE_RANK_SIZE:
      if (value == null) {
        unsetReRankSize();
      } else {
        setReRankSize((Integer)value);
      }
      break;

    case FIRST_RANK_NAME:
      if (value == null) {
        unsetFirstRankName();
      } else {
        setFirstRankName((String)value);
      }
      break;

    case SECOND_RANK_NAME:
      if (value == null) {
        unsetSecondRankName();
      } else {
        setSecondRankName((String)value);
      }
      break;

    case SECOND_RANK_TYPE:
      if (value == null) {
        unsetSecondRankType();
      } else {
        setSecondRankType((RankType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RE_RANK_SIZE:
      return getReRankSize();

    case FIRST_RANK_NAME:
      return getFirstRankName();

    case SECOND_RANK_NAME:
      return getSecondRankName();

    case SECOND_RANK_TYPE:
      return getSecondRankType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RE_RANK_SIZE:
      return isSetReRankSize();
    case FIRST_RANK_NAME:
      return isSetFirstRankName();
    case SECOND_RANK_NAME:
      return isSetSecondRankName();
    case SECOND_RANK_TYPE:
      return isSetSecondRankType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Rank)
      return this.equals((Rank)that);
    return false;
  }

  public boolean equals(Rank that) {
    if (that == null)
      return false;

    boolean this_present_reRankSize = true && this.isSetReRankSize();
    boolean that_present_reRankSize = true && that.isSetReRankSize();
    if (this_present_reRankSize || that_present_reRankSize) {
      if (!(this_present_reRankSize && that_present_reRankSize))
        return false;
      if (this.reRankSize != that.reRankSize)
        return false;
    }

    boolean this_present_firstRankName = true && this.isSetFirstRankName();
    boolean that_present_firstRankName = true && that.isSetFirstRankName();
    if (this_present_firstRankName || that_present_firstRankName) {
      if (!(this_present_firstRankName && that_present_firstRankName))
        return false;
      if (!this.firstRankName.equals(that.firstRankName))
        return false;
    }

    boolean this_present_secondRankName = true && this.isSetSecondRankName();
    boolean that_present_secondRankName = true && that.isSetSecondRankName();
    if (this_present_secondRankName || that_present_secondRankName) {
      if (!(this_present_secondRankName && that_present_secondRankName))
        return false;
      if (!this.secondRankName.equals(that.secondRankName))
        return false;
    }

    boolean this_present_secondRankType = true && this.isSetSecondRankType();
    boolean that_present_secondRankType = true && that.isSetSecondRankType();
    if (this_present_secondRankType || that_present_secondRankType) {
      if (!(this_present_secondRankType && that_present_secondRankType))
        return false;
      if (!this.secondRankType.equals(that.secondRankType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_reRankSize = true && (isSetReRankSize());
    list.add(present_reRankSize);
    if (present_reRankSize)
      list.add(reRankSize);

    boolean present_firstRankName = true && (isSetFirstRankName());
    list.add(present_firstRankName);
    if (present_firstRankName)
      list.add(firstRankName);

    boolean present_secondRankName = true && (isSetSecondRankName());
    list.add(present_secondRankName);
    if (present_secondRankName)
      list.add(secondRankName);

    boolean present_secondRankType = true && (isSetSecondRankType());
    list.add(present_secondRankType);
    if (present_secondRankType)
      list.add(secondRankType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Rank other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReRankSize()).compareTo(other.isSetReRankSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReRankSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reRankSize, other.reRankSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstRankName()).compareTo(other.isSetFirstRankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstRankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstRankName, other.firstRankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondRankName()).compareTo(other.isSetSecondRankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondRankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondRankName, other.secondRankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecondRankType()).compareTo(other.isSetSecondRankType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecondRankType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondRankType, other.secondRankType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Rank(");
    boolean first = true;

    if (isSetReRankSize()) {
      sb.append("reRankSize:");
      sb.append(this.reRankSize);
      first = false;
    }
    if (isSetFirstRankName()) {
      if (!first) sb.append(", ");
      sb.append("firstRankName:");
      if (this.firstRankName == null) {
        sb.append("null");
      } else {
        sb.append(this.firstRankName);
      }
      first = false;
    }
    if (isSetSecondRankName()) {
      if (!first) sb.append(", ");
      sb.append("secondRankName:");
      if (this.secondRankName == null) {
        sb.append("null");
      } else {
        sb.append(this.secondRankName);
      }
      first = false;
    }
    if (isSetSecondRankType()) {
      if (!first) sb.append(", ");
      sb.append("secondRankType:");
      if (this.secondRankType == null) {
        sb.append("null");
      } else {
        sb.append(this.secondRankType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RankStandardSchemeFactory implements SchemeFactory {
    public RankStandardScheme getScheme() {
      return new RankStandardScheme();
    }
  }

  private static class RankStandardScheme extends StandardScheme<Rank> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Rank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RE_RANK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reRankSize = iprot.readI32();
              struct.setReRankSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIRST_RANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstRankName = iprot.readString();
              struct.setFirstRankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SECOND_RANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secondRankName = iprot.readString();
              struct.setSecondRankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SECOND_RANK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.secondRankType = com.aliyun.opensearch.sdk.generated.search.RankType.findByValue(iprot.readI32());
              struct.setSecondRankTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Rank struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetReRankSize()) {
        oprot.writeFieldBegin(RE_RANK_SIZE_FIELD_DESC);
        oprot.writeI32(struct.reRankSize);
        oprot.writeFieldEnd();
      }
      if (struct.firstRankName != null) {
        if (struct.isSetFirstRankName()) {
          oprot.writeFieldBegin(FIRST_RANK_NAME_FIELD_DESC);
          oprot.writeString(struct.firstRankName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.secondRankName != null) {
        if (struct.isSetSecondRankName()) {
          oprot.writeFieldBegin(SECOND_RANK_NAME_FIELD_DESC);
          oprot.writeString(struct.secondRankName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.secondRankType != null) {
        if (struct.isSetSecondRankType()) {
          oprot.writeFieldBegin(SECOND_RANK_TYPE_FIELD_DESC);
          oprot.writeI32(struct.secondRankType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RankTupleSchemeFactory implements SchemeFactory {
    public RankTupleScheme getScheme() {
      return new RankTupleScheme();
    }
  }

  private static class RankTupleScheme extends TupleScheme<Rank> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Rank struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReRankSize()) {
        optionals.set(0);
      }
      if (struct.isSetFirstRankName()) {
        optionals.set(1);
      }
      if (struct.isSetSecondRankName()) {
        optionals.set(2);
      }
      if (struct.isSetSecondRankType()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetReRankSize()) {
        oprot.writeI32(struct.reRankSize);
      }
      if (struct.isSetFirstRankName()) {
        oprot.writeString(struct.firstRankName);
      }
      if (struct.isSetSecondRankName()) {
        oprot.writeString(struct.secondRankName);
      }
      if (struct.isSetSecondRankType()) {
        oprot.writeI32(struct.secondRankType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Rank struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.reRankSize = iprot.readI32();
        struct.setReRankSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.firstRankName = iprot.readString();
        struct.setFirstRankNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.secondRankName = iprot.readString();
        struct.setSecondRankNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.secondRankType = com.aliyun.opensearch.sdk.generated.search.RankType.findByValue(iprot.readI32());
        struct.setSecondRankTypeIsSet(true);
      }
    }
  }

}

