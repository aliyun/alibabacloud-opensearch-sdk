/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 精排聚合打散条件(final_distinct)
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2020-09-19")
public class FinalDistinct implements org.apache.thrift.TBase<FinalDistinct, FinalDistinct._Fields>, java.io.Serializable, Cloneable, Comparable<FinalDistinct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinalDistinct");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("keyList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("sort", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField SPECIAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("specialCount", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField CUSTOM_FINAL_DISTINCT_FIELD_DESC = new org.apache.thrift.protocol.TField("customFinalDistinct", org.apache.thrift.protocol.TType.MAP, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinalDistinctStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinalDistinctTupleSchemeFactory());
  }

  /**
   * 打散方式
   * 
   * @see FinalDistinctType
   */
  public FinalDistinctType type; // required
  /**
   * 指定打散的字段及抽取的个数
   */
  public List<FinalDistinctKey> keyList; // required
  /**
   * 档间排序字段
   */
  public List<String> sort; // optional
  /**
   * 特定字段值抽取的个数
   */
  public Map<String,Integer> specialCount; // optional
  /**
   * 自定义精排聚合打散条件字段
   */
  public Map<String,String> customFinalDistinct; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 打散方式
     * 
     * @see FinalDistinctType
     */
    TYPE((short)1, "type"),
    /**
     * 指定打散的字段及抽取的个数
     */
    KEY_LIST((short)3, "keyList"),
    /**
     * 档间排序字段
     */
    SORT((short)7, "sort"),
    /**
     * 特定字段值抽取的个数
     */
    SPECIAL_COUNT((short)9, "specialCount"),
    /**
     * 自定义精排聚合打散条件字段
     */
    CUSTOM_FINAL_DISTINCT((short)11, "customFinalDistinct");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 3: // KEY_LIST
          return KEY_LIST;
        case 7: // SORT
          return SORT;
        case 9: // SPECIAL_COUNT
          return SPECIAL_COUNT;
        case 11: // CUSTOM_FINAL_DISTINCT
          return CUSTOM_FINAL_DISTINCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SORT,_Fields.SPECIAL_COUNT,_Fields.CUSTOM_FINAL_DISTINCT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FinalDistinctType.class)));
    tmpMap.put(_Fields.KEY_LIST, new org.apache.thrift.meta_data.FieldMetaData("keyList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinalDistinctKey.class))));
    tmpMap.put(_Fields.SORT, new org.apache.thrift.meta_data.FieldMetaData("sort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SPECIAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("specialCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "int"))));
    tmpMap.put(_Fields.CUSTOM_FINAL_DISTINCT, new org.apache.thrift.meta_data.FieldMetaData("customFinalDistinct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinalDistinct.class, metaDataMap);
  }

  public FinalDistinct() {
  }

  public FinalDistinct(
    FinalDistinctType type,
    List<FinalDistinctKey> keyList)
  {
    this();
    this.type = type;
    this.keyList = keyList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinalDistinct(FinalDistinct other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetKeyList()) {
      List<FinalDistinctKey> __this__keyList = new ArrayList<FinalDistinctKey>(other.keyList.size());
      for (FinalDistinctKey other_element : other.keyList) {
        __this__keyList.add(new FinalDistinctKey(other_element));
      }
      this.keyList = __this__keyList;
    }
    if (other.isSetSort()) {
      List<String> __this__sort = new ArrayList<String>(other.sort);
      this.sort = __this__sort;
    }
    if (other.isSetSpecialCount()) {
      Map<String,Integer> __this__specialCount = new HashMap<String,Integer>(other.specialCount.size());
      for (Map.Entry<String, Integer> other_element : other.specialCount.entrySet()) {

        String other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        String __this__specialCount_copy_key = other_element_key;

        Integer __this__specialCount_copy_value = other_element_value;

        __this__specialCount.put(__this__specialCount_copy_key, __this__specialCount_copy_value);
      }
      this.specialCount = __this__specialCount;
    }
    if (other.isSetCustomFinalDistinct()) {
      Map<String,String> __this__customFinalDistinct = new HashMap<String,String>(other.customFinalDistinct);
      this.customFinalDistinct = __this__customFinalDistinct;
    }
  }

  public FinalDistinct deepCopy() {
    return new FinalDistinct(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.keyList = null;
    this.sort = null;
    this.specialCount = null;
    this.customFinalDistinct = null;
  }

  /**
   * 打散方式
   * 
   * @see FinalDistinctType
   */
  public FinalDistinctType getType() {
    return this.type;
  }

  /**
   * 打散方式
   * 
   * @see FinalDistinctType
   */
  public FinalDistinct setType(FinalDistinctType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getKeyListSize() {
    return (this.keyList == null) ? 0 : this.keyList.size();
  }

  public java.util.Iterator<FinalDistinctKey> getKeyListIterator() {
    return (this.keyList == null) ? null : this.keyList.iterator();
  }

  public void addToKeyList(FinalDistinctKey elem) {
    if (this.keyList == null) {
      this.keyList = new ArrayList<FinalDistinctKey>();
    }
    this.keyList.add(elem);
  }

  /**
   * 指定打散的字段及抽取的个数
   */
  public List<FinalDistinctKey> getKeyList() {
    return this.keyList;
  }

  /**
   * 指定打散的字段及抽取的个数
   */
  public FinalDistinct setKeyList(List<FinalDistinctKey> keyList) {
    this.keyList = keyList;
    return this;
  }

  public void unsetKeyList() {
    this.keyList = null;
  }

  /** Returns true if field keyList is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyList() {
    return this.keyList != null;
  }

  public void setKeyListIsSet(boolean value) {
    if (!value) {
      this.keyList = null;
    }
  }

  public int getSortSize() {
    return (this.sort == null) ? 0 : this.sort.size();
  }

  public java.util.Iterator<String> getSortIterator() {
    return (this.sort == null) ? null : this.sort.iterator();
  }

  public void addToSort(String elem) {
    if (this.sort == null) {
      this.sort = new ArrayList<String>();
    }
    this.sort.add(elem);
  }

  /**
   * 档间排序字段
   */
  public List<String> getSort() {
    return this.sort;
  }

  /**
   * 档间排序字段
   */
  public FinalDistinct setSort(List<String> sort) {
    this.sort = sort;
    return this;
  }

  public void unsetSort() {
    this.sort = null;
  }

  /** Returns true if field sort is set (has been assigned a value) and false otherwise */
  public boolean isSetSort() {
    return this.sort != null;
  }

  public void setSortIsSet(boolean value) {
    if (!value) {
      this.sort = null;
    }
  }

  public int getSpecialCountSize() {
    return (this.specialCount == null) ? 0 : this.specialCount.size();
  }

  public void putToSpecialCount(String key, int val) {
    if (this.specialCount == null) {
      this.specialCount = new HashMap<String,Integer>();
    }
    this.specialCount.put(key, val);
  }

  /**
   * 特定字段值抽取的个数
   */
  public Map<String,Integer> getSpecialCount() {
    return this.specialCount;
  }

  /**
   * 特定字段值抽取的个数
   */
  public FinalDistinct setSpecialCount(Map<String,Integer> specialCount) {
    this.specialCount = specialCount;
    return this;
  }

  public void unsetSpecialCount() {
    this.specialCount = null;
  }

  /** Returns true if field specialCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialCount() {
    return this.specialCount != null;
  }

  public void setSpecialCountIsSet(boolean value) {
    if (!value) {
      this.specialCount = null;
    }
  }

  public int getCustomFinalDistinctSize() {
    return (this.customFinalDistinct == null) ? 0 : this.customFinalDistinct.size();
  }

  public void putToCustomFinalDistinct(String key, String val) {
    if (this.customFinalDistinct == null) {
      this.customFinalDistinct = new HashMap<String,String>();
    }
    this.customFinalDistinct.put(key, val);
  }

  /**
   * 自定义精排聚合打散条件字段
   */
  public Map<String,String> getCustomFinalDistinct() {
    return this.customFinalDistinct;
  }

  /**
   * 自定义精排聚合打散条件字段
   */
  public FinalDistinct setCustomFinalDistinct(Map<String,String> customFinalDistinct) {
    this.customFinalDistinct = customFinalDistinct;
    return this;
  }

  public void unsetCustomFinalDistinct() {
    this.customFinalDistinct = null;
  }

  /** Returns true if field customFinalDistinct is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomFinalDistinct() {
    return this.customFinalDistinct != null;
  }

  public void setCustomFinalDistinctIsSet(boolean value) {
    if (!value) {
      this.customFinalDistinct = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((FinalDistinctType)value);
      }
      break;

    case KEY_LIST:
      if (value == null) {
        unsetKeyList();
      } else {
        setKeyList((List<FinalDistinctKey>)value);
      }
      break;

    case SORT:
      if (value == null) {
        unsetSort();
      } else {
        setSort((List<String>)value);
      }
      break;

    case SPECIAL_COUNT:
      if (value == null) {
        unsetSpecialCount();
      } else {
        setSpecialCount((Map<String,Integer>)value);
      }
      break;

    case CUSTOM_FINAL_DISTINCT:
      if (value == null) {
        unsetCustomFinalDistinct();
      } else {
        setCustomFinalDistinct((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case KEY_LIST:
      return getKeyList();

    case SORT:
      return getSort();

    case SPECIAL_COUNT:
      return getSpecialCount();

    case CUSTOM_FINAL_DISTINCT:
      return getCustomFinalDistinct();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case KEY_LIST:
      return isSetKeyList();
    case SORT:
      return isSetSort();
    case SPECIAL_COUNT:
      return isSetSpecialCount();
    case CUSTOM_FINAL_DISTINCT:
      return isSetCustomFinalDistinct();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinalDistinct)
      return this.equals((FinalDistinct)that);
    return false;
  }

  public boolean equals(FinalDistinct that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_keyList = true && this.isSetKeyList();
    boolean that_present_keyList = true && that.isSetKeyList();
    if (this_present_keyList || that_present_keyList) {
      if (!(this_present_keyList && that_present_keyList))
        return false;
      if (!this.keyList.equals(that.keyList))
        return false;
    }

    boolean this_present_sort = true && this.isSetSort();
    boolean that_present_sort = true && that.isSetSort();
    if (this_present_sort || that_present_sort) {
      if (!(this_present_sort && that_present_sort))
        return false;
      if (!this.sort.equals(that.sort))
        return false;
    }

    boolean this_present_specialCount = true && this.isSetSpecialCount();
    boolean that_present_specialCount = true && that.isSetSpecialCount();
    if (this_present_specialCount || that_present_specialCount) {
      if (!(this_present_specialCount && that_present_specialCount))
        return false;
      if (!this.specialCount.equals(that.specialCount))
        return false;
    }

    boolean this_present_customFinalDistinct = true && this.isSetCustomFinalDistinct();
    boolean that_present_customFinalDistinct = true && that.isSetCustomFinalDistinct();
    if (this_present_customFinalDistinct || that_present_customFinalDistinct) {
      if (!(this_present_customFinalDistinct && that_present_customFinalDistinct))
        return false;
      if (!this.customFinalDistinct.equals(that.customFinalDistinct))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_keyList = true && (isSetKeyList());
    list.add(present_keyList);
    if (present_keyList)
      list.add(keyList);

    boolean present_sort = true && (isSetSort());
    list.add(present_sort);
    if (present_sort)
      list.add(sort);

    boolean present_specialCount = true && (isSetSpecialCount());
    list.add(present_specialCount);
    if (present_specialCount)
      list.add(specialCount);

    boolean present_customFinalDistinct = true && (isSetCustomFinalDistinct());
    list.add(present_customFinalDistinct);
    if (present_customFinalDistinct)
      list.add(customFinalDistinct);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinalDistinct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyList()).compareTo(other.isSetKeyList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyList, other.keyList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort()).compareTo(other.isSetSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort, other.sort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialCount()).compareTo(other.isSetSpecialCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialCount, other.specialCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomFinalDistinct()).compareTo(other.isSetCustomFinalDistinct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomFinalDistinct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customFinalDistinct, other.customFinalDistinct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinalDistinct(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyList:");
    if (this.keyList == null) {
      sb.append("null");
    } else {
      sb.append(this.keyList);
    }
    first = false;
    if (isSetSort()) {
      if (!first) sb.append(", ");
      sb.append("sort:");
      if (this.sort == null) {
        sb.append("null");
      } else {
        sb.append(this.sort);
      }
      first = false;
    }
    if (isSetSpecialCount()) {
      if (!first) sb.append(", ");
      sb.append("specialCount:");
      if (this.specialCount == null) {
        sb.append("null");
      } else {
        sb.append(this.specialCount);
      }
      first = false;
    }
    if (isSetCustomFinalDistinct()) {
      if (!first) sb.append(", ");
      sb.append("customFinalDistinct:");
      if (this.customFinalDistinct == null) {
        sb.append("null");
      } else {
        sb.append(this.customFinalDistinct);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (keyList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keyList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinalDistinctStandardSchemeFactory implements SchemeFactory {
    public FinalDistinctStandardScheme getScheme() {
      return new FinalDistinctStandardScheme();
    }
  }

  private static class FinalDistinctStandardScheme extends StandardScheme<FinalDistinct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinalDistinct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.aliyun.opensearch.sdk.generated.search.FinalDistinctType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.keyList = new ArrayList<FinalDistinctKey>(_list32.size);
                FinalDistinctKey _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new FinalDistinctKey();
                  _elem33.read(iprot);
                  struct.keyList.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setKeyListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.sort = new ArrayList<String>(_list35.size);
                String _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readString();
                  struct.sort.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SPECIAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                struct.specialCount = new HashMap<String,Integer>(2*_map38.size);
                String _key39;
                int _val40;
                for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                {
                  _key39 = iprot.readString();
                  _val40 = iprot.readI32();
                  struct.specialCount.put(_key39, _val40);
                }
                iprot.readMapEnd();
              }
              struct.setSpecialCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CUSTOM_FINAL_DISTINCT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                struct.customFinalDistinct = new HashMap<String,String>(2*_map42.size);
                String _key43;
                String _val44;
                for (int _i45 = 0; _i45 < _map42.size; ++_i45)
                {
                  _key43 = iprot.readString();
                  _val44 = iprot.readString();
                  struct.customFinalDistinct.put(_key43, _val44);
                }
                iprot.readMapEnd();
              }
              struct.setCustomFinalDistinctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinalDistinct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.keyList != null) {
        oprot.writeFieldBegin(KEY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.keyList.size()));
          for (FinalDistinctKey _iter46 : struct.keyList)
          {
            _iter46.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sort != null) {
        if (struct.isSetSort()) {
          oprot.writeFieldBegin(SORT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sort.size()));
            for (String _iter47 : struct.sort)
            {
              oprot.writeString(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.specialCount != null) {
        if (struct.isSetSpecialCount()) {
          oprot.writeFieldBegin(SPECIAL_COUNT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.specialCount.size()));
            for (Map.Entry<String, Integer> _iter48 : struct.specialCount.entrySet())
            {
              oprot.writeString(_iter48.getKey());
              oprot.writeI32(_iter48.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.customFinalDistinct != null) {
        if (struct.isSetCustomFinalDistinct()) {
          oprot.writeFieldBegin(CUSTOM_FINAL_DISTINCT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.customFinalDistinct.size()));
            for (Map.Entry<String, String> _iter49 : struct.customFinalDistinct.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              oprot.writeString(_iter49.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinalDistinctTupleSchemeFactory implements SchemeFactory {
    public FinalDistinctTupleScheme getScheme() {
      return new FinalDistinctTupleScheme();
    }
  }

  private static class FinalDistinctTupleScheme extends TupleScheme<FinalDistinct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinalDistinct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      {
        oprot.writeI32(struct.keyList.size());
        for (FinalDistinctKey _iter50 : struct.keyList)
        {
          _iter50.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetSort()) {
        optionals.set(0);
      }
      if (struct.isSetSpecialCount()) {
        optionals.set(1);
      }
      if (struct.isSetCustomFinalDistinct()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSort()) {
        {
          oprot.writeI32(struct.sort.size());
          for (String _iter51 : struct.sort)
          {
            oprot.writeString(_iter51);
          }
        }
      }
      if (struct.isSetSpecialCount()) {
        {
          oprot.writeI32(struct.specialCount.size());
          for (Map.Entry<String, Integer> _iter52 : struct.specialCount.entrySet())
          {
            oprot.writeString(_iter52.getKey());
            oprot.writeI32(_iter52.getValue());
          }
        }
      }
      if (struct.isSetCustomFinalDistinct()) {
        {
          oprot.writeI32(struct.customFinalDistinct.size());
          for (Map.Entry<String, String> _iter53 : struct.customFinalDistinct.entrySet())
          {
            oprot.writeString(_iter53.getKey());
            oprot.writeString(_iter53.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinalDistinct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = com.aliyun.opensearch.sdk.generated.search.FinalDistinctType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.keyList = new ArrayList<FinalDistinctKey>(_list54.size);
        FinalDistinctKey _elem55;
        for (int _i56 = 0; _i56 < _list54.size; ++_i56)
        {
          _elem55 = new FinalDistinctKey();
          _elem55.read(iprot);
          struct.keyList.add(_elem55);
        }
      }
      struct.setKeyListIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sort = new ArrayList<String>(_list57.size);
          String _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = iprot.readString();
            struct.sort.add(_elem58);
          }
        }
        struct.setSortIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.specialCount = new HashMap<String,Integer>(2*_map60.size);
          String _key61;
          int _val62;
          for (int _i63 = 0; _i63 < _map60.size; ++_i63)
          {
            _key61 = iprot.readString();
            _val62 = iprot.readI32();
            struct.specialCount.put(_key61, _val62);
          }
        }
        struct.setSpecialCountIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.customFinalDistinct = new HashMap<String,String>(2*_map64.size);
          String _key65;
          String _val66;
          for (int _i67 = 0; _i67 < _map64.size; ++_i67)
          {
            _key65 = iprot.readString();
            _val66 = iprot.readString();
            struct.customFinalDistinct.put(_key65, _val66);
          }
        }
        struct.setCustomFinalDistinctIsSet(true);
      }
    }
  }

}

