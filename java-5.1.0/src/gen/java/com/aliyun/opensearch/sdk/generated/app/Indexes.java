/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.app;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class Indexes implements org.apache.thrift.TBase<Indexes, Indexes._Fields>, java.io.Serializable, Cloneable, Comparable<Indexes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Indexes");

  private static final org.apache.thrift.protocol.TField SEARCH_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("search_fields", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FILTER_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_fields", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IndexesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IndexesTupleSchemeFactory());
  }

  private Map<String,SearchField> search_fields; // optional
  private List<String> filter_fields; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEARCH_FIELDS((short)1, "search_fields"),
    FILTER_FIELDS((short)2, "filter_fields");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * @param fieldId fieldId
     * @return Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEARCH_FIELDS
          return SEARCH_FIELDS;
        case 2: // FILTER_FIELDS
          return FILTER_FIELDS;
        default:
          return null;
      }
    }

    /**
     * @param fieldId fieldId
     * @return Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * @param name name
     * @return Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SEARCH_FIELDS,_Fields.FILTER_FIELDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEARCH_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("search_fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchField.class))));
    tmpMap.put(_Fields.FILTER_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("filter_fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Indexes.class, metaDataMap);
  }

  public Indexes() {
  }

  public Indexes(Indexes other) {
    if (other.isSetSearch_fields()) {
      Map<String,SearchField> __this__search_fields = new HashMap<String,SearchField>(other.search_fields.size());
      for (Map.Entry<String, SearchField> other_element : other.search_fields.entrySet()) {

        String other_element_key = other_element.getKey();
        SearchField other_element_value = other_element.getValue();

        String __this__search_fields_copy_key = other_element_key;

        SearchField __this__search_fields_copy_value = new SearchField(other_element_value);

        __this__search_fields.put(__this__search_fields_copy_key, __this__search_fields_copy_value);
      }
      this.search_fields = __this__search_fields;
    }
    if (other.isSetFilter_fields()) {
      List<String> __this__filter_fields = new ArrayList<String>(other.filter_fields);
      this.filter_fields = __this__filter_fields;
    }
  }

  public Indexes deepCopy() {
    return new Indexes(this);
  }

  @Override
  public void clear() {
    this.search_fields = null;
    this.filter_fields = null;
  }

  public int getSearch_fieldsSize() {
    return (this.search_fields == null) ? 0 : this.search_fields.size();
  }

  public void putToSearch_fields(String key, SearchField val) {
    if (this.search_fields == null) {
      this.search_fields = new HashMap<String,SearchField>();
    }
    this.search_fields.put(key, val);
  }

  public Map<String,SearchField> getSearch_fields() {
    return this.search_fields;
  }

  public Indexes setSearch_fields(Map<String,SearchField> search_fields) {
    this.search_fields = search_fields;
    return this;
  }

  public void unsetSearch_fields() {
    this.search_fields = null;
  }

  /**
   * @return Returns true if field search_fields is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetSearch_fields() {
    return this.search_fields != null;
  }

  public void setSearch_fieldsIsSet(boolean value) {
    if (!value) {
      this.search_fields = null;
    }
  }

  public int getFilter_fieldsSize() {
    return (this.filter_fields == null) ? 0 : this.filter_fields.size();
  }

  public java.util.Iterator<String> getFilter_fieldsIterator() {
    return (this.filter_fields == null) ? null : this.filter_fields.iterator();
  }

  public void addToFilter_fields(String elem) {
    if (this.filter_fields == null) {
      this.filter_fields = new ArrayList<String>();
    }
    this.filter_fields.add(elem);
  }

  public List<String> getFilter_fields() {
    return this.filter_fields;
  }

  public Indexes setFilter_fields(List<String> filter_fields) {
    this.filter_fields = filter_fields;
    return this;
  }

  public void unsetFilter_fields() {
    this.filter_fields = null;
  }

  /**
   * @return Returns true if field filter_fields is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetFilter_fields() {
    return this.filter_fields != null;
  }

  public void setFilter_fieldsIsSet(boolean value) {
    if (!value) {
      this.filter_fields = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEARCH_FIELDS:
      if (value == null) {
        unsetSearch_fields();
      } else {
        setSearch_fields((Map<String,SearchField>)value);
      }
      break;

    case FILTER_FIELDS:
      if (value == null) {
        unsetFilter_fields();
      } else {
        setFilter_fields((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEARCH_FIELDS:
      return getSearch_fields();

    case FILTER_FIELDS:
      return getFilter_fields();

    }
    throw new IllegalStateException();
  }

  /**
   * @return  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
   **/
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEARCH_FIELDS:
      return isSetSearch_fields();
    case FILTER_FIELDS:
      return isSetFilter_fields();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Indexes)
      return this.equals((Indexes)that);
    return false;
  }

  public boolean equals(Indexes that) {
    if (that == null)
      return false;

    boolean this_present_search_fields = true && this.isSetSearch_fields();
    boolean that_present_search_fields = true && that.isSetSearch_fields();
    if (this_present_search_fields || that_present_search_fields) {
      if (!(this_present_search_fields && that_present_search_fields))
        return false;
      if (!this.search_fields.equals(that.search_fields))
        return false;
    }

    boolean this_present_filter_fields = true && this.isSetFilter_fields();
    boolean that_present_filter_fields = true && that.isSetFilter_fields();
    if (this_present_filter_fields || that_present_filter_fields) {
      if (!(this_present_filter_fields && that_present_filter_fields))
        return false;
      if (!this.filter_fields.equals(that.filter_fields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_search_fields = true && (isSetSearch_fields());
    list.add(present_search_fields);
    if (present_search_fields)
      list.add(search_fields);

    boolean present_filter_fields = true && (isSetFilter_fields());
    list.add(present_filter_fields);
    if (present_filter_fields)
      list.add(filter_fields);

    return list.hashCode();
  }

  @Override
  public int compareTo(Indexes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSearch_fields()).compareTo(other.isSetSearch_fields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearch_fields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.search_fields, other.search_fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_fields()).compareTo(other.isSetFilter_fields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_fields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_fields, other.filter_fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Indexes(");
    boolean first = true;

    if (isSetSearch_fields()) {
      sb.append("search_fields:");
      if (this.search_fields == null) {
        sb.append("null");
      } else {
        sb.append(this.search_fields);
      }
      first = false;
    }
    if (isSetFilter_fields()) {
      if (!first) sb.append(", ");
      sb.append("filter_fields:");
      if (this.filter_fields == null) {
        sb.append("null");
      } else {
        sb.append(this.filter_fields);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IndexesStandardSchemeFactory implements SchemeFactory {
    public IndexesStandardScheme getScheme() {
      return new IndexesStandardScheme();
    }
  }

  private static class IndexesStandardScheme extends StandardScheme<Indexes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Indexes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEARCH_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.search_fields = new HashMap<String,SearchField>(2*_map26.size);
                String _key27;
                SearchField _val28;
                for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                {
                  _key27 = iprot.readString();
                  _val28 = new SearchField();
                  _val28.read(iprot);
                  struct.search_fields.put(_key27, _val28);
                }
                iprot.readMapEnd();
              }
              struct.setSearch_fieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILTER_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.filter_fields = new ArrayList<String>(_list30.size);
                String _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = iprot.readString();
                  struct.filter_fields.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setFilter_fieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Indexes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.search_fields != null) {
        if (struct.isSetSearch_fields()) {
          oprot.writeFieldBegin(SEARCH_FIELDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.search_fields.size()));
            for (Map.Entry<String, SearchField> _iter33 : struct.search_fields.entrySet())
            {
              oprot.writeString(_iter33.getKey());
              _iter33.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.filter_fields != null) {
        if (struct.isSetFilter_fields()) {
          oprot.writeFieldBegin(FILTER_FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.filter_fields.size()));
            for (String _iter34 : struct.filter_fields)
            {
              oprot.writeString(_iter34);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IndexesTupleSchemeFactory implements SchemeFactory {
    public IndexesTupleScheme getScheme() {
      return new IndexesTupleScheme();
    }
  }

  private static class IndexesTupleScheme extends TupleScheme<Indexes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Indexes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSearch_fields()) {
        optionals.set(0);
      }
      if (struct.isSetFilter_fields()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSearch_fields()) {
        {
          oprot.writeI32(struct.search_fields.size());
          for (Map.Entry<String, SearchField> _iter35 : struct.search_fields.entrySet())
          {
            oprot.writeString(_iter35.getKey());
            _iter35.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetFilter_fields()) {
        {
          oprot.writeI32(struct.filter_fields.size());
          for (String _iter36 : struct.filter_fields)
          {
            oprot.writeString(_iter36);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Indexes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map37 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.search_fields = new HashMap<String,SearchField>(2*_map37.size);
          String _key38;
          SearchField _val39;
          for (int _i40 = 0; _i40 < _map37.size; ++_i40)
          {
            _key38 = iprot.readString();
            _val39 = new SearchField();
            _val39.read(iprot);
            struct.search_fields.put(_key38, _val39);
          }
        }
        struct.setSearch_fieldsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.filter_fields = new ArrayList<String>(_list41.size);
          String _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = iprot.readString();
            struct.filter_fields.add(_elem42);
          }
        }
        struct.setFilter_fieldsIsSet(true);
      }
    }
  }

}

