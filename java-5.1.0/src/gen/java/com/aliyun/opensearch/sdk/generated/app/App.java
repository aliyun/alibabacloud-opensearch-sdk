/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aliyun.opensearch.sdk.generated.app;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-17")
public class App implements org.apache.thrift.TBase<App, App._Fields>, java.io.Serializable, Cloneable, Comparable<App> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("App");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("quota", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField AUTO_SWITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("auto_switch", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField SWITCH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("switch_time", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField FETCH_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fetch_fields", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField FIRST_RANKS_FIELD_DESC = new org.apache.thrift.protocol.TField("first_ranks", org.apache.thrift.protocol.TType.MAP, (short)19);
  private static final org.apache.thrift.protocol.TField VIRTUAL_CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("virtual_cluster", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField REALTIME_SHARED_FIELD_DESC = new org.apache.thrift.protocol.TField("realtime_shared", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)100);
  private static final org.apache.thrift.protocol.TField DATA_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("data_progress", org.apache.thrift.protocol.TType.I32, (short)101);
  private static final org.apache.thrift.protocol.TField PROGRESS_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("progress_percent", org.apache.thrift.protocol.TType.I32, (short)102);
  private static final org.apache.thrift.protocol.TField REBUILDING_FIELD_DESC = new org.apache.thrift.protocol.TField("rebuilding", org.apache.thrift.protocol.TType.BOOL, (short)103);
  private static final org.apache.thrift.protocol.TField UNREAD_ERROR_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("unread_error_count", org.apache.thrift.protocol.TType.I32, (short)104);
  private static final org.apache.thrift.protocol.TField ACTION_CAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("action_cause", org.apache.thrift.protocol.TType.I32, (short)105);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppTupleSchemeFactory());
  }

  private String id; // optional
  private String name; // optional
  private String type; // optional
  private Schema schema; // optional
  private Quota quota; // optional
  private String description; // optional
  private Group group; // optional
  private boolean auto_switch; // optional
  private int switch_time; // optional
  private List<String> fetch_fields; // optional
  private Map<String,com.aliyun.opensearch.sdk.generated.first_rank.FirstRank> first_ranks; // optional
  private String virtual_cluster; // optional
  private boolean realtime_shared; // optional
  private AppStatus status; // optional
  private int data_progress; // optional
  private int progress_percent; // optional
  private boolean rebuilding; // optional
  private int unread_error_count; // optional
  private int action_cause; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)10, "name"),
    TYPE((short)11, "type"),
    SCHEMA((short)12, "schema"),
    QUOTA((short)13, "quota"),
    DESCRIPTION((short)14, "description"),
    GROUP((short)15, "group"),
    AUTO_SWITCH((short)16, "auto_switch"),
    SWITCH_TIME((short)17, "switch_time"),
    FETCH_FIELDS((short)18, "fetch_fields"),
    FIRST_RANKS((short)19, "first_ranks"),
    VIRTUAL_CLUSTER((short)20, "virtual_cluster"),
    REALTIME_SHARED((short)21, "realtime_shared"),
    /**
     * 
     * @see AppStatus
     */
    STATUS((short)100, "status"),
    DATA_PROGRESS((short)101, "data_progress"),
    PROGRESS_PERCENT((short)102, "progress_percent"),
    REBUILDING((short)103, "rebuilding"),
    UNREAD_ERROR_COUNT((short)104, "unread_error_count"),
    ACTION_CAUSE((short)105, "action_cause");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * @param  fieldId  fieldId
     * @return Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 10: // NAME
          return NAME;
        case 11: // TYPE
          return TYPE;
        case 12: // SCHEMA
          return SCHEMA;
        case 13: // QUOTA
          return QUOTA;
        case 14: // DESCRIPTION
          return DESCRIPTION;
        case 15: // GROUP
          return GROUP;
        case 16: // AUTO_SWITCH
          return AUTO_SWITCH;
        case 17: // SWITCH_TIME
          return SWITCH_TIME;
        case 18: // FETCH_FIELDS
          return FETCH_FIELDS;
        case 19: // FIRST_RANKS
          return FIRST_RANKS;
        case 20: // VIRTUAL_CLUSTER
          return VIRTUAL_CLUSTER;
        case 21: // REALTIME_SHARED
          return REALTIME_SHARED;
        case 100: // STATUS
          return STATUS;
        case 101: // DATA_PROGRESS
          return DATA_PROGRESS;
        case 102: // PROGRESS_PERCENT
          return PROGRESS_PERCENT;
        case 103: // REBUILDING
          return REBUILDING;
        case 104: // UNREAD_ERROR_COUNT
          return UNREAD_ERROR_COUNT;
        case 105: // ACTION_CAUSE
          return ACTION_CAUSE;
        default:
          return null;
      }
    }

    /**
     * @param fieldId   fieldId
     * @return Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * @param name  name
     * @return Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTO_SWITCH_ISSET_ID = 0;
  private static final int __SWITCH_TIME_ISSET_ID = 1;
  private static final int __REALTIME_SHARED_ISSET_ID = 2;
  private static final int __DATA_PROGRESS_ISSET_ID = 3;
  private static final int __PROGRESS_PERCENT_ISSET_ID = 4;
  private static final int __REBUILDING_ISSET_ID = 5;
  private static final int __UNREAD_ERROR_COUNT_ISSET_ID = 6;
  private static final int __ACTION_CAUSE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.NAME,_Fields.TYPE,_Fields.SCHEMA,_Fields.QUOTA,_Fields.DESCRIPTION,_Fields.GROUP,_Fields.AUTO_SWITCH,_Fields.SWITCH_TIME,_Fields.FETCH_FIELDS,_Fields.FIRST_RANKS,_Fields.VIRTUAL_CLUSTER,_Fields.REALTIME_SHARED,_Fields.STATUS,_Fields.DATA_PROGRESS,_Fields.PROGRESS_PERCENT,_Fields.REBUILDING,_Fields.UNREAD_ERROR_COUNT,_Fields.ACTION_CAUSE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Schema.class)));
    tmpMap.put(_Fields.QUOTA, new org.apache.thrift.meta_data.FieldMetaData("quota", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Quota.class)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Group.class)));
    tmpMap.put(_Fields.AUTO_SWITCH, new org.apache.thrift.meta_data.FieldMetaData("auto_switch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SWITCH_TIME, new org.apache.thrift.meta_data.FieldMetaData("switch_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FETCH_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fetch_fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FIRST_RANKS, new org.apache.thrift.meta_data.FieldMetaData("first_ranks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.aliyun.opensearch.sdk.generated.first_rank.FirstRank.class))));
    tmpMap.put(_Fields.VIRTUAL_CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("virtual_cluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REALTIME_SHARED, new org.apache.thrift.meta_data.FieldMetaData("realtime_shared", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AppStatus.class)));
    tmpMap.put(_Fields.DATA_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("data_progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROGRESS_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("progress_percent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REBUILDING, new org.apache.thrift.meta_data.FieldMetaData("rebuilding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UNREAD_ERROR_COUNT, new org.apache.thrift.meta_data.FieldMetaData("unread_error_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_CAUSE, new org.apache.thrift.meta_data.FieldMetaData("action_cause", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(App.class, metaDataMap);
  }

  public App() {
    this.type = "advance";

  }

  /**
   * Performs a deep copy on <i>other</i>.
   * @param other App other
   */
  public App(App other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetSchema()) {
      this.schema = new Schema(other.schema);
    }
    if (other.isSetQuota()) {
      this.quota = new Quota(other.quota);
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetGroup()) {
      this.group = new Group(other.group);
    }
    this.auto_switch = other.auto_switch;
    this.switch_time = other.switch_time;
    if (other.isSetFetch_fields()) {
      List<String> __this__fetch_fields = new ArrayList<String>(other.fetch_fields);
      this.fetch_fields = __this__fetch_fields;
    }
    if (other.isSetFirst_ranks()) {
      Map<String,com.aliyun.opensearch.sdk.generated.first_rank.FirstRank> __this__first_ranks = new HashMap<String,com.aliyun.opensearch.sdk.generated.first_rank.FirstRank>(other.first_ranks.size());
      for (Map.Entry<String, com.aliyun.opensearch.sdk.generated.first_rank.FirstRank> other_element : other.first_ranks.entrySet()) {

        String other_element_key = other_element.getKey();
        com.aliyun.opensearch.sdk.generated.first_rank.FirstRank other_element_value = other_element.getValue();

        String __this__first_ranks_copy_key = other_element_key;

        com.aliyun.opensearch.sdk.generated.first_rank.FirstRank __this__first_ranks_copy_value = new com.aliyun.opensearch.sdk.generated.first_rank.FirstRank(other_element_value);

        __this__first_ranks.put(__this__first_ranks_copy_key, __this__first_ranks_copy_value);
      }
      this.first_ranks = __this__first_ranks;
    }
    if (other.isSetVirtual_cluster()) {
      this.virtual_cluster = other.virtual_cluster;
    }
    this.realtime_shared = other.realtime_shared;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.data_progress = other.data_progress;
    this.progress_percent = other.progress_percent;
    this.rebuilding = other.rebuilding;
    this.unread_error_count = other.unread_error_count;
    this.action_cause = other.action_cause;
  }

  public App deepCopy() {
    return new App(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.type = "advance";

    this.schema = null;
    this.quota = null;
    this.description = null;
    this.group = null;
    setAuto_switchIsSet(false);
    this.auto_switch = false;
    setSwitch_timeIsSet(false);
    this.switch_time = 0;
    this.fetch_fields = null;
    this.first_ranks = null;
    this.virtual_cluster = null;
    setRealtime_sharedIsSet(false);
    this.realtime_shared = false;
    this.status = null;
    setData_progressIsSet(false);
    this.data_progress = 0;
    setProgress_percentIsSet(false);
    this.progress_percent = 0;
    setRebuildingIsSet(false);
    this.rebuilding = false;
    setUnread_error_countIsSet(false);
    this.unread_error_count = 0;
    setAction_causeIsSet(false);
    this.action_cause = 0;
  }

  public String getId() {
    return this.id;
  }

  public App setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

   /**
    *
    * @return   Returns true if field id is set (has been assigned a value) and false otherwise
    */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public App setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /**
   * @return Returns true if field name is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public App setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /**
   * @return  Returns true if field type is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public Schema getSchema() {
    return this.schema;
  }

  public App setSchema(Schema schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  /**
   * @return Returns true if field schema is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  public Quota getQuota() {
    return this.quota;
  }

  public App setQuota(Quota quota) {
    this.quota = quota;
    return this;
  }

  public void unsetQuota() {
    this.quota = null;
  }

  /**
   * @return Returns true if field quota is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetQuota() {
    return this.quota != null;
  }

  public void setQuotaIsSet(boolean value) {
    if (!value) {
      this.quota = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public App setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /**
   * @return Returns true if field description is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public Group getGroup() {
    return this.group;
  }

  public App setGroup(Group group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /**
   * @return Returns true if field group is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public boolean isAuto_switch() {
    return this.auto_switch;
  }

  public App setAuto_switch(boolean auto_switch) {
    this.auto_switch = auto_switch;
    setAuto_switchIsSet(true);
    return this;
  }

  public void unsetAuto_switch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTO_SWITCH_ISSET_ID);
  }

  /**
   * @return Returns true if field auto_switch is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetAuto_switch() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTO_SWITCH_ISSET_ID);
  }

  public void setAuto_switchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTO_SWITCH_ISSET_ID, value);
  }

  public int getSwitch_time() {
    return this.switch_time;
  }

  public App setSwitch_time(int switch_time) {
    this.switch_time = switch_time;
    setSwitch_timeIsSet(true);
    return this;
  }

  public void unsetSwitch_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SWITCH_TIME_ISSET_ID);
  }

  /**
   * @return Returns true if field switch_time is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetSwitch_time() {
    return EncodingUtils.testBit(__isset_bitfield, __SWITCH_TIME_ISSET_ID);
  }

  public void setSwitch_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SWITCH_TIME_ISSET_ID, value);
  }

  public int getFetch_fieldsSize() {
    return (this.fetch_fields == null) ? 0 : this.fetch_fields.size();
  }

  public java.util.Iterator<String> getFetch_fieldsIterator() {
    return (this.fetch_fields == null) ? null : this.fetch_fields.iterator();
  }

  public void addToFetch_fields(String elem) {
    if (this.fetch_fields == null) {
      this.fetch_fields = new ArrayList<String>();
    }
    this.fetch_fields.add(elem);
  }

  public List<String> getFetch_fields() {
    return this.fetch_fields;
  }

  public App setFetch_fields(List<String> fetch_fields) {
    this.fetch_fields = fetch_fields;
    return this;
  }

  public void unsetFetch_fields() {
    this.fetch_fields = null;
  }

  /**
   * @return Returns true if field fetch_fields is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetFetch_fields() {
    return this.fetch_fields != null;
  }

  public void setFetch_fieldsIsSet(boolean value) {
    if (!value) {
      this.fetch_fields = null;
    }
  }

  public int getFirst_ranksSize() {
    return (this.first_ranks == null) ? 0 : this.first_ranks.size();
  }

  public void putToFirst_ranks(String key, com.aliyun.opensearch.sdk.generated.first_rank.FirstRank val) {
    if (this.first_ranks == null) {
      this.first_ranks = new HashMap<String,com.aliyun.opensearch.sdk.generated.first_rank.FirstRank>();
    }
    this.first_ranks.put(key, val);
  }

  public Map<String,com.aliyun.opensearch.sdk.generated.first_rank.FirstRank> getFirst_ranks() {
    return this.first_ranks;
  }

  public App setFirst_ranks(Map<String,com.aliyun.opensearch.sdk.generated.first_rank.FirstRank> first_ranks) {
    this.first_ranks = first_ranks;
    return this;
  }

  public void unsetFirst_ranks() {
    this.first_ranks = null;
  }

  /**
   * @return Returns true if field first_ranks is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetFirst_ranks() {
    return this.first_ranks != null;
  }

  public void setFirst_ranksIsSet(boolean value) {
    if (!value) {
      this.first_ranks = null;
    }
  }

  public String getVirtual_cluster() {
    return this.virtual_cluster;
  }

  public App setVirtual_cluster(String virtual_cluster) {
    this.virtual_cluster = virtual_cluster;
    return this;
  }

  public void unsetVirtual_cluster() {
    this.virtual_cluster = null;
  }

  /**
   * @return Returns true if field virtual_cluster is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetVirtual_cluster() {
    return this.virtual_cluster != null;
  }

  public void setVirtual_clusterIsSet(boolean value) {
    if (!value) {
      this.virtual_cluster = null;
    }
  }

  public boolean isRealtime_shared() {
    return this.realtime_shared;
  }

  public App setRealtime_shared(boolean realtime_shared) {
    this.realtime_shared = realtime_shared;
    setRealtime_sharedIsSet(true);
    return this;
  }

  public void unsetRealtime_shared() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALTIME_SHARED_ISSET_ID);
  }

  /**
   * @return Returns true if field realtime_shared is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetRealtime_shared() {
    return EncodingUtils.testBit(__isset_bitfield, __REALTIME_SHARED_ISSET_ID);
  }

  public void setRealtime_sharedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALTIME_SHARED_ISSET_ID, value);
  }

  /**
   * 
   * @return AppStatus
   */
  public AppStatus getStatus() {
    return this.status;
  }

  /**
   * @param status AppStatus
   * @return AppStatus
   */
  public App setStatus(AppStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /**
   * @return Returns true if field status is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getData_progress() {
    return this.data_progress;
  }

  public App setData_progress(int data_progress) {
    this.data_progress = data_progress;
    setData_progressIsSet(true);
    return this;
  }

  public void unsetData_progress() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATA_PROGRESS_ISSET_ID);
  }

  /**
   * @return Returns true if field data_progress is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetData_progress() {
    return EncodingUtils.testBit(__isset_bitfield, __DATA_PROGRESS_ISSET_ID);
  }

  public void setData_progressIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATA_PROGRESS_ISSET_ID, value);
  }

  public int getProgress_percent() {
    return this.progress_percent;
  }

  public App setProgress_percent(int progress_percent) {
    this.progress_percent = progress_percent;
    setProgress_percentIsSet(true);
    return this;
  }

  public void unsetProgress_percent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRESS_PERCENT_ISSET_ID);
  }

  /**
   * @return Returns true if field progress_percent is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetProgress_percent() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRESS_PERCENT_ISSET_ID);
  }

  public void setProgress_percentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRESS_PERCENT_ISSET_ID, value);
  }

  public boolean isRebuilding() {
    return this.rebuilding;
  }

  public App setRebuilding(boolean rebuilding) {
    this.rebuilding = rebuilding;
    setRebuildingIsSet(true);
    return this;
  }

  public void unsetRebuilding() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REBUILDING_ISSET_ID);
  }

  /**
   * @return Returns true if field rebuilding is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetRebuilding() {
    return EncodingUtils.testBit(__isset_bitfield, __REBUILDING_ISSET_ID);
  }

  public void setRebuildingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REBUILDING_ISSET_ID, value);
  }

  public int getUnread_error_count() {
    return this.unread_error_count;
  }

  public App setUnread_error_count(int unread_error_count) {
    this.unread_error_count = unread_error_count;
    setUnread_error_countIsSet(true);
    return this;
  }

  public void unsetUnread_error_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNREAD_ERROR_COUNT_ISSET_ID);
  }

  /**
   * @return  Returns true if field unread_error_count is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetUnread_error_count() {
    return EncodingUtils.testBit(__isset_bitfield, __UNREAD_ERROR_COUNT_ISSET_ID);
  }

  public void setUnread_error_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNREAD_ERROR_COUNT_ISSET_ID, value);
  }

  public int getAction_cause() {
    return this.action_cause;
  }

  public App setAction_cause(int action_cause) {
    this.action_cause = action_cause;
    setAction_causeIsSet(true);
    return this;
  }

  public void unsetAction_cause() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTION_CAUSE_ISSET_ID);
  }

  /**
   * @return Returns true if field action_cause is set (has been assigned a value) and false otherwise
   **/
  public boolean isSetAction_cause() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTION_CAUSE_ISSET_ID);
  }

  public void setAction_causeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTION_CAUSE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((Schema)value);
      }
      break;

    case QUOTA:
      if (value == null) {
        unsetQuota();
      } else {
        setQuota((Quota)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((Group)value);
      }
      break;

    case AUTO_SWITCH:
      if (value == null) {
        unsetAuto_switch();
      } else {
        setAuto_switch((Boolean)value);
      }
      break;

    case SWITCH_TIME:
      if (value == null) {
        unsetSwitch_time();
      } else {
        setSwitch_time((Integer)value);
      }
      break;

    case FETCH_FIELDS:
      if (value == null) {
        unsetFetch_fields();
      } else {
        setFetch_fields((List<String>)value);
      }
      break;

    case FIRST_RANKS:
      if (value == null) {
        unsetFirst_ranks();
      } else {
        setFirst_ranks((Map<String,com.aliyun.opensearch.sdk.generated.first_rank.FirstRank>)value);
      }
      break;

    case VIRTUAL_CLUSTER:
      if (value == null) {
        unsetVirtual_cluster();
      } else {
        setVirtual_cluster((String)value);
      }
      break;

    case REALTIME_SHARED:
      if (value == null) {
        unsetRealtime_shared();
      } else {
        setRealtime_shared((Boolean)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((AppStatus)value);
      }
      break;

    case DATA_PROGRESS:
      if (value == null) {
        unsetData_progress();
      } else {
        setData_progress((Integer)value);
      }
      break;

    case PROGRESS_PERCENT:
      if (value == null) {
        unsetProgress_percent();
      } else {
        setProgress_percent((Integer)value);
      }
      break;

    case REBUILDING:
      if (value == null) {
        unsetRebuilding();
      } else {
        setRebuilding((Boolean)value);
      }
      break;

    case UNREAD_ERROR_COUNT:
      if (value == null) {
        unsetUnread_error_count();
      } else {
        setUnread_error_count((Integer)value);
      }
      break;

    case ACTION_CAUSE:
      if (value == null) {
        unsetAction_cause();
      } else {
        setAction_cause((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case SCHEMA:
      return getSchema();

    case QUOTA:
      return getQuota();

    case DESCRIPTION:
      return getDescription();

    case GROUP:
      return getGroup();

    case AUTO_SWITCH:
      return isAuto_switch();

    case SWITCH_TIME:
      return getSwitch_time();

    case FETCH_FIELDS:
      return getFetch_fields();

    case FIRST_RANKS:
      return getFirst_ranks();

    case VIRTUAL_CLUSTER:
      return getVirtual_cluster();

    case REALTIME_SHARED:
      return isRealtime_shared();

    case STATUS:
      return getStatus();

    case DATA_PROGRESS:
      return getData_progress();

    case PROGRESS_PERCENT:
      return getProgress_percent();

    case REBUILDING:
      return isRebuilding();

    case UNREAD_ERROR_COUNT:
      return getUnread_error_count();

    case ACTION_CAUSE:
      return getAction_cause();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case SCHEMA:
      return isSetSchema();
    case QUOTA:
      return isSetQuota();
    case DESCRIPTION:
      return isSetDescription();
    case GROUP:
      return isSetGroup();
    case AUTO_SWITCH:
      return isSetAuto_switch();
    case SWITCH_TIME:
      return isSetSwitch_time();
    case FETCH_FIELDS:
      return isSetFetch_fields();
    case FIRST_RANKS:
      return isSetFirst_ranks();
    case VIRTUAL_CLUSTER:
      return isSetVirtual_cluster();
    case REALTIME_SHARED:
      return isSetRealtime_shared();
    case STATUS:
      return isSetStatus();
    case DATA_PROGRESS:
      return isSetData_progress();
    case PROGRESS_PERCENT:
      return isSetProgress_percent();
    case REBUILDING:
      return isSetRebuilding();
    case UNREAD_ERROR_COUNT:
      return isSetUnread_error_count();
    case ACTION_CAUSE:
      return isSetAction_cause();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof App)
      return this.equals((App)that);
    return false;
  }

  public boolean equals(App that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!this.schema.equals(that.schema))
        return false;
    }

    boolean this_present_quota = true && this.isSetQuota();
    boolean that_present_quota = true && that.isSetQuota();
    if (this_present_quota || that_present_quota) {
      if (!(this_present_quota && that_present_quota))
        return false;
      if (!this.quota.equals(that.quota))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_auto_switch = true && this.isSetAuto_switch();
    boolean that_present_auto_switch = true && that.isSetAuto_switch();
    if (this_present_auto_switch || that_present_auto_switch) {
      if (!(this_present_auto_switch && that_present_auto_switch))
        return false;
      if (this.auto_switch != that.auto_switch)
        return false;
    }

    boolean this_present_switch_time = true && this.isSetSwitch_time();
    boolean that_present_switch_time = true && that.isSetSwitch_time();
    if (this_present_switch_time || that_present_switch_time) {
      if (!(this_present_switch_time && that_present_switch_time))
        return false;
      if (this.switch_time != that.switch_time)
        return false;
    }

    boolean this_present_fetch_fields = true && this.isSetFetch_fields();
    boolean that_present_fetch_fields = true && that.isSetFetch_fields();
    if (this_present_fetch_fields || that_present_fetch_fields) {
      if (!(this_present_fetch_fields && that_present_fetch_fields))
        return false;
      if (!this.fetch_fields.equals(that.fetch_fields))
        return false;
    }

    boolean this_present_first_ranks = true && this.isSetFirst_ranks();
    boolean that_present_first_ranks = true && that.isSetFirst_ranks();
    if (this_present_first_ranks || that_present_first_ranks) {
      if (!(this_present_first_ranks && that_present_first_ranks))
        return false;
      if (!this.first_ranks.equals(that.first_ranks))
        return false;
    }

    boolean this_present_virtual_cluster = true && this.isSetVirtual_cluster();
    boolean that_present_virtual_cluster = true && that.isSetVirtual_cluster();
    if (this_present_virtual_cluster || that_present_virtual_cluster) {
      if (!(this_present_virtual_cluster && that_present_virtual_cluster))
        return false;
      if (!this.virtual_cluster.equals(that.virtual_cluster))
        return false;
    }

    boolean this_present_realtime_shared = true && this.isSetRealtime_shared();
    boolean that_present_realtime_shared = true && that.isSetRealtime_shared();
    if (this_present_realtime_shared || that_present_realtime_shared) {
      if (!(this_present_realtime_shared && that_present_realtime_shared))
        return false;
      if (this.realtime_shared != that.realtime_shared)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_data_progress = true && this.isSetData_progress();
    boolean that_present_data_progress = true && that.isSetData_progress();
    if (this_present_data_progress || that_present_data_progress) {
      if (!(this_present_data_progress && that_present_data_progress))
        return false;
      if (this.data_progress != that.data_progress)
        return false;
    }

    boolean this_present_progress_percent = true && this.isSetProgress_percent();
    boolean that_present_progress_percent = true && that.isSetProgress_percent();
    if (this_present_progress_percent || that_present_progress_percent) {
      if (!(this_present_progress_percent && that_present_progress_percent))
        return false;
      if (this.progress_percent != that.progress_percent)
        return false;
    }

    boolean this_present_rebuilding = true && this.isSetRebuilding();
    boolean that_present_rebuilding = true && that.isSetRebuilding();
    if (this_present_rebuilding || that_present_rebuilding) {
      if (!(this_present_rebuilding && that_present_rebuilding))
        return false;
      if (this.rebuilding != that.rebuilding)
        return false;
    }

    boolean this_present_unread_error_count = true && this.isSetUnread_error_count();
    boolean that_present_unread_error_count = true && that.isSetUnread_error_count();
    if (this_present_unread_error_count || that_present_unread_error_count) {
      if (!(this_present_unread_error_count && that_present_unread_error_count))
        return false;
      if (this.unread_error_count != that.unread_error_count)
        return false;
    }

    boolean this_present_action_cause = true && this.isSetAction_cause();
    boolean that_present_action_cause = true && that.isSetAction_cause();
    if (this_present_action_cause || that_present_action_cause) {
      if (!(this_present_action_cause && that_present_action_cause))
        return false;
      if (this.action_cause != that.action_cause)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_schema = true && (isSetSchema());
    list.add(present_schema);
    if (present_schema)
      list.add(schema);

    boolean present_quota = true && (isSetQuota());
    list.add(present_quota);
    if (present_quota)
      list.add(quota);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_auto_switch = true && (isSetAuto_switch());
    list.add(present_auto_switch);
    if (present_auto_switch)
      list.add(auto_switch);

    boolean present_switch_time = true && (isSetSwitch_time());
    list.add(present_switch_time);
    if (present_switch_time)
      list.add(switch_time);

    boolean present_fetch_fields = true && (isSetFetch_fields());
    list.add(present_fetch_fields);
    if (present_fetch_fields)
      list.add(fetch_fields);

    boolean present_first_ranks = true && (isSetFirst_ranks());
    list.add(present_first_ranks);
    if (present_first_ranks)
      list.add(first_ranks);

    boolean present_virtual_cluster = true && (isSetVirtual_cluster());
    list.add(present_virtual_cluster);
    if (present_virtual_cluster)
      list.add(virtual_cluster);

    boolean present_realtime_shared = true && (isSetRealtime_shared());
    list.add(present_realtime_shared);
    if (present_realtime_shared)
      list.add(realtime_shared);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_data_progress = true && (isSetData_progress());
    list.add(present_data_progress);
    if (present_data_progress)
      list.add(data_progress);

    boolean present_progress_percent = true && (isSetProgress_percent());
    list.add(present_progress_percent);
    if (present_progress_percent)
      list.add(progress_percent);

    boolean present_rebuilding = true && (isSetRebuilding());
    list.add(present_rebuilding);
    if (present_rebuilding)
      list.add(rebuilding);

    boolean present_unread_error_count = true && (isSetUnread_error_count());
    list.add(present_unread_error_count);
    if (present_unread_error_count)
      list.add(unread_error_count);

    boolean present_action_cause = true && (isSetAction_cause());
    list.add(present_action_cause);
    if (present_action_cause)
      list.add(action_cause);

    return list.hashCode();
  }

  @Override
  public int compareTo(App other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuota()).compareTo(other.isSetQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quota, other.quota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuto_switch()).compareTo(other.isSetAuto_switch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuto_switch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auto_switch, other.auto_switch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSwitch_time()).compareTo(other.isSetSwitch_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwitch_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.switch_time, other.switch_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetch_fields()).compareTo(other.isSetFetch_fields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetch_fields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetch_fields, other.fetch_fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirst_ranks()).compareTo(other.isSetFirst_ranks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst_ranks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_ranks, other.first_ranks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVirtual_cluster()).compareTo(other.isSetVirtual_cluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVirtual_cluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtual_cluster, other.virtual_cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealtime_shared()).compareTo(other.isSetRealtime_shared());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealtime_shared()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realtime_shared, other.realtime_shared);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData_progress()).compareTo(other.isSetData_progress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_progress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_progress, other.data_progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress_percent()).compareTo(other.isSetProgress_percent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress_percent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress_percent, other.progress_percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRebuilding()).compareTo(other.isSetRebuilding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRebuilding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rebuilding, other.rebuilding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnread_error_count()).compareTo(other.isSetUnread_error_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnread_error_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unread_error_count, other.unread_error_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction_cause()).compareTo(other.isSetAction_cause());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction_cause()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action_cause, other.action_cause);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("App(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetSchema()) {
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
    }
    if (isSetQuota()) {
      if (!first) sb.append(", ");
      sb.append("quota:");
      if (this.quota == null) {
        sb.append("null");
      } else {
        sb.append(this.quota);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetAuto_switch()) {
      if (!first) sb.append(", ");
      sb.append("auto_switch:");
      sb.append(this.auto_switch);
      first = false;
    }
    if (isSetSwitch_time()) {
      if (!first) sb.append(", ");
      sb.append("switch_time:");
      sb.append(this.switch_time);
      first = false;
    }
    if (isSetFetch_fields()) {
      if (!first) sb.append(", ");
      sb.append("fetch_fields:");
      if (this.fetch_fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fetch_fields);
      }
      first = false;
    }
    if (isSetFirst_ranks()) {
      if (!first) sb.append(", ");
      sb.append("first_ranks:");
      if (this.first_ranks == null) {
        sb.append("null");
      } else {
        sb.append(this.first_ranks);
      }
      first = false;
    }
    if (isSetVirtual_cluster()) {
      if (!first) sb.append(", ");
      sb.append("virtual_cluster:");
      if (this.virtual_cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.virtual_cluster);
      }
      first = false;
    }
    if (isSetRealtime_shared()) {
      if (!first) sb.append(", ");
      sb.append("realtime_shared:");
      sb.append(this.realtime_shared);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetData_progress()) {
      if (!first) sb.append(", ");
      sb.append("data_progress:");
      sb.append(this.data_progress);
      first = false;
    }
    if (isSetProgress_percent()) {
      if (!first) sb.append(", ");
      sb.append("progress_percent:");
      sb.append(this.progress_percent);
      first = false;
    }
    if (isSetRebuilding()) {
      if (!first) sb.append(", ");
      sb.append("rebuilding:");
      sb.append(this.rebuilding);
      first = false;
    }
    if (isSetUnread_error_count()) {
      if (!first) sb.append(", ");
      sb.append("unread_error_count:");
      sb.append(this.unread_error_count);
      first = false;
    }
    if (isSetAction_cause()) {
      if (!first) sb.append(", ");
      sb.append("action_cause:");
      sb.append(this.action_cause);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (schema != null) {
      schema.validate();
    }
    if (quota != null) {
      quota.validate();
    }
    if (group != null) {
      group.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppStandardSchemeFactory implements SchemeFactory {
    public AppStandardScheme getScheme() {
      return new AppStandardScheme();
    }
  }

  private static class AppStandardScheme extends StandardScheme<App> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, App struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema = new Schema();
              struct.schema.read(iprot);
              struct.setSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.quota = new Quota();
              struct.quota.read(iprot);
              struct.setQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.group = new Group();
              struct.group.read(iprot);
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // AUTO_SWITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.auto_switch = iprot.readBool();
              struct.setAuto_switchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SWITCH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.switch_time = iprot.readI32();
              struct.setSwitch_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FETCH_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.fetch_fields = new ArrayList<String>(_list62.size);
                String _elem63;
                for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                {
                  _elem63 = iprot.readString();
                  struct.fetch_fields.add(_elem63);
                }
                iprot.readListEnd();
              }
              struct.setFetch_fieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FIRST_RANKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
                struct.first_ranks = new HashMap<String,com.aliyun.opensearch.sdk.generated.first_rank.FirstRank>(2*_map65.size);
                String _key66;
                com.aliyun.opensearch.sdk.generated.first_rank.FirstRank _val67;
                for (int _i68 = 0; _i68 < _map65.size; ++_i68)
                {
                  _key66 = iprot.readString();
                  _val67 = new com.aliyun.opensearch.sdk.generated.first_rank.FirstRank();
                  _val67.read(iprot);
                  struct.first_ranks.put(_key66, _val67);
                }
                iprot.readMapEnd();
              }
              struct.setFirst_ranksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // VIRTUAL_CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.virtual_cluster = iprot.readString();
              struct.setVirtual_clusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REALTIME_SHARED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.realtime_shared = iprot.readBool();
              struct.setRealtime_sharedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.aliyun.opensearch.sdk.generated.app.AppStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // DATA_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data_progress = iprot.readI32();
              struct.setData_progressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // PROGRESS_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.progress_percent = iprot.readI32();
              struct.setProgress_percentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // REBUILDING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rebuilding = iprot.readBool();
              struct.setRebuildingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // UNREAD_ERROR_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unread_error_count = iprot.readI32();
              struct.setUnread_error_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // ACTION_CAUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action_cause = iprot.readI32();
              struct.setAction_causeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, App struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schema != null) {
        if (struct.isSetSchema()) {
          oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
          struct.schema.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.quota != null) {
        if (struct.isSetQuota()) {
          oprot.writeFieldBegin(QUOTA_FIELD_DESC);
          struct.quota.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          struct.group.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuto_switch()) {
        oprot.writeFieldBegin(AUTO_SWITCH_FIELD_DESC);
        oprot.writeBool(struct.auto_switch);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSwitch_time()) {
        oprot.writeFieldBegin(SWITCH_TIME_FIELD_DESC);
        oprot.writeI32(struct.switch_time);
        oprot.writeFieldEnd();
      }
      if (struct.fetch_fields != null) {
        if (struct.isSetFetch_fields()) {
          oprot.writeFieldBegin(FETCH_FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fetch_fields.size()));
            for (String _iter69 : struct.fetch_fields)
            {
              oprot.writeString(_iter69);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.first_ranks != null) {
        if (struct.isSetFirst_ranks()) {
          oprot.writeFieldBegin(FIRST_RANKS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.first_ranks.size()));
            for (Map.Entry<String, com.aliyun.opensearch.sdk.generated.first_rank.FirstRank> _iter70 : struct.first_ranks.entrySet())
            {
              oprot.writeString(_iter70.getKey());
              _iter70.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.virtual_cluster != null) {
        if (struct.isSetVirtual_cluster()) {
          oprot.writeFieldBegin(VIRTUAL_CLUSTER_FIELD_DESC);
          oprot.writeString(struct.virtual_cluster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRealtime_shared()) {
        oprot.writeFieldBegin(REALTIME_SHARED_FIELD_DESC);
        oprot.writeBool(struct.realtime_shared);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetData_progress()) {
        oprot.writeFieldBegin(DATA_PROGRESS_FIELD_DESC);
        oprot.writeI32(struct.data_progress);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProgress_percent()) {
        oprot.writeFieldBegin(PROGRESS_PERCENT_FIELD_DESC);
        oprot.writeI32(struct.progress_percent);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRebuilding()) {
        oprot.writeFieldBegin(REBUILDING_FIELD_DESC);
        oprot.writeBool(struct.rebuilding);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnread_error_count()) {
        oprot.writeFieldBegin(UNREAD_ERROR_COUNT_FIELD_DESC);
        oprot.writeI32(struct.unread_error_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAction_cause()) {
        oprot.writeFieldBegin(ACTION_CAUSE_FIELD_DESC);
        oprot.writeI32(struct.action_cause);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppTupleSchemeFactory implements SchemeFactory {
    public AppTupleScheme getScheme() {
      return new AppTupleScheme();
    }
  }

  private static class AppTupleScheme extends TupleScheme<App> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, App struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetSchema()) {
        optionals.set(3);
      }
      if (struct.isSetQuota()) {
        optionals.set(4);
      }
      if (struct.isSetDescription()) {
        optionals.set(5);
      }
      if (struct.isSetGroup()) {
        optionals.set(6);
      }
      if (struct.isSetAuto_switch()) {
        optionals.set(7);
      }
      if (struct.isSetSwitch_time()) {
        optionals.set(8);
      }
      if (struct.isSetFetch_fields()) {
        optionals.set(9);
      }
      if (struct.isSetFirst_ranks()) {
        optionals.set(10);
      }
      if (struct.isSetVirtual_cluster()) {
        optionals.set(11);
      }
      if (struct.isSetRealtime_shared()) {
        optionals.set(12);
      }
      if (struct.isSetStatus()) {
        optionals.set(13);
      }
      if (struct.isSetData_progress()) {
        optionals.set(14);
      }
      if (struct.isSetProgress_percent()) {
        optionals.set(15);
      }
      if (struct.isSetRebuilding()) {
        optionals.set(16);
      }
      if (struct.isSetUnread_error_count()) {
        optionals.set(17);
      }
      if (struct.isSetAction_cause()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetSchema()) {
        struct.schema.write(oprot);
      }
      if (struct.isSetQuota()) {
        struct.quota.write(oprot);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetGroup()) {
        struct.group.write(oprot);
      }
      if (struct.isSetAuto_switch()) {
        oprot.writeBool(struct.auto_switch);
      }
      if (struct.isSetSwitch_time()) {
        oprot.writeI32(struct.switch_time);
      }
      if (struct.isSetFetch_fields()) {
        {
          oprot.writeI32(struct.fetch_fields.size());
          for (String _iter71 : struct.fetch_fields)
          {
            oprot.writeString(_iter71);
          }
        }
      }
      if (struct.isSetFirst_ranks()) {
        {
          oprot.writeI32(struct.first_ranks.size());
          for (Map.Entry<String, com.aliyun.opensearch.sdk.generated.first_rank.FirstRank> _iter72 : struct.first_ranks.entrySet())
          {
            oprot.writeString(_iter72.getKey());
            _iter72.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetVirtual_cluster()) {
        oprot.writeString(struct.virtual_cluster);
      }
      if (struct.isSetRealtime_shared()) {
        oprot.writeBool(struct.realtime_shared);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetData_progress()) {
        oprot.writeI32(struct.data_progress);
      }
      if (struct.isSetProgress_percent()) {
        oprot.writeI32(struct.progress_percent);
      }
      if (struct.isSetRebuilding()) {
        oprot.writeBool(struct.rebuilding);
      }
      if (struct.isSetUnread_error_count()) {
        oprot.writeI32(struct.unread_error_count);
      }
      if (struct.isSetAction_cause()) {
        oprot.writeI32(struct.action_cause);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, App struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.schema = new Schema();
        struct.schema.read(iprot);
        struct.setSchemaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.quota = new Quota();
        struct.quota.read(iprot);
        struct.setQuotaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.group = new Group();
        struct.group.read(iprot);
        struct.setGroupIsSet(true);
      }
      if (incoming.get(7)) {
        struct.auto_switch = iprot.readBool();
        struct.setAuto_switchIsSet(true);
      }
      if (incoming.get(8)) {
        struct.switch_time = iprot.readI32();
        struct.setSwitch_timeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fetch_fields = new ArrayList<String>(_list73.size);
          String _elem74;
          for (int _i75 = 0; _i75 < _list73.size; ++_i75)
          {
            _elem74 = iprot.readString();
            struct.fetch_fields.add(_elem74);
          }
        }
        struct.setFetch_fieldsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.first_ranks = new HashMap<String,com.aliyun.opensearch.sdk.generated.first_rank.FirstRank>(2*_map76.size);
          String _key77;
          com.aliyun.opensearch.sdk.generated.first_rank.FirstRank _val78;
          for (int _i79 = 0; _i79 < _map76.size; ++_i79)
          {
            _key77 = iprot.readString();
            _val78 = new com.aliyun.opensearch.sdk.generated.first_rank.FirstRank();
            _val78.read(iprot);
            struct.first_ranks.put(_key77, _val78);
          }
        }
        struct.setFirst_ranksIsSet(true);
      }
      if (incoming.get(11)) {
        struct.virtual_cluster = iprot.readString();
        struct.setVirtual_clusterIsSet(true);
      }
      if (incoming.get(12)) {
        struct.realtime_shared = iprot.readBool();
        struct.setRealtime_sharedIsSet(true);
      }
      if (incoming.get(13)) {
        struct.status = com.aliyun.opensearch.sdk.generated.app.AppStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.data_progress = iprot.readI32();
        struct.setData_progressIsSet(true);
      }
      if (incoming.get(15)) {
        struct.progress_percent = iprot.readI32();
        struct.setProgress_percentIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rebuilding = iprot.readBool();
        struct.setRebuildingIsSet(true);
      }
      if (incoming.get(17)) {
        struct.unread_error_count = iprot.readI32();
        struct.setUnread_error_countIsSet(true);
      }
      if (incoming.get(18)) {
        struct.action_cause = iprot.readI32();
        struct.setAction_causeIsSet(true);
      }
    }
  }

}

